<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="https://perevillega.com/feed_style.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <tabi:metadata xmlns:tabi="https://github.com/welpo/tabi">
        <tabi:separator>
            •
        </tabi:separator>
        <tabi:about_feeds>This is a web feed, also known as an Atom feed. Subscribe by copying the URL from the address bar into your newsreader. Visit About Feeds to learn more and get started. It&#x27;s free.</tabi:about_feeds>
        <tabi:visit_the_site>Visit website</tabi:visit_the_site>
        <tabi:recent_posts>Recent posts</tabi:recent_posts>
        <tabi:last_updated_on>Updated on $DATE</tabi:last_updated_on>
        <tabi:default_theme></tabi:default_theme>
        <tabi:post_listing_date>date</tabi:post_listing_date>
        <tabi:current_section>scala</tabi:current_section>
    </tabi:metadata><title>Software serves the Business - scala</title>
        <subtitle>Pere Villega&#x27;s blog</subtitle>
    <link href="https://perevillega.com/tags/scala/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://perevillega.com/tags/scala/" rel="alternate" type="text/html"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-01-28T00:00:00+00:00</updated>
    <id>https://perevillega.com/tags/scala/atom.xml</id><entry xml:lang="en">
        <title>Automerge your Scala Steward pull-requests</title>
        <published>2023-01-28T00:00:00+00:00</published>
        <updated>2023-01-28T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/scala-steward-automerge/" type="text/html"/>
        <id>https://perevillega.com/posts/scala-steward-automerge/</id>
        
            <content type="html">&lt;p&gt;If you code in Scala, it is likely that you use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scala-steward-org&#x2F;scala-steward&quot;&gt;Scala Steward&lt;&#x2F;a&gt; to keep your dependencies up-to-date. But merging all the pull-requests it generates is tiring. This blog post tries to solve that.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;As a note, the following instructions only work if you store your codebase in Github. Which is a safe bet, nowadays. If you use Gitlab or another system, you need to adapt the instructions to your platform.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#prerequisites&quot; aria-label=&quot;Anchor link for: prerequisites&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Prerequisites&lt;&#x2F;h2&gt;
&lt;p&gt;You need Administrator access to the repository. You need to tweak some settings in Github to allow for the automation,&lt;&#x2F;p&gt;
&lt;p&gt;An associated Github App, for your repository or organisation, must exist. To create one, follow steps 1 to 4 from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;marketplace&#x2F;actions&#x2F;scala-steward-github-action&quot;&gt;these instructions&lt;&#x2F;a&gt;. You don’t need to configure Scala Steward at this point. We provide the configuration required later on. But the secrets must exist in the repository.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, you need an existing Github action that builds your project. This must be set up to build any pull-request created in the project. Without it, we can’t know if a library upgrade breaks the codebase and if we can merge it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;repository-settings&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#repository-settings&quot; aria-label=&quot;Anchor link for: repository-settings&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Repository Settings&lt;&#x2F;h2&gt;
&lt;p&gt;To start with, we need to change some settings in the repository.&lt;&#x2F;p&gt;
&lt;p&gt;Go to &lt;code&gt;Settings&lt;&#x2F;code&gt; and, in the &lt;code&gt;General&lt;&#x2F;code&gt; tab, scroll down to he &lt;code&gt;Pull Request&lt;&#x2F;code&gt; section. Make sure to select both &lt;code&gt;Allow Auto-merge&lt;&#x2F;code&gt;, and &lt;code&gt;Automatically delete head branches&lt;&#x2F;code&gt;. If you see some options greyed out, that may be because you have an organisation that is using the free plan. In this case, you can’t enable auto-merge until you upgrade to a paid plan, sorry.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;Settings&lt;&#x2F;code&gt;, go to the &lt;code&gt;Branches&lt;&#x2F;code&gt; section and create a new &lt;code&gt;Branch protection rule&lt;&#x2F;code&gt;. Select your &lt;code&gt;main&lt;&#x2F;code&gt; branch as the target, or a branch where you usually merge your pull-requests. Then, select the following options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Require a pull request before merging&lt;&#x2F;code&gt; and &lt;code&gt;Require approvals&lt;&#x2F;code&gt; (set to 1) . Also  &lt;code&gt;Dismiss stale pull requests approvals&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Require status checks to pass before merging&lt;&#x2F;code&gt;. In the search box, find the Github action that builds your project. Keep &lt;code&gt;Require branches to be up to date&lt;&#x2F;code&gt; disabled.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;workflows&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#workflows&quot; aria-label=&quot;Anchor link for: workflows&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Workflows&lt;&#x2F;h2&gt;
&lt;p&gt;Save the changes to your repository settings. Now you need to add the following three workflows to your repository. You can copy the contents into the indicated files.&lt;&#x2F;p&gt;
&lt;p&gt;File: &lt;code&gt;autoapprove.yaml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;name: Auto approve
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;on: pull_request
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;jobs:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  auto-approve:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    runs-on: ubuntu-latest
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    permissions:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      pull-requests: write
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    if: startsWith(github.head_ref, &amp;#39;update&#x2F;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    steps:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      - uses: hmarr&#x2F;auto-approve-action@v3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;File: &lt;code&gt;automerge.yml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;name: Auto-merge
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;on: pull_request
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;jobs:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  automerge:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    runs-on: ubuntu-latest
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    if: startsWith(github.head_ref, &amp;#39;update&#x2F;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    steps:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      - name: Generate token
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        id: generate-token
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        uses: tibdex&#x2F;github-app-token@v1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        with:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          app_id: ${{ secrets.APP_ID }}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          private_key: ${{ secrets.APP_PRIVATE_KEY }}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      - uses: peter-evans&#x2F;enable-pull-request-automerge@v2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        with:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          pull-request-number: ${{ github.event.pull_request.number }}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          merge-method: rebase
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          token: ${{ steps.generate-token.outputs.token }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;File: &lt;code&gt;scala-steward.yml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# This workflow will launch at 7:00 am (UTC) each night
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;on:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  schedule:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    - cron: &amp;#39;0 7 * * *&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  workflow_dispatch:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;name: Scala Steward
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;jobs:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  scala-steward:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    runs-on: ubuntu-latest
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    name: Launch Scala Steward
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    steps:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      - name: Generate token
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        id: generate-token
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        uses: tibdex&#x2F;github-app-token@v1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        with:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          app_id: ${{ secrets.APP_ID }}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          private_key: ${{ secrets.APP_PRIVATE_KEY }}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      - name: Launch Scala Steward
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        uses: scala-steward-org&#x2F;scala-steward-action@v2.28.0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        with:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          github-token: ${{ steps.generate-token.outputs.token }}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          author-name: scala-steward
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          author-email: scala-steward@example.com
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          other-args: &amp;#39;--add-labels&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Commit and push the files, and you are ready to test this.&lt;&#x2F;p&gt;
&lt;p&gt;Go to &lt;code&gt;Actions&lt;&#x2F;code&gt; in your repository, select &lt;code&gt;Scala Steward&lt;&#x2F;code&gt;, and click on &lt;code&gt;run workflow&lt;&#x2F;code&gt;. Run it against the &lt;code&gt;main&lt;&#x2F;code&gt; branch (or your corresponding branch). Once Scala Steward finishes, check your current pull-requests. You can open any new pull-request created, and see the build process and approvals. Once the build step finishes successfully, it will be merged. If a build fails, it will not be merged.&lt;&#x2F;p&gt;
&lt;p&gt;That’s all for now, I hope this was informative and useful. As always, feedback via Mastodon&#x2F;Email is more than welcome. Cheers!&lt;&#x2F;p&gt;
</content>
        <summary type="html">If you code in Scala, it is likely that you use Scala Steward to keep your dependencies up-to-date. But merging all the pull-requests it generates is tiring. This blog post tries to solve that.
…</summary>
        </entry><entry xml:lang="en">
        <title>Using a remote server to build your Scala projects</title>
        <published>2020-05-09T00:00:00+00:00</published>
        <updated>2020-05-09T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/remote-build-servers-with-vs-code-and-metals/" type="text/html"/>
        <id>https://perevillega.com/posts/remote-build-servers-with-vs-code-and-metals/</id>
        
            <content type="html">&lt;p&gt;VS Code has released tooling &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;docs&#x2F;remote&#x2F;ssh&quot;&gt;for remote development via ssh&lt;&#x2F;a&gt;. In Scala the combo of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;scalameta.org&#x2F;metals&#x2F;&quot;&gt;Metals&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;VS Code&lt;&#x2F;a&gt; for development has become the norm for many people. How easy and convenient may it be to use them while on ssh with a remote server? Let’s discover it.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;why-would-someone-do-that&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#why-would-someone-do-that&quot; aria-label=&quot;Anchor link for: why-would-someone-do-that&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Why would someone do that&lt;&#x2F;h2&gt;
&lt;p&gt;First of all we should tackle an obvious question: why would a developer do that? The answer is that there are many valid scenarios for this approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;someone may work in a big corporation that gives lower-end Windows laptops, but has several servers available for developers to use&lt;&#x2F;li&gt;
&lt;li&gt;someone may not have enough budget to replace their aging laptop, and it is looking at the cloud as a cheaper alternative&lt;&#x2F;li&gt;
&lt;li&gt;an employer has Intellectual Property concerns and would like tight controls on where is the codebase cloned to&lt;&#x2F;li&gt;
&lt;li&gt;a developer uses mainly a desktop and they don’t want to buy a powerful laptop, but recently they need to travel more and still code&lt;&#x2F;li&gt;
&lt;li&gt;a developer is fed up with seeing iStats show 90+ C degrees on the cpu sensor of their laptop, sustained while sbt compiles the project&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Or, if none of them applies, just because we can. We’ll talk about cost-effectiveness of this approach towards the end of the post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-your-environment&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#setting-up-your-environment&quot; aria-label=&quot;Anchor link for: setting-up-your-environment&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Setting up your environment&lt;&#x2F;h2&gt;
&lt;p&gt;To make this work you will need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a local machine capable of running Visual Studio Code.&lt;&#x2F;li&gt;
&lt;li&gt;a remote server, preferably with Linux (we use Ubuntu 20.04 LTS).&lt;&#x2F;li&gt;
&lt;li&gt;to read and follow the steps in this post, adapting as needed if you use a different OS on your remote host.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The requirements for Visual Studio Code &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;Docs&#x2F;supporting&#x2F;requirements&quot;&gt;are quite low&lt;&#x2F;a&gt;, remember that the heavy lifting (compiling) won’t be done in the local machine, so even old laptops should work fine.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally you have some internet exposed desktop or server that you can use as the remote host. If you don’t have any at hand, look at a VPS service like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.linode.com&quot;&gt;Linode&lt;&#x2F;a&gt; or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.hetzner.com&#x2F;&quot;&gt;Hetzner&lt;&#x2F;a&gt;. We’d recommend against AWS or GCP as they seem to be more expensive for worse performance. This post will use Linode, for no other reason that we used it in the past and we were happy with it. No affiliation with the brand.&lt;&#x2F;p&gt;
&lt;p&gt;Important note: if you are creating a new account in a VPS, expect to provide a valid credit card number to cover for the costs of any usage. There may also be a delay while they verify your account details; a new account via a UK-based Ltd company with Linode took 30m to be verified.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-your-remote-developer-instance&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#creating-your-remote-developer-instance&quot; aria-label=&quot;Anchor link for: creating-your-remote-developer-instance&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Creating your remote developer instance&lt;&#x2F;h2&gt;
&lt;p&gt;First of all, provision an instance for the server if you need it. We use &lt;code&gt;Linode Dedicated CPU&lt;&#x2F;code&gt; instances as they are supposed to have better CPU performance. You can follow &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;docs&#x2F;platform&#x2F;dedicated-cpu&#x2F;getting-started-with-dedicated-cpu&#x2F;&quot;&gt;these steps&lt;&#x2F;a&gt; to create one. We chose the following settings:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Ubuntu 20.04 LTS&lt;&#x2F;li&gt;
&lt;li&gt;Region: London&lt;&#x2F;li&gt;
&lt;li&gt;Plan: Dedicated 8 Gb (4 cores, 8 Gb RAM)&lt;&#x2F;li&gt;
&lt;li&gt;Provide root password and ssh key for your local machine&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Provisioning takes around one minute, and then you can ssh into the box with &lt;code&gt;ssh root@&amp;lt;ip&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Important note: on new accounts with Linode, you need to open a ticket with support to enable Dedicated 16 Gb and Dedicated 32 Gb Linode for your account. Otherwise you won’t be allowed to create those instances. Other VPS may have similar rules.&lt;&#x2F;p&gt;
&lt;p&gt;Once the machine is up, ssh into it. The next step is to install a valid JDK. You can use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;adoptopenjdk&#x2F;adoptopenjdk-rpm-and-deb-files-7003ba38144e&quot;&gt;Adopt OpenJDK&lt;&#x2F;a&gt; by running the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; wget &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;-qO&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; - https:&#x2F;&#x2F;adoptopenjdk.jfrog.io&#x2F;adoptopenjdk&#x2F;api&#x2F;gpg&#x2F;key&#x2F;public&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; apt-key add&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; add-apt-repository &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;--yes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; https:&#x2F;&#x2F;adoptopenjdk.jfrog.io&#x2F;adoptopenjdk&#x2F;deb&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; apt-get &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;update&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; apt-get &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;install&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; adoptopenjdk-11-hotspot&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then edit your &lt;code&gt;.profile&lt;&#x2F;code&gt; and add an export for &lt;code&gt;JAVA_HOME&lt;&#x2F;code&gt; to it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-shell&quot;&gt;export&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;JAVA_HOME&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;adoptopenjdk-11-hotspot-amd64&#x2F;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also want to increase the number of file descriptors available to avoid issues with VS Code and large projects. To that end, edit &lt;code&gt;&#x2F;etc&#x2F;sysctl.conf&lt;&#x2F;code&gt;
and add to the bottom of the file &lt;code&gt;fs.inotify.max_user_watches=524288&lt;&#x2F;code&gt; and run &lt;code&gt;sysctl -p&lt;&#x2F;code&gt; to reapply the changes.&lt;&#x2F;p&gt;
&lt;p&gt;We also want &lt;code&gt;sbt&lt;&#x2F;code&gt; and &lt;code&gt;npm&lt;&#x2F;code&gt; (for &lt;code&gt;scala.js&lt;&#x2F;code&gt;), which we can install as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; echo &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;deb https:&#x2F;&#x2F;dl.bintray.com&#x2F;sbt&#x2F;debian &#x2F;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; tee&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;a&lt;&#x2F;span&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;sbt.list&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; apt-key &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;adv&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;keyserver&lt;&#x2F;span&gt; hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;recv&lt;&#x2F;span&gt; 2EE0EA64E40A89B84B2DF73499E82A75642AC823&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; apt-get &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;update&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; apt-get &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;-y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install sbt npm&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To be able to work with Github, you will need to add the ssh public key of this instance to your profile. To generate a key, run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; ssh-keygen &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;-t&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; rsa&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;b&lt;&#x2F;span&gt; 4096&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;C&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;your_email@example.com&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;  &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; don&amp;#39;t add a password&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; cat &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;.ssh&#x2F;id_rsa.pub&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Copy the output of the last command and add it to your SSH key list in Github.&lt;&#x2F;p&gt;
&lt;p&gt;As the last step, clone the repository of &lt;code&gt;cats&lt;&#x2F;code&gt; so that we can run some tests on it later:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; clone git@github.com:typelevel&#x2F;cats.git&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With these, your remote server should be ready to run scala code. As the next step, we need to connect a VS Code instance to it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;connecting-visual-studio-code&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#connecting-visual-studio-code&quot; aria-label=&quot;Anchor link for: connecting-visual-studio-code&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Connecting Visual Studio Code&lt;&#x2F;h2&gt;
&lt;p&gt;Open your VS Code and install the extension &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=ms-vscode-remote.remote-ssh&quot;&gt;Remote - SSH&lt;&#x2F;a&gt;.
Then follow the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;docs&#x2F;remote&#x2F;ssh&quot;&gt;official documentation&lt;&#x2F;a&gt; to connect to the remote server:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;open the &lt;code&gt;Remote Explorer&lt;&#x2F;code&gt; menu and add your server&lt;&#x2F;li&gt;
&lt;li&gt;once configured, you can &lt;code&gt;connect&lt;&#x2F;code&gt; to the server. This will open a new VS Code window. The bottom panel will show (on the left side) that you are connected to a remote server&lt;&#x2F;li&gt;
&lt;li&gt;extensions are (usually) installed on the server, which means you will need to reinstall Metals. Open the &lt;code&gt;Extensions&lt;&#x2F;code&gt; panel, in there you will see that extensions are split between &lt;code&gt;local&lt;&#x2F;code&gt; and &lt;code&gt;ssh&lt;&#x2F;code&gt;. Scroll the &lt;code&gt;local&lt;&#x2F;code&gt; list and press the green &lt;code&gt;install in ssh&lt;&#x2F;code&gt; button for all those extensions you want to enable on your remote machine.&lt;&#x2F;li&gt;
&lt;li&gt;if you haven’t done so, search for &lt;code&gt;Metals&lt;&#x2F;code&gt; and install it. Then reload the window.&lt;&#x2F;li&gt;
&lt;li&gt;Edit VS Code settings for Metals, on the &lt;code&gt;ssh&lt;&#x2F;code&gt; section for your remote machine set the proper path for &lt;code&gt;Java Home&lt;&#x2F;code&gt; in &lt;code&gt;Metals&lt;&#x2F;code&gt; (see previous section of this post for the path). This will require another reload of VS Code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you installed the &lt;code&gt;Live Share&lt;&#x2F;code&gt; extension, you may be prompted to install additional components, which requires yet another window refresh.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loading-your-project&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#loading-your-project&quot; aria-label=&quot;Anchor link for: loading-your-project&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Loading your project&lt;&#x2F;h2&gt;
&lt;p&gt;Once the VS Code window has reloaded and reconnected to the server, you can just go to &lt;code&gt;File &amp;gt; Open&lt;&#x2F;code&gt; and select the &lt;code&gt;cats&lt;&#x2F;code&gt; project you cloned when setting up the server.
Metals will let you know that this is an &lt;code&gt;sbt&lt;&#x2F;code&gt; project and it will request to load it.&lt;&#x2F;p&gt;
&lt;p&gt;That’s it. Once Metals completes the set up, you are ready to go and code as you are used to.&lt;&#x2F;p&gt;
&lt;p&gt;Important: Note that any &lt;code&gt;terminal&lt;&#x2F;code&gt; you open while in the &lt;code&gt;ssh&lt;&#x2F;code&gt; window will open directly in the remote server.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;backing-up-your-remote-server&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#backing-up-your-remote-server&quot; aria-label=&quot;Anchor link for: backing-up-your-remote-server&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Backing up your remote server&lt;&#x2F;h2&gt;
&lt;p&gt;At this point you want to create an image of your server. Note that Linode (and most other platforms) will still charge you for the box if you stop it, as it is still provisioned for you.&lt;&#x2F;p&gt;
&lt;p&gt;To reduce costs what you want is to have an image with the latest changes to your server, which you can do &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;docs&#x2F;platform&#x2F;disk-images&#x2F;linode-images&#x2F;&quot;&gt;following these steps&lt;&#x2F;a&gt;. Building the image took less than 2 minutes for our server. Once you have the image, you can delete your instance and create a new one when needed, using that image as a starting point. The image will keep the same ssh public key, which means you can interact with Github using your account without any additional steps.&lt;&#x2F;p&gt;
&lt;p&gt;Note that in Linode you have some restrictions on images but even so this should be enough for your purposes. Alternatively, you could use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;docs&#x2F;platform&#x2F;stackscripts&#x2F;&quot;&gt;Stack Scripts&lt;&#x2F;a&gt; or some other automated system to create images on demand.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#performance&quot; aria-label=&quot;Anchor link for: performance&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Performance&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have everything set up, we need to verify how fast is this setup. How does it compare to running everything locally? To test this we downloaded &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;cats&quot;&gt;cats&lt;&#x2F;a&gt; and we run &lt;code&gt;;clean;test&lt;&#x2F;code&gt; in &lt;code&gt;sbt&lt;&#x2F;code&gt; a few times. The following is a completely non-scientific table of the measurements:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Machine&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Avg&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Macbook 16“ late 2019 (8 cores)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3:28&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Linode 4 cores&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;Error&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Linode 8 cores&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;11:48&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Linode 16 cores&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4:46&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;All Linode instances are ‘Dedicated CPU’ instances. On the ‘Linode 4’ instance,&lt;code&gt;sbt&lt;&#x2F;code&gt; was often killed by the OS when running alongside VS Code.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s be realistic, the performance is worse. The fastest Linode test, using the 16 cores machine, is over 1 minute slower than a test using a local environment. Unless you have a remote server you own and with a decent cpu, you are going to lose at least some performance. But it’s not too terrible.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enter-hydra&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#enter-hydra&quot; aria-label=&quot;Anchor link for: enter-hydra&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Enter Hydra&lt;&#x2F;h2&gt;
&lt;p&gt;Remember that we are trying to find a way to run compilation in remote servers for cases where a local setup is not an option. Maybe we can improve on it? &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;triplequote.com&quot;&gt;Triplequote&lt;&#x2F;a&gt; offers &lt;code&gt;Hydra&lt;&#x2F;code&gt;, a parallel compiler for Scala. This would increase costs, but can this turn it into a viable alternative?&lt;&#x2F;p&gt;
&lt;p&gt;We followed the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.triplequote.com&#x2F;trial&#x2F;sbt&#x2F;&quot;&gt;instructions for a trial&lt;&#x2F;a&gt; with &lt;code&gt;Hydra&lt;&#x2F;code&gt; and we run the tests again in Linode. The trial license uses a &lt;code&gt;Developer (Enterprise)&lt;&#x2F;code&gt; license which can take advantage of up to 8 cores.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Machine (with Hydra)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Avg&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Linode 8 cores&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6:39&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Linode 16 cores&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1:30&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;We can see Hydra makes a big difference as it is able to take advantage of the number of cores available. In the lower spec Linode we halve the compile time, while in the Linode with 16 cores we compile cats in a third of the time it originally took. The improvements would be similar in a local setup, but let’s remember that we are looking at scenarios where you need (want) to use a remote setup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cost-of-the-setup&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#cost-of-the-setup&quot; aria-label=&quot;Anchor link for: cost-of-the-setup&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Cost of the setup&lt;&#x2F;h2&gt;
&lt;p&gt;A MacBook Pro 16“ 2019, with the maximum RAM (64 Gb) and CPU (8 core 2.4 Ghz) currently costs $3,799.00, taxes aside. Other non-Apple laptops and desktops will be cheaper, but I use this as a reference as it is the one many companies give to their developers, so it is a fair benchmark for comparison.&lt;&#x2F;p&gt;
&lt;p&gt;A Linode (Dedicated CPU) with 8 cores and 16 Gb RAM costs USD0.18&#x2F;hour. For a standard work schedule of 45h per week and 50 weeks per year (and you should really work less than that), it adds up to USD8.1 per week, and USD405 for the year. Assuming the same use pattern, a Linode with 16 cores and 32 Gb of RAM (USD0.36&#x2F;hr) costs twice as much: $16.2 per week, USD910 per year.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;Developer - Enterprise&lt;&#x2F;code&gt; license for &lt;code&gt;Hydra&lt;&#x2F;code&gt; costs $1,080&#x2F;year per seat, to take advantage of up to 8 cores.&lt;&#x2F;p&gt;
&lt;p&gt;The slower Linode with 8 cores, with Hydra, would cost $1,485&#x2F;year but it is twice as slow as the laptop we compare it with, which makes it a less appealing choice. Without Hydra the compilation times become too high to even consider it as an option.&lt;&#x2F;p&gt;
&lt;p&gt;But with the Linode 16 cores the story changes, as the performance is closer to what we get with a local machine. You could pay USD910 for the Linode instance and get compile times around 30% slower, but at 25% of the cost of the laptop. Or, if you add Hydra and increase the cost to USD1,990, you can be 60% faster than the laptop for around 50% of the price.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#conclusions&quot; aria-label=&quot;Anchor link for: conclusions&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Conclusions&lt;&#x2F;h2&gt;
&lt;p&gt;Is it cloud computing ready to become your development server? As with most things in development, it depends. If you need to squeeze every bit of performance
from your machines, then a local setup is still preferred. And you should get a Hydra license, period.&lt;&#x2F;p&gt;
&lt;p&gt;But if not, you can get reasonable performance from dedicated machines. A Linode with 16 cores and without Hydra is a quarter of the price of a top of the shelf laptop,
and you still get reasonable performance. If you add Hydra on top, then we are looking at remote setups that outperform a local setup, while costing you less upfront. A hard-to-beat proposition.&lt;&#x2F;p&gt;
&lt;p&gt;There are multiple caveats, of course. For example, the SSH extension for Visual Studio Code is still on &lt;code&gt;preview&lt;&#x2F;code&gt; and there may be glitches. Also, things that are easily achieved with a local workflow may be slightly more complicated with a remote one.&lt;&#x2F;p&gt;
&lt;p&gt;But not many project will be as demanding as &lt;code&gt;cats&lt;&#x2F;code&gt; for compilation, due to its multiple compile targets. And there are other possible benefits, like being to replace docker services running locally by ones in remote servers, reducing pressure on the computer even more. Given that we would expect costs for
cloud computing to decrease as time goes by, this setup can only become better as time goes by. Yes, it is unlikely to beat a local setup on raw performance, but sometimes that is not the only constraint.&lt;&#x2F;p&gt;
&lt;p&gt;That’s all for now, I hope this was informative and useful. As always, feedback via Twitter&#x2F;Email is more than welcome. Cheers!&lt;&#x2F;p&gt;
</content>
        <summary type="html">VS Code has released tooling for remote development via ssh. In Scala the combo of Metals and VS Code for development has become the norm for many people. How easy and convenient may it be to use them while on ssh with a remote server? Let’s discover it.
…</summary>
        </entry><entry xml:lang="en">
        <title>Bridging Scala and the Front-End at Underscore blog</title>
        <published>2018-12-28T00:00:00+00:00</published>
        <updated>2018-12-28T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/bridges/" type="text/html"/>
        <id>https://perevillega.com/posts/bridges/</id>
        
            <content type="html">&lt;p&gt;This is just a short entry to make you aware of a new post at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2018&#x2F;12&#x2F;12&#x2F;bridges.html&quot;&gt;Underscore’s&lt;&#x2F;a&gt; blog.&lt;&#x2F;p&gt;
&lt;p&gt;As usual, many thanks to Underscore for all the suggestions and reviews, and for publishing it. Contributions were crucial!&lt;&#x2F;p&gt;
&lt;p&gt;Now please go to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2018&#x2F;12&#x2F;12&#x2F;bridges.html&quot;&gt;Underscore’s blog&lt;&#x2F;a&gt; and enjoy the post. Cheers!&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Tips for working with FS2 at Underscore blog</title>
        <published>2018-03-20T00:00:00+00:00</published>
        <updated>2018-03-20T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/tips-working-fs2/" type="text/html"/>
        <id>https://perevillega.com/posts/tips-working-fs2/</id>
        
            <content type="html">&lt;p&gt;This is just a short entry to make you aware of a new post at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2018&#x2F;03&#x2F;20&#x2F;fs2.html&quot;&gt;Underscore’s&lt;&#x2F;a&gt; blog.&lt;&#x2F;p&gt;
&lt;p&gt;As usual, many thanks to Underscore for all the suggestions and reviews, and for publishing it. Contributions were crucial!&lt;&#x2F;p&gt;
&lt;p&gt;Now please go to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2018&#x2F;03&#x2F;20&#x2F;fs2.html&quot;&gt;Underscore’s blog&lt;&#x2F;a&gt; and enjoy the post. Cheers!&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Refining your data post at Underscore blog</title>
        <published>2017-03-09T00:00:00+00:00</published>
        <updated>2017-03-09T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/refining-your-data/" type="text/html"/>
        <id>https://perevillega.com/posts/refining-your-data/</id>
        
            <content type="html">&lt;p&gt;This is just a short entry to make you aware of a new post (again!) at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2017&#x2F;03&#x2F;07&#x2F;refined-data-config-database.html&quot;&gt;Underscore’s&lt;&#x2F;a&gt; blog.&lt;&#x2F;p&gt;
&lt;p&gt;As usual, many thanks to Underscore for all the suggestions and reviews, and for publishing it. Contributions were crucial!&lt;&#x2F;p&gt;
&lt;p&gt;Now please go to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2017&#x2F;03&#x2F;07&#x2F;refined-data-config-database.html&quot;&gt;Underscore’s blog&lt;&#x2F;a&gt; and enjoy the post. Cheers!&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Finch post at Underscore blog</title>
        <published>2017-01-25T00:00:00+00:00</published>
        <updated>2017-01-25T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/finch-underscore-post/" type="text/html"/>
        <id>https://perevillega.com/posts/finch-underscore-post/</id>
        
            <content type="html">&lt;p&gt;This is just a short entry to make you aware of a new post by yours truly at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2017&#x2F;01&#x2F;24&#x2F;finch-functional-web-development.html&quot;&gt;Underscore’s&lt;&#x2F;a&gt; blog.&lt;&#x2F;p&gt;
&lt;p&gt;Many thanks to Underscore for all the suggestions and review, and for publishing it.&lt;&#x2F;p&gt;
&lt;p&gt;Now please go to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2017&#x2F;01&#x2F;24&#x2F;finch-functional-web-development.html&quot;&gt;Underscore’s blog&lt;&#x2F;a&gt; and enjoy the post. Cheers!&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>Learning Shapeless</title>
        <published>2016-11-14T00:00:00+00:00</published>
        <updated>2016-11-14T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/learning-shapeless/" type="text/html"/>
        <id>https://perevillega.com/posts/learning-shapeless/</id>
        
            <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;Shapeless&lt;&#x2F;a&gt; is a type class and dependent type based generic programming library for Scala. It had its origins in several talks by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;milessabin&quot;&gt;Miles Sabin&lt;&#x2F;a&gt;, and he has been the main contributor to the project.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Within the community, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;Shapeless&lt;&#x2F;a&gt; is considered both as a stepping stone towards very advanced Scala constructs and a hard to learn (and to master) library. Unfortunately, Shapeless documentation is a bit sparse so users must find external resources to learn parts of the library.&lt;&#x2F;p&gt;
&lt;p&gt;My aim with this blog post is to provide a list of useful resources that may help you understand &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;Shapeless&lt;&#x2F;a&gt; and how your project can benefit from using it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-shapeless&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#why-shapeless&quot; aria-label=&quot;Anchor link for: why-shapeless&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Why Shapeless&lt;&#x2F;h2&gt;
&lt;p&gt;First of all you may want to know what are the benefits of using Shapeless. Is it only relevant for library authors, or is it a library you want to use on your production codebase?&lt;&#x2F;p&gt;
&lt;p&gt;These &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;nigewarren&#x2F;introduction-to-shapeless&quot;&gt;slides&lt;&#x2F;a&gt; from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;nigewarren&quot;&gt;Nigel Warren&lt;&#x2F;a&gt; show some realistic use cases for Shapeless. A short read that can give you an idea on what you could achieve with it.&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JKaCCYZYBWo&quot;&gt;video&lt;&#x2F;a&gt; from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;valentinkasas?lang=en&quot;&gt;Valentin Kasas&lt;&#x2F;a&gt; at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scalar-conf.com&quot;&gt;Scalar 2016&lt;&#x2F;a&gt; shows a practical use case of Shapeless and HList, with example code.&lt;&#x2F;p&gt;
&lt;p&gt;The above links are introductions to the library and, as such, limited in scope. But you can already see a common theme, via the use of HList constructs: to provide a single implementation that works with all your types, instead of one implementation for every single type.&lt;&#x2F;p&gt;
&lt;p&gt;This approach has obvious advantages: less code means less bugs and less surface to be tested, while the fact it works for any case class makes the code more robust against new types introduced in the future.&lt;&#x2F;p&gt;
&lt;p&gt;I won’t deny the type signatures are a bit off-putting, but that is a small price to pay for the flexibility you can obtain.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-business-case&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#a-business-case&quot; aria-label=&quot;Anchor link for: a-business-case&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
A Business Case&lt;&#x2F;h2&gt;
&lt;p&gt;Even after reading the links above you may still be a Shapeless skeptic, with the belief that is a tool with little benefit ‘in the real world’ (whatever that means to you). Confession time: I also was one, and it was a real-world issue at work what changed my mind.&lt;&#x2F;p&gt;
&lt;p&gt;The scenario is simple: we had a set of case classes representing different value types, and we needed to render them as Html, with reasonable expectations of adding many more types in the near future. So we wanted a simple way to convert exiting types plus any other type we would create later on.&lt;&#x2F;p&gt;
&lt;p&gt;If you have read some tutorials on Shapeless you may recognise this case as a common example to introduce some of the functionalities of the library, and this is so for a good reason: Shapeless excels at this task.&lt;&#x2F;p&gt;
&lt;p&gt;I am not allowed to publish all the code, but you can see a relevant snippet below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; ShowHtml&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;hnilEncoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;HNil&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;HNil&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;showHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;t&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;HNil&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;NodeSeq&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;NodeSeq&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Empty&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;hlistEncoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bound z-scala&quot;&gt;&amp;lt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                            &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                            &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;hEncoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Lazy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                            &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;tEncoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                          &lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;showHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;hlist&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;NodeSeq&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; hlist &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;        &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;h&lt;&#x2F;span&gt; :: &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;t&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt; hEncoder&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;value&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;showHtml&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;h&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; ++ tEncoder&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;showHtml&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;t&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;cnilEncoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;CNil&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;CNil&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;showHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;t&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;CNil&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;NodeSeq&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;NodeSeq&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Empty&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;coproductEncoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bound z-scala&quot;&gt;&amp;lt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Coproduct&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                    &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;hEncoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Lazy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;tEncoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                  &lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:+:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:+:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;showHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;hlist&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;H&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:+:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;NodeSeq&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; hlist &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;        &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Inl&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;h&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt; hEncoder&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;value&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;showHtml&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;h&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Inr&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;t&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt; tEncoder&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;showHtml&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;t&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;genericEncoder&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;R&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                   &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                   &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Generic&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;R&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                   &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;enc&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Lazy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;R&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;                 &lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;showHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; enc&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;value&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;showHtml&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;gen&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;to&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;a&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;stringShow&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;showHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;t&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;NodeSeq&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-text z-xml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-xml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-xml&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-inline z-begin z-xml&quot;&gt;{&lt;&#x2F;span&gt;t&lt;span class=&quot;z-punctuation z-definition z-inline z-end z-xml&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-xml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-xml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-begin z-xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-xml&quot;&gt;ul&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-tag z-end z-xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;booleanShow&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;showHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;b&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; stringShow&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;showHtml&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;b&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;toString&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;intShow&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ShowHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;showHtml&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;n&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; stringShow&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;showHtml&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;n&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;toString&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I won’t explain the code itself, that’s not the aim of this post and in any case it’s not complete. What matters is that this snippet is the core of a fragment of code that thanks to methods &lt;code&gt;hlistEncoder&lt;&#x2F;code&gt;, &lt;code&gt;coproductEncoder&lt;&#x2F;code&gt;, and related definitions will convert any case class in the codebase to HTML. This includes any future case class we create later on, no changes required.&lt;&#x2F;p&gt;
&lt;p&gt;As a developer, it hardly gets better than this :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;effortless-shapeless&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#effortless-shapeless&quot; aria-label=&quot;Anchor link for: effortless-shapeless&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Effortless Shapeless&lt;&#x2F;h2&gt;
&lt;p&gt;You may not be convinced of the benefits of Shapeless (ok, keep reading then) or maybe you feel learning Shapeless requires an amount of effort and time you cannot spare. I have good news for you: you don’t need to learn Shapeless to benefit from it.&lt;&#x2F;p&gt;
&lt;p&gt;If you browse the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;index.scala-lang.org&#x2F;&quot;&gt;Scala index&lt;&#x2F;a&gt; and search for &lt;code&gt;shapeless&lt;&#x2F;code&gt; you’ll see a lot of results. Besides Shapeless itself you will find entries like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;index.scala-lang.org&#x2F;alexarchambault&#x2F;argonaut-shapeless&quot;&gt;Argonaut Shapeless&lt;&#x2F;a&gt; which provides automatic derivation of codecs for your case classes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;index.scala-lang.org&#x2F;typelevel&#x2F;shapeless-contrib&quot;&gt;Shapeless Contrib&lt;&#x2F;a&gt; which enables integration of Shapeless with libraries like Scalaz, which benefit from automatic derivation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And many more. These libraries make your coding experience easier by leveraging shapeless. But you are not exposed to Shapeless itself, that’s hidden from you. For example, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;index.scala-lang.org&#x2F;alexarchambault&#x2F;argonaut-shapeless&quot;&gt;Argonaut Shapeless&lt;&#x2F;a&gt; provides json codecs for your case classes automatically. So, as per the library documentation, this just works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; argonaut&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; Argonaut&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; ArgonautShapeless&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Base&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; First&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;i&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Base&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Second&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Base&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; encoding&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;encode&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EncodeJson&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;of&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;json&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; encode&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;First&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;json&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;nospaces &lt;span class=&quot;z-keyword z-operator z-comparison z-scala&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-triple z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;{&amp;quot;First&amp;quot;:{&amp;quot;i&amp;quot;:2}}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; decoding&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;decode&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;DecodeJson&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;of&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;result&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; decode&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;decodeJson&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;json&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;result &lt;span class=&quot;z-keyword z-operator z-comparison z-scala&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;DecodeResult&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;ok&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;First&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, no encoder nor decoder have been defined in the code, that being a tedious and repetitive task. Any new case class or ADT you add to your codebase benefits from this behaviour, automatically.&lt;&#x2F;p&gt;
&lt;p&gt;By using these libraries you will understand what Shapeless offers you much better, and they may be your ‘gateway library’ to learning Shapeless.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-shapeless&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#learning-shapeless&quot; aria-label=&quot;Anchor link for: learning-shapeless&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Learning Shapeless&lt;&#x2F;h2&gt;
&lt;p&gt;You have been convinced and want to learn Shapeless. Now what?&lt;&#x2F;p&gt;
&lt;p&gt;A while ago that would mean scouring lots of links and blog posts online, to find information about the most recent release of the library. Nowadays there is a much straightforward solution, thanks to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;davegurnell&quot;&gt;Dave Gurnell&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;underscore.io&#x2F;&quot;&gt;Underscore&lt;&#x2F;a&gt;: read the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;underscoreio&#x2F;shapeless-guide&quot;&gt;Shapeless book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, there is a free ebook that explains how to use Shapeless, and it is a great book. Thanks Dave!&lt;&#x2F;p&gt;
&lt;p&gt;Not only that, but &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.47deg.com&#x2F;&quot;&gt;47 Degrees&lt;&#x2F;a&gt; have released &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.scala-exercises.org&#x2F;&quot;&gt;Scala Exercises&lt;&#x2F;a&gt;, a free website where you can practice some of the Shapeless concepts.&lt;&#x2F;p&gt;
&lt;p&gt;And for the cases not covered by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.scala-exercises.org&#x2F;&quot;&gt;Scala Exercises&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;scalafiddle.io&#x2F;&quot;&gt;Scala Fiddle&lt;&#x2F;a&gt; allows you to select Shapeless as an available library (see &lt;em&gt;Libraries&lt;&#x2F;em&gt; section on the left-hand panel), so that you can test your Shapeless snippets online. Who needs an IDE?&lt;&#x2F;p&gt;
&lt;p&gt;This means you can easily read documentation on Shapeless and solve some exercises to test your newly acquired knowledge. What’s your excuse? Go and start learning!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;additional-guides&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#additional-guides&quot; aria-label=&quot;Anchor link for: additional-guides&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Additional Guides&lt;&#x2F;h2&gt;
&lt;p&gt;The existence of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;underscoreio&#x2F;shapeless-guide&quot;&gt;Shapeless book&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.scala-exercises.org&#x2F;&quot;&gt;Scala Exercises&lt;&#x2F;a&gt; makes learning Shapeless much easier, but I would be remiss if I dismissed other guides you can find online.&lt;&#x2F;p&gt;
&lt;p&gt;I find it very useful, when trying to learn a new and complex subject, to read many posts about the same idea. The repetition of the concepts breeds familiarity (hopefully without contempt!) with the concepts, and an array of examples allows for better understanding of the core ideas plus some of their nuances.&lt;&#x2F;p&gt;
&lt;p&gt;To this aim I recommend you to read the following posts, either before starting the book or as complementary documentation to flesh out the trickier concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;skaalf&quot;&gt;Julien&lt;&#x2F;a&gt; wrote an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;jto.github.io&#x2F;articles&#x2F;getting-started-with-shapeless&#x2F;&quot;&gt;introduction to Shapeless&lt;&#x2F;a&gt; which describes (at a very high level) the main components of the library&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;evacchi&quot;&gt;Edoardo Vacchi&lt;&#x2F;a&gt; wrote a good &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;rnduja.github.io&#x2F;2016&#x2F;01&#x2F;19&#x2F;a_shapeless_primer&#x2F;&quot;&gt;primer on Shapeless&lt;&#x2F;a&gt; that delves into a bit more detail than Julien’s article.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;AKmetyuk&quot;&gt;Anatolii Kmetiuk&lt;&#x2F;a&gt; wrote a couple of posts that describe both &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;akmetiuk.com&#x2F;blog&#x2F;2016&#x2F;09&#x2F;30&#x2F;dissecting-shapeless-hlists.html&quot;&gt;HList&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;akmetiuk.com&#x2F;blog&#x2F;2016&#x2F;10&#x2F;09&#x2F;dissecting-shapeless-poly.html&quot;&gt;Poly&lt;&#x2F;a&gt; in much more detail.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;vlpavkin&quot;&gt;Vladimir Pavkin&lt;&#x2F;a&gt; shows how to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;pavkin.ru&#x2F;implementing-typesafe-request-builder&#x2F;&quot;&gt;implement a typesafe request builder&lt;&#x2F;a&gt; using Shapeless, a more practical example.&lt;&#x2F;li&gt;
&lt;li&gt;And, lastly, if you want to see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;travisbrown&quot;&gt;Travis Brown&lt;&#x2F;a&gt; doing some magic with Shapeless to solve a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;projecteuler.net&#x2F;problem=2&quot;&gt;Project Euler problem&lt;&#x2F;a&gt; please read &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;31615371&#x2F;scala-shapeless-code-for-project-euler-2&#x2F;31640467#31640467&quot;&gt;this stack overflow answer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As mentioned, these links are complementary to the book but worth reading.&lt;&#x2F;p&gt;
&lt;p&gt;That’s all for now, I hope this was informative and useful. As always, feedback via Twitter&#x2F;Email is more than welcome. Cheers!&lt;&#x2F;p&gt;
</content>
        <summary type="html">Shapeless is a type class and dependent type based generic programming library for Scala. It had its origins in several talks by Miles Sabin, and he has been the main contributor to the project.
…</summary>
        </entry><entry xml:lang="en">
        <title>Free Monads and Stockfighter</title>
        <published>2016-08-22T00:00:00+00:00</published>
        <updated>2016-08-22T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/free-monads-and-stockfighter/" type="text/html"/>
        <id>https://perevillega.com/posts/free-monads-and-stockfighter/</id>
        
            <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.stockfighter.io&#x2F;&quot;&gt;StockFighter&lt;&#x2F;a&gt; is a game by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;patio11&#x2F;&quot;&gt;Patrick McKenzie&lt;&#x2F;a&gt; (Hi Patrick!) and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.starfighters.io&#x2F;about&quot;&gt;others&lt;&#x2F;a&gt; that makes you compete in a virtual Stock Exchange to accomplish certain objectives. They use it as a recruitment tool (kind of, read their website) but it’s a very entertaining game, even if you are not looking for a new job.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Why am I talking about &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.stockfighter.io&#x2F;&quot;&gt;StockFighter&lt;&#x2F;a&gt;? Well, as you can guess from the title, because &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;tut&#x2F;freemonad.html&quot;&gt;Free Monads&lt;&#x2F;a&gt;! Care to join?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-mission&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#the-mission&quot; aria-label=&quot;Anchor link for: the-mission&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
The Mission&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.stockfighter.io&#x2F;&quot;&gt;StockFighter&lt;&#x2F;a&gt; provides an environment which is limited in scope, but still complex enough that showcases limitations&#x2F;strengths for a given tool. I’ve had in my backlog, for a looong while, the &lt;em&gt;mission&lt;&#x2F;em&gt; of completing the game. Building an API to do so using Free seemed like the perfect match.&lt;&#x2F;p&gt;
&lt;p&gt;The aim was to build a Free Monad wrapper on top of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;starfighter.readme.io&#x2F;docs&#x2F;&quot;&gt;Stockfighter API&lt;&#x2F;a&gt;, using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ProjectSeptemberInc&#x2F;freek&quot;&gt;Freek&lt;&#x2F;a&gt;, which allows us to solve the levels of the game. The API would only focus on the &lt;em&gt;Trading&lt;&#x2F;em&gt; part of the game as the other component, &lt;em&gt;Jailbreak&lt;&#x2F;em&gt;, is not fully ready to be used.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;caveats&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#caveats&quot; aria-label=&quot;Anchor link for: caveats&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Caveats&lt;&#x2F;h2&gt;
&lt;p&gt;Before we start, I want to make you aware that I am a beginner regarding Free. I’ve heard a lot about the subject, and I previously wrote two posts about them: &lt;a href=&quot;&#x2F;understanding-free-monads&quot;&gt;Free Monad&lt;&#x2F;a&gt; and &lt;a href=&quot;&#x2F;freek-and-free-monads&quot;&gt;Freek and Free Monads&lt;&#x2F;a&gt; as a result of my research around the concept.&lt;&#x2F;p&gt;
&lt;p&gt;But these posts approached the subject in a very theoretical way; they described how to build a Free Monad and potential applications, but you don’t really understand something until you have used it in production or, at least, in a realistic environment.&lt;&#x2F;p&gt;
&lt;p&gt;This is my first &lt;em&gt;real(ish)&lt;&#x2F;em&gt; experience using Free for something more than a proof of concept, and as such I may have missed something obvious. If you believe so, please contact me via twitter (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;pvillega&quot;&gt;@pvillega&lt;&#x2F;a&gt;) as I’m very keen on fixing gaps in my knowledge :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-implementation&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#the-implementation&quot; aria-label=&quot;Anchor link for: the-implementation&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
The Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;Releasing your code to the public is scary, isn’t it? Oh, well, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;stockfighter&quot;&gt;here you have it&lt;&#x2F;a&gt;. The code took longer than I wanted, as during its conception I realised several misconceptions I had regarding Free Monads and their implementation. I also experimented a bit with unrelated stuff which delayed this post &lt;em&gt;slightly&lt;&#x2F;em&gt; more. Ah, shiny baubles…&lt;&#x2F;p&gt;
&lt;p&gt;You may want to start by opening &lt;code&gt;Introduction.scala&lt;&#x2F;code&gt; and reading it top to bottom, as it exposes the API and usage cases.&lt;&#x2F;p&gt;
&lt;p&gt;If we ignore all the stuff not purely related to Free Monads, there are three files to focus on: &lt;code&gt;LogApi.scala&lt;&#x2F;code&gt;, &lt;code&gt;TradeApi.scala&lt;&#x2F;code&gt;, and &lt;code&gt;TradingAppHelpers.scala&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-free-monads&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#the-free-monads&quot; aria-label=&quot;Anchor link for: the-free-monads&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
The Free Monads&lt;&#x2F;h3&gt;
&lt;p&gt;Files &lt;code&gt;LogApi.scala&lt;&#x2F;code&gt; and &lt;code&gt;TradeApi.scala&lt;&#x2F;code&gt; implement the Free Monads for the library. I won’t enter into the implementation details as they should be straightforward, and you can refer to my previous post on &lt;a href=&quot;&#x2F;freek-and-free-monads&quot;&gt;Freek&lt;&#x2F;a&gt; for guidance.&lt;&#x2F;p&gt;
&lt;p&gt;What I want to discuss is: why these two DSL and not more?&lt;&#x2F;p&gt;
&lt;p&gt;We can argue about the abstraction levels, but I’ve come to these two as a natural evolution of the API. My initial idea was to build everything based on Free. When I say &lt;em&gt;everything&lt;&#x2F;em&gt; I mean it: my http calls would be a Free DSL (Get, Post, etc). Logs? Free. Free all the way down (and then turtles). It even sounded easy: Freek &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ProjectSeptemberInc&#x2F;freek&#x2F;blob&#x2F;master&#x2F;src&#x2F;test&#x2F;scala&#x2F;AppSpec.scala&quot;&gt;examples&lt;&#x2F;a&gt; showcase a Log and Http DSL, so why not?&lt;&#x2F;p&gt;
&lt;p&gt;Well, it may be possible, in fact it’s my next aim (v 2.0?) to experiment more around this area. But it makes things more complex than needed.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s take an example: Http DSL. Given the way natural transformations work, and that you want a generic DSL, you’ll end up with two DSL for your Http calls: a &lt;em&gt;request&lt;&#x2F;em&gt; one and one to manage &lt;em&gt;responses&lt;&#x2F;em&gt;. This is ok, the problem comes when you want to start defining &lt;code&gt;TradeAPI&lt;&#x2F;code&gt; using these DSL.&lt;&#x2F;p&gt;
&lt;p&gt;A natural transformation converts a monad into another. Although Free is a monad, I had lots of problems trying to compile a Natural transformation from &lt;code&gt;TradeApi.DSL&lt;&#x2F;code&gt; to &lt;code&gt;Task&lt;&#x2F;code&gt; that internally used &lt;code&gt;Http.DSL&lt;&#x2F;code&gt;, as it wasn’t a one-to-one transformation, but a one-to-for-comprehension transformation. It just didn’t work.&lt;&#x2F;p&gt;
&lt;p&gt;The easy solution was to implement the calls in &lt;code&gt;TradeApi&lt;&#x2F;code&gt; as for-comprehensions that used &lt;code&gt;Http.DSL&lt;&#x2F;code&gt; to define the behaviour. So &lt;code&gt;buy&lt;&#x2F;code&gt; would call the corresponding &lt;code&gt;Http.DSL&lt;&#x2F;code&gt; helpers, and so on. Something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;	&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;body&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;buyUrl&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; toBody&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;stock&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;	&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;DecodeResponse&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;OrderStatus&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;body&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; rsp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point, though, we won’t have an interpreter for &lt;code&gt;TradeAPI&lt;&#x2F;code&gt;, only for &lt;code&gt;Http.DSL&lt;&#x2F;code&gt;. And there may be scenarios where we want to go that path. But, in this one, we may as well use our own interpreter for &lt;code&gt;TradeAPI&lt;&#x2F;code&gt; that manages the http calls and decoding inside, like a black box. We end up using a single interpreter anyway, but a slightly saner one.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;LogApi&lt;&#x2F;code&gt; survived because, despite the option of doing the logging within the interpreter, it makes sense to allow the user to document the intention of programs built using &lt;code&gt;TradeAPI&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So, in the end, we only need these two. Yes, we could go deeper and replace &lt;code&gt;TradeAPI&lt;&#x2F;code&gt; by several lower-level API, but the current form seemed simpler and more usable.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;helper-class&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#helper-class&quot; aria-label=&quot;Anchor link for: helper-class&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Helper class&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;TradingAppHelpers.scala&lt;&#x2F;code&gt; is mostly support methods and declarations: it defines the Onion we will use in our program, as well as some common methods like &lt;code&gt;run&lt;&#x2F;code&gt; to abstract calling the interpreter for our program and managing the lifecycle of our http client (to avoid leaking connections). I believe the comments in the file suffice to explain the intentions.&lt;&#x2F;p&gt;
&lt;p&gt;There are three parts of its code I want to elaborate a bit on.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;onion-type&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#onion-type&quot; aria-label=&quot;Anchor link for: onion-type&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Onion type&lt;&#x2F;h4&gt;
&lt;p&gt;Below we have the declaration for API and Onion, as usual when using Freek to work with several DSL at once.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;API&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;LogApi&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:||:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;TradeApi&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;API&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Program&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;API&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;O&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-hole z-scala&quot;&gt;?&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:&amp;amp;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:&amp;amp;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Bulb&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the Onion declaration, &lt;code&gt;O&lt;&#x2F;code&gt;, includes both &lt;code&gt;Result&lt;&#x2F;code&gt; (an alias to &lt;code&gt;Xor&lt;&#x2F;code&gt;) and &lt;code&gt;List&lt;&#x2F;code&gt;. Without adding &lt;code&gt;List&lt;&#x2F;code&gt; I could not make it compile with result types of the form &lt;code&gt;Result[List[A]]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The side effect of this is that using the Onion causes all the programs to return &lt;code&gt;Result[List[A]]&lt;&#x2F;code&gt; results. We can avoid this if we know we won’t use a call that return &lt;code&gt;Result[List[A]]&lt;&#x2F;code&gt; inside a program. In that case we may avoid the Onion and obtain just &lt;code&gt;Result[A]&lt;&#x2F;code&gt; at the end (using &lt;code&gt;.freek&lt;&#x2F;code&gt; and not &lt;code&gt;.freeko&lt;&#x2F;code&gt;), but I’ve provided no helper methods similar to &lt;code&gt;run&lt;&#x2F;code&gt; for this use case. Feel free to send a pull-request with one ;)&lt;&#x2F;p&gt;
&lt;p&gt;There’s a better discussion on the matter in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mandubian&#x2F;freek&#x2F;issues&#x2F;5&quot;&gt;this issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;task-interpreter&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#task-interpreter&quot; aria-label=&quot;Anchor link for: task-interpreter&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Task Interpreter&lt;&#x2F;h4&gt;
&lt;p&gt;Our Task interpreter, the natural transformation from the DSL to &lt;code&gt;Task&lt;&#x2F;code&gt;, is declared as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;taskInterpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;httpClient&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-scala&quot;&gt;&#x2F;*...*&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;LogApiTaskInterpreter&lt;&#x2F;span&gt; :&amp;amp;: &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;TradeApiTaskInterpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-block z-scala&quot;&gt;&#x2F;*...*&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this implementation &lt;code&gt;TradeApiTaskInterpreter&lt;&#x2F;code&gt; depends on an &lt;code&gt;httpClient&lt;&#x2F;code&gt; to be able to contact Stockfighter. Encapsulating the &lt;code&gt;httpClient&lt;&#x2F;code&gt; inside the interpreter is problematic, as we can’t control the lifecycle of the client itself. At no point during the natural transformation are you aware that this is the last step (unless you add an explicit &lt;em&gt;last step&lt;&#x2F;em&gt; command, but kind of defeats the point). Which means that closing your http connections needs to be done outside the interpreter itself.&lt;&#x2F;p&gt;
&lt;p&gt;I know it sounds obvious, and it is. But the examples I’ve seen regarding interpreters and natural transformations showcase them as static objects with no dependencies, although the interpreters are the areas where we will perform side effects, like an http request. This mislead me, initially, to try to encapsulate everything inside the interpreter itself. I’m open to suggestions on improving the code, if you believe there’s a better way to manage the client.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;run-the-onion&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#run-the-onion&quot; aria-label=&quot;Anchor link for: run-the-onion&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Run the Onion&lt;&#x2F;h4&gt;
&lt;p&gt;The code to run an interpreter on a given Onion is always the same, which means we can abstract it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;run&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;program&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;OnionT&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;API&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Cop&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;O&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;waitTime&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Duration&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;10&lt;&#x2F;span&gt; seconds&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;client&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;GigahorseHttpClientManager&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-exception z-scala&quot;&gt;try&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;interpreter&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; taskInterpreter&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;client&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;taskResult&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; program&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;value&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;interpret&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;interpreter&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Await&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;result&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;taskResult&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;runAsync&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; waitTime&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-exception z-scala&quot;&gt;finally&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      client&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;close&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see the function &lt;code&gt;run&lt;&#x2F;code&gt; instantiates its own &lt;code&gt;TradeApiTaskInterpreter&lt;&#x2F;code&gt; to manage the &lt;code&gt;httpClient&lt;&#x2F;code&gt;, as discussed in the previous section.&lt;&#x2F;p&gt;
&lt;p&gt;The relevant part of this code is the type of the parameter &lt;code&gt;program&lt;&#x2F;code&gt;: &lt;code&gt;OnionT[Free, API.Cop, O, A]&lt;&#x2F;code&gt;. It’s another obvious thing, but when I tried to generalise the signature from my existing programs the values &lt;code&gt;sbt&lt;&#x2F;code&gt; gave me didn’t compile properly due to several implicit-related errors. Freek uses quite a few of them implicits, and you can find yourself in a tangle trying to derive the implicit you need for your program. Next time, just copy this method’s signature.&lt;&#x2F;p&gt;
&lt;p&gt;Or, as I discovered a bit too late (to my chagrin) pay more attention when reading the Freek instructions. That type is declared in the Readme file. D’oh!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-case-for-freek&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#the-case-for-freek&quot; aria-label=&quot;Anchor link for: the-case-for-freek&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
The case for Freek&lt;&#x2F;h3&gt;
&lt;p&gt;I want to explicitly comment on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ProjectSeptemberInc&#x2F;freek&quot;&gt;Freek&lt;&#x2F;a&gt;, as it deserves all praise I can give it.&lt;&#x2F;p&gt;
&lt;p&gt;My experience building these monads is a vindication for the library. Honestly, if you are going to use Free Monads in your code, add it to your dependencies. Right now. I’ll wait. Done?&lt;&#x2F;p&gt;
&lt;p&gt;I tried the Cats approach I described in my old post about &lt;a href=&quot;&#x2F;understanding-free-monads&quot;&gt;Free Monad&lt;&#x2F;a&gt; to implement the API, stubborn in &lt;em&gt;keeping it simple and using few dependencies&lt;&#x2F;em&gt;. The pain was real, oh so real, when trying to work with the different answer types the DSL provides.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, it didn’t work. Without Freek, the compiler was beating me. No chances, full surrender.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, it is not perfect. For example see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mandubian&#x2F;freek&#x2F;issues&#x2F;5&quot;&gt;this issue&lt;&#x2F;a&gt; related to the return types of Onions. It’s slightly cumbersome to having to manually peel responses each time you use the Onion. But given the alternative, I found it perfectly acceptable. And, come on, it’s barely version 0.6.0 and improving fast!&lt;&#x2F;p&gt;
&lt;p&gt;If you are a Scala magician at the level of Pascal, Travis, or Miles you may not need it. Otherwise, just use it and spend your valuable time in something else.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-free-monads-for&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#what-are-free-monads-for&quot; aria-label=&quot;Anchor link for: what-are-free-monads-for&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
What are Free Monads for&lt;&#x2F;h2&gt;
&lt;p&gt;Based on the, arguably limited, experience I’ve had while building the API and running programs using it there are several things to consider when using Free.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;free-monads-are-for-api&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#free-monads-are-for-api&quot; aria-label=&quot;Anchor link for: free-monads-are-for-api&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Free Monads are for API&lt;&#x2F;h3&gt;
&lt;p&gt;Free Monads are intended to abstract your API. You define your DSLs, you build a program that uses them, and your construct interpreters to match. They are not for doing business logic, though.&lt;&#x2F;p&gt;
&lt;p&gt;What do I mean by that?&lt;&#x2F;p&gt;
&lt;p&gt;When I read about them, my naive mind thought you could buy a stack of Free on top of Free and only at the end you’d use the interpreter, creating a kind of pure universe untouched by side effects. Crazy, maybe.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s start by the fact that Free doesn’t (can’t?) implement &lt;code&gt;filter&lt;&#x2F;code&gt;. This removes the capability of using &lt;code&gt;if&lt;&#x2F;code&gt; statements inside your for-comprehension. At some point in your application you’ll need to make decisions based on results, and avoiding &lt;code&gt;filter&lt;&#x2F;code&gt; gets complicated, fast.&lt;&#x2F;p&gt;
&lt;p&gt;For example, using the API provided try to create a program that buys a stock if the quote is lower than a value, and otherwise sells but only if you have enough shares and doing so would generate a benefit. Most likely you will end up with programs that mix Free statements with non-Free statements. You may argue the API is limited, so how complex do you want it to become to cover all particular once-off cases?&lt;&#x2F;p&gt;
&lt;p&gt;So, Free is great when you define a contract to hide implementation details. Think interfaces that do IO behind the scenes, or other side-effects, or combine calls to several services in one go. But it’s doubtful you’ll build your application (unless trivial) with &lt;em&gt;only&lt;&#x2F;em&gt; Free.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ddd-ready&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#ddd-ready&quot; aria-label=&quot;Anchor link for: ddd-ready&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
DDD ready&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain-driven_design&quot;&gt;DDD&lt;&#x2F;a&gt; is popular and you most likely use it. Bounded contexts and ubiquitous languages are a great fit for Free.&lt;&#x2F;p&gt;
&lt;p&gt;Your context is defined by a contract, an API that other components will use. Your logic will often use more than one context to achieve something, for example communicating with Authentication, User data, and Image storage to get the information it needs. Free are perfectly suited for this task.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;interpreters-are-your-io-monad&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#interpreters-are-your-io-monad&quot; aria-label=&quot;Anchor link for: interpreters-are-your-io-monad&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Interpreters are your IO Monad&lt;&#x2F;h3&gt;
&lt;p&gt;I hear somebody screaming due to this statement. Apologies! But, in a sense, your interpreters can be considered a black box that will have side effects inside, which you don’t care much about.&lt;&#x2F;p&gt;
&lt;p&gt;Your Free programs define steps to be done against a certain API, but nothing else. They are pure, no side effects, nothing, just a list of steps. Only when interpreted is when they really do something useful.&lt;&#x2F;p&gt;
&lt;p&gt;This means all the side effects happen in your interpreter. And that is good. We want to isolate side-effects in our codebases, but when trying to do so we may end up with some cumbersome stuff:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is your return type: Int.
This is your return type on microservices: IO (Logger (Either HttpError Int))&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Credit to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;krisajenkins&#x2F;status&#x2F;762901550696194048&quot;&gt;Kris Jenkins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Jokes aside, we want to push side effects to the boundaries, which means we get horrible return types piling Task on top of Writer on top of Xor on top of any other monad we found. Within the interpreter we don’t need that. We know things will happen there, we can be ok with logging and running an IO fest within that black box. Because it’s isolated, and won’t leak, and we run it at the end, anyway.&lt;&#x2F;p&gt;
&lt;p&gt;And we get a cleaner return type as a consequence.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;interpreters-should-be-your-test-target&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#interpreters-should-be-your-test-target&quot; aria-label=&quot;Anchor link for: interpreters-should-be-your-test-target&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Interpreters should be your test target&lt;&#x2F;h3&gt;
&lt;p&gt;In the codebase you’ll see a blunder I realised too late. Initially I tried to test programs by using an accumulating interpreter that stored the calls to the api in a State monad, returning some default values. This allowed me to compare expected output of the program vs the real output.&lt;&#x2F;p&gt;
&lt;p&gt;The accumulating interpreter can be good to see what happens with a program (print all the calls, to the bottom of the stack), but it’s not a great fit for testing due to hardcoded values. I experimented with another interpreter that allowed me to mock expected responses, so I could test most complex values, but this wasn’t ideal nor satisfactory.&lt;&#x2F;p&gt;
&lt;p&gt;Then I realised I was approaching it wrong.&lt;&#x2F;p&gt;
&lt;p&gt;Without Free, what I’d usually do is test a method for expected outputs given certain input. And that’s what I tried to do here. But with Free your method is nothing. I mean, it’s a description, so the test will be fully tangled with the program you defined.&lt;&#x2F;p&gt;
&lt;p&gt;What you want to test is the interpreter, or its core. You want to make sure the output for a given DSL call is what you expect. In our scenario, &lt;code&gt;TradeApiTaskInterpreter&lt;&#x2F;code&gt; uses a client to to http calls. The return types are enforced during compilation of the DSL (we know a call to &lt;code&gt;buy&lt;&#x2F;code&gt; will return an object of a certain type), but we may want to guarantee we are passing values like &lt;code&gt;price&lt;&#x2F;code&gt; or &lt;code&gt;quantity&lt;&#x2F;code&gt; correctly, or that if the http client returns an error we are capturing it and returning the proper &lt;code&gt;Left&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is where we want to focus our test efforts, which incidentally reduces the surface of code to be tested a lot, arguably giving us much robust code. Of course, there will be methods that mix Free monads with logical statements (if x call this monad, otherwise the other) which you will want to test as usual. But for methods that only use Free, focus on testing the interpreters.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;beware-the-layers&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#beware-the-layers&quot; aria-label=&quot;Anchor link for: beware-the-layers&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Beware the layers&lt;&#x2F;h3&gt;
&lt;p&gt;I talked about it when discussing why I implemented the two DSL I chose, but it’s worth repeating.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that your interpreter (as a natural transformation) has limitations. Start with the top level API and consider if you need a lower level DSL for your purposes. It may be, as in our case, that a single layer is good enough. It may as well be that you have a case that justifies building your Free on a lower layer.&lt;&#x2F;p&gt;
&lt;p&gt;In any case, stacking Free is not trivial and may cause pain. Thread carefully.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;they-are-not-easy&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#they-are-not-easy&quot; aria-label=&quot;Anchor link for: they-are-not-easy&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
They are not easy&lt;&#x2F;h3&gt;
&lt;p&gt;People talking about Free mention they are not easy and that new teams (or teams without much experience in functional programming) should not adopt them directly. I realised I didn’t fully understand the warning when I started using them for this library. They seem easy, they are misleadingly so. But you will find yourself scratching your head many, many times, due to subtleties that arise when using them.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t underestimate them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aims-achieved&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#aims-achieved&quot; aria-label=&quot;Anchor link for: aims-achieved&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Aims achieved?&lt;&#x2F;h2&gt;
&lt;p&gt;I have to make a confession: I’ve not completed StockFighter. I got sidetracked while experimenting with the API  using their test server, so I’ve only solved the first (and trivial) level. Someday I’ll finish it :) I failed that aim.&lt;&#x2F;p&gt;
&lt;p&gt;But it’s been an enlightening experiment, which made me realise the limitations and strengths of Free. That said, it’s a first step on the path and most likely in a few months I’ll revisit this and realise I was wrong. But, hey, learning. Or something ;)&lt;&#x2F;p&gt;
&lt;p&gt;So, yes, Free Monad are useful, but they are no silver bullet. What a surprise, isn’t it? Like everything else in IT.&lt;&#x2F;p&gt;
&lt;p&gt;That’s all for now, I hope this was informative and useful. As always, feedback via Twitter&#x2F;Email is more than welcome. Cheers!&lt;&#x2F;p&gt;
</content>
        <summary type="html">StockFighter is a game by Patrick McKenzie (Hi Patrick!) and others that makes you compete in a virtual Stock Exchange to accomplish certain objectives. They use it as a recruitment tool (kind of, read their website) but it’s a very entertaining game, even if you are not looking for a new job.
…</summary>
        </entry><entry xml:lang="en">
        <title>Free Monads using FreeK</title>
        <published>2016-05-30T00:00:00+00:00</published>
        <updated>2016-05-30T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/freek-and-free-monads/" type="text/html"/>
        <id>https://perevillega.com/posts/freek-and-free-monads/</id>
        
            <content type="html">&lt;p&gt;My previous post on &lt;a href=&quot;&#x2F;understanding-free-monads&quot;&gt;Free Monad&lt;&#x2F;a&gt; implemented a few DSL using Free Monads. The same day I published it I discovered &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ProjectSeptemberInc&#x2F;freek&quot;&gt;FreeK&lt;&#x2F;a&gt; by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;mandubian&quot;&gt;Pascal Voitot&lt;&#x2F;a&gt;. How does FreeK help you when building a Free Monad?&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I’ve updated my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;free-monad-sample&quot;&gt;code&lt;&#x2F;a&gt; on Free Monad with a sample using FreeK. The sample contains my previous implementation which only used &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;tut&#x2F;freemonad.html&quot;&gt;Cats&lt;&#x2F;a&gt; Free implementation, so you can compare both side by side.&lt;&#x2F;p&gt;
&lt;p&gt;I can say upfront that FreeK removed a bit of &lt;em&gt;boilerplate&lt;&#x2F;em&gt; and made the implementation slightly cleaner. I feel the main benefit of FreeK is not so much the Free Monad tooling (which, don’t misunderstand me, is good!) but it’s integration with monad transformers, as well as the way it manages what Pascal calls &lt;em&gt;monadic onions of result types&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementing-free-with-freek&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#implementing-free-with-freek&quot; aria-label=&quot;Anchor link for: implementing-free-with-freek&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Implementing Free with FreeK&lt;&#x2F;h2&gt;
&lt;p&gt;The first step is, as expected, to define our languages. I assume (from now onwards) that you have read &lt;a href=&quot;&#x2F;understanding-free-monads&quot;&gt;my previous post&lt;&#x2F;a&gt; so I won’t discuss details already tackled in there.&lt;&#x2F;p&gt;
&lt;p&gt;With FreeK we define our language like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Orders&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; DSL&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; ListStocks&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Buy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Sell&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which is no different as how we were doing it before; a trait with case classes. The convention of calling the trait &lt;code&gt;DSL&lt;&#x2F;code&gt; and embedding it in the object is one I’ll use from now on, but it’s not exclusive of &lt;em&gt;FreeK&lt;&#x2F;em&gt;, can be used without it.&lt;&#x2F;p&gt;
&lt;p&gt;An interpreter is defined as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; OrderInterpreter&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-parens z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parens z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; Orders&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; a &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;ListStocks&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;      println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Getting list of stocks: FB, TWTR&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;      &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;FB&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;TWTR&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Buying &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; of &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ok&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Selling &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; of &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ok&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which, again, is an alternative to the way we were defining interpreters before. Not &lt;em&gt;FreeK&lt;&#x2F;em&gt; exclusive, but nicer :)&lt;&#x2F;p&gt;
&lt;p&gt;So let’s define the rest of our languages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Log dsl&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Log&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; DSL&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Info&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Error&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Defining the interpreter for Log&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; LogInterpreter&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-parens z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parens z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; Log&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; a &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;      println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[Info] - &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[Error] - &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Audit dsl&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Audit&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; DSL&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; UserAction&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;UserId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; SystemAction&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;job&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;JobId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Audit interpreter&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; AuditInterpreter&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-parens z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parens z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; Audit&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; a &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UserAction&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;      println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[USER Action] - user &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; called &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; with values &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;SystemAction&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;job&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[SYSTEM Action] - &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;job&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; called &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; with values &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Messaging dsl&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Messaging&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; DSL&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Publish&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ChannelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;source&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;SourceId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;messageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;message&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Subscribe&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ChannelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;filterBy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Condition&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Messaging interpreter&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; MessagingInterpreter&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-parens z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parens z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; Messaging&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; a &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Publish&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;source&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;messageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;message&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;      println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Publish [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;] From: [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;source&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;] Id: [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;messageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;] Payload: [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;message&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;]&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;      &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ok&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Subscribe&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;filterBy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;payload&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Event fired&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Received message from [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;] (filter: [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;filterBy&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;]): [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;]&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;payload&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, languages defined. Next, let’s define our &lt;em&gt;Free&lt;&#x2F;em&gt; type (or &lt;em&gt;Coproduct&lt;&#x2F;em&gt; for multiple types)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-free-coproduct-type&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#the-free-coproduct-type&quot; aria-label=&quot;Anchor link for: the-free-coproduct-type&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
The Free&#x2F;Coproduct type&lt;&#x2F;h2&gt;
&lt;p&gt;In here is where &lt;em&gt;FreeK&lt;&#x2F;em&gt; provides the first big improvement. &lt;em&gt;FreeK&lt;&#x2F;em&gt; contains a specialised implementation of Shapeless &lt;code&gt;Coproduct&lt;&#x2F;code&gt; for higher-kinded structures. The result is that we can define a type that includes several languages in one go, instead of having to create the chain of &lt;code&gt;Coproduct&lt;&#x2F;code&gt; we built in the previous post.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;em&gt;FreeK&lt;&#x2F;em&gt; you use the same syntax for a Free that includes one or several languages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;PRGOne&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:|:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;FXNil&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Cop&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; PRG is the one we will use in our code&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:|:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:|:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;:|:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;FXNil&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Cop&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Interpreters get a similar benefit. You can leverage &lt;em&gt;FreeK&lt;&#x2F;em&gt; specific syntax to easily compose interpreters from multiple languages. The only restrictions are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the interpreters must all be transformations to the same Monad (as with any composition of Natural Transformations, nothing new here)&lt;&#x2F;li&gt;
&lt;li&gt;they must be declared in the same order the types are defined in our &lt;code&gt;PRG&lt;&#x2F;code&gt; declaration.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;interpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Interpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;LogInterpreter&lt;&#x2F;span&gt; :|: &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;AuditInterpreter&lt;&#x2F;span&gt; :|: &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;OrderInterpreter&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this we have our &lt;em&gt;free type&lt;&#x2F;em&gt; and the &lt;em&gt;interpreter&lt;&#x2F;em&gt;. That was easy! We just need the program to execute, and we are done.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-program&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#the-program&quot; aria-label=&quot;Anchor link for: the-program&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
The program&lt;&#x2F;h2&gt;
&lt;p&gt;If you have noticed, in the previous post we created some kind of support methods that lifted our case classes to a Free Monad. But this time we have not built anything similar. So, how are we going to use our case classes in a for-comprehension?&lt;&#x2F;p&gt;
&lt;p&gt;The answer is given by *FreeK and a support method appropriately called &lt;code&gt;freek[A]&lt;&#x2F;code&gt;. Let’s see an example of its usage by replicating the logic in our original program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;program&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;I&amp;#39;m going to trade smartly&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UserAction&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ID102&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;buy&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;APPL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;100&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;APPL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;200&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;I&amp;#39;m going to trade even more smartly&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UserAction&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ID102&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;buy&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;MSFT&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;100&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;MSFT&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UserAction&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ID102&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;sell&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;100&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;300&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;SystemAction&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;BACKOFFICE&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;tradesCheck&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ID102&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;lastTrades&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;      &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Wait, what?!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; rsp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see we are using the case classes we defined with our languages, directly. The magic happens within the &lt;code&gt;freek[PRG]&lt;&#x2F;code&gt; call, which lifts our case class to a Free Monad of the &lt;code&gt;Coproduct&lt;&#x2F;code&gt; defined by &lt;code&gt;PRG&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We have replaced support methods using &lt;code&gt;Free.liftF&lt;&#x2F;code&gt; or &lt;code&gt;Inject&lt;&#x2F;code&gt; with this call, which some people may argue is not a huge benefit, code wise. Personally, I believe it’s a big win as we have less clutter around our languages, where now we just see case classes and interpreters, and all the extra syntax is located within the program itself. Also, adding new languages is much simpler. What’s not to like?&lt;&#x2F;p&gt;
&lt;p&gt;We can execute this program to verify it works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Use interpreter on `program`: &lt;span class=&quot;z-punctuation z-definition z-expression z-scala&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala z-embedded&quot;&gt;program&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;interpreter&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;nat&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-expression z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh, by the way, remember that program that was returning a &lt;code&gt;List&lt;&#x2F;code&gt; inside the monad, and thus required the use of traverse? Yes, we can also implement it using &lt;em&gt;FreeK&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;programWithList&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;st&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;ListStocks&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; st&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;traverseU&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;freek&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; rsp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We still need the &lt;code&gt;traverseU&lt;&#x2F;code&gt; trick, but it works the same, as &lt;code&gt;freek[PRG]&lt;&#x2F;code&gt; returns a monad an that fits the signature of &lt;code&gt;traverseU&lt;&#x2F;code&gt;. So we can port our programs, we are not losing any core functionality by using &lt;em&gt;FreeK&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;orders-via-messages&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#orders-via-messages&quot; aria-label=&quot;Anchor link for: orders-via-messages&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Orders via Messages&lt;&#x2F;h2&gt;
&lt;p&gt;The last use case explored in the previous post was to define &lt;code&gt;Orders&lt;&#x2F;code&gt; as a set of &lt;code&gt;Messaging&lt;&#x2F;code&gt; operations, by chaining natural transformations from &lt;code&gt;Orders&lt;&#x2F;code&gt;, to &lt;code&gt;Messaging&lt;&#x2F;code&gt;, and to &lt;code&gt;Id&lt;&#x2F;code&gt;. Can we do this with &lt;em&gt;FreeK&lt;&#x2F;em&gt;? Let’s start by defining a new interpreter from &lt;code&gt;Orders&lt;&#x2F;code&gt; to &lt;code&gt;Messaging&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; OrdersToMessagesInterpreter&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-parens z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parens z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; Orders&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; Messaging&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;DSL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; a &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;ListStocks&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;      &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Publish&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Orders&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;randomUUID&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;toString&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Get Stocks List&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;      &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Subscribe&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;*&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Publish&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Orders&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;randomUUID&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;toString&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Buy &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Publish&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Orders&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;randomUUID&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;toString&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Sell &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next step, let’s integrate this interpreter into the interpreter chain we defined before. To do this, we need to replace &lt;code&gt;OrderInterpreter&lt;&#x2F;code&gt; by a composition of the new interpreter (from &lt;code&gt;Orders&lt;&#x2F;code&gt; to &lt;code&gt;Messaging&lt;&#x2F;code&gt;) and the existing interpreter from &lt;code&gt;Messaging&lt;&#x2F;code&gt; to &lt;code&gt;Id&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;interpreterWithMessaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Interpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;PRG&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;LogInterpreter&lt;&#x2F;span&gt; :|: &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;AuditInterpreter&lt;&#x2F;span&gt; :|: &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;MessagingInterpreter&lt;&#x2F;span&gt; compose &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;OrdersToMessagesInterpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then we run our program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Use interpreter with Messaging on `program`: &lt;span class=&quot;z-punctuation z-definition z-expression z-scala&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala z-embedded&quot;&gt;program&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;interpreterWithMessaging&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;nat&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-expression z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It works, so it seems we can do what we expected! Can’t we?&lt;&#x2F;p&gt;
&lt;p&gt;Well, the astute reader (i.e.: one that has read up to this point… congratulations!) will notice that in our previous implementation we were using a for-comprehension in &lt;code&gt;OrdersToMessagesInterpreter&lt;&#x2F;code&gt; for the case of &lt;code&gt;ListStocks&lt;&#x2F;code&gt;. As we are working with case classes directly, not with monads, we can’t build the for-comprehension.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve tried to work around it by creating some additional types to lift the classes via &lt;code&gt;freek[A]&lt;&#x2F;code&gt;, so we can have the same code as before, but it’s become a bit verbose which means that, most likely, I’m doing something wrong :) Just be aware this use case may require a bit more effort than the others.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-summary&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#in-summary&quot; aria-label=&quot;Anchor link for: in-summary&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
In summary&lt;&#x2F;h2&gt;
&lt;p&gt;I like &lt;em&gt;FreeK&lt;&#x2F;em&gt;, as it simplifies working with Free Monads. There may be a couple of scenarios which need either more work or a better understanding of the library, but in general it seems like a robust solutions. Let’s not forget it also provides utilities to mix monad transformers with our Free monads, which will solve several pains related to monad stacks.&lt;&#x2F;p&gt;
&lt;p&gt;So if you want to use Free monads in our code, please give &lt;em&gt;Freek&lt;&#x2F;em&gt; a go :)&lt;&#x2F;p&gt;
&lt;p&gt;That’s all for now, I hope this was informative and useful. As always, feedback via Twitter&#x2F;Email is more than welcome. Cheers!&lt;&#x2F;p&gt;
</content>
        <summary type="html">My previous post on Free Monad implemented a few DSL using Free Monads. The same day I published it I discovered FreeK by Pascal Voitot. How does FreeK help you when building a Free Monad?
…</summary>
        </entry><entry xml:lang="en">
        <title>On Free Monads</title>
        <published>2016-05-28T00:00:00+00:00</published>
        <updated>2016-05-28T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/understanding-free-monads/" type="text/html"/>
        <id>https://perevillega.com/posts/understanding-free-monads/</id>
        
            <content type="html">&lt;p&gt;The concept of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;datatypes&#x2F;freemonad.html&quot;&gt;Free Monad&lt;&#x2F;a&gt; is becoming popular, or at least I’ve seen plenty of mentions about it in the Scala Functional Programming community as of late. Why is it relevant?&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A couple of warnings before I start. Judging by the code I wrote, this will be a &lt;em&gt;very long&lt;&#x2F;em&gt; post. You can look at the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;free-monad-sample&quot;&gt;code&lt;&#x2F;a&gt; and come back to read this post later. Also, I’m going to take a &lt;em&gt;practical&lt;&#x2F;em&gt; approach to Free Monad. I’ll provide a list of relevant links at the end you can use to learn more about Free Monad and its nuisances, including Cat’s explanation on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;datatypes&#x2F;freemonad.html#what-is-free-in-theory&quot;&gt;the theory behind Free&lt;&#x2F;a&gt;. But no theory here, sorry :)&lt;&#x2F;p&gt;
&lt;p&gt;Let’s do this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-should-i-care-about-free-monad&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#why-should-i-care-about-free-monad&quot; aria-label=&quot;Anchor link for: why-should-i-care-about-free-monad&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Why should I care about Free Monad?&lt;&#x2F;h2&gt;
&lt;p&gt;Anything related to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;typeclasses&#x2F;monad.html&quot;&gt;Monads&lt;&#x2F;a&gt; seems scary and complex for the uninitiated. Why should I spend time learning that? What’s the benefit?&lt;&#x2F;p&gt;
&lt;p&gt;There are descriptions of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;datatypes&#x2F;freemonad.html&quot;&gt;Free Monad&lt;&#x2F;a&gt; that give a good overview on why to use it. In my humble opinion, the main benefit that Free provides is separation between the program definition and its execution.&lt;&#x2F;p&gt;
&lt;p&gt;You start by building an embedded DSL, which can be understood by the business. Using that language, you define a program as a series of actions that cover a business case, without any implementation details associated.&lt;&#x2F;p&gt;
&lt;p&gt;At this point you can test the business-defined logic in isolation (with fast unit tests, no need of mocks). You can &lt;em&gt;talk the same language&lt;&#x2F;em&gt; as the business. And only at the end, when needed, you provide a &lt;em&gt;real-world&lt;&#x2F;em&gt; implementation that interacts with 3rd party services and such.&lt;&#x2F;p&gt;
&lt;p&gt;This has the potential to provide more robust code, that can be tested easily, and which is a better fit to the business requirements. Also, replacing implementations (say, you change your sms provider) has minimal impact in the codebase as you only modify the interpreter, nothing else. Wether you do &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain-driven_design&quot;&gt;DDD&lt;&#x2F;a&gt; or not, all this must sound &lt;em&gt;very appealing&lt;&#x2F;em&gt; ;)&lt;&#x2F;p&gt;
&lt;p&gt;In addition, implementations of Free Monad (both in Cats and Scalaz) provide other benefits, for example the use of Trampolining for stack-safe recursion.&lt;&#x2F;p&gt;
&lt;p&gt;A bit like with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;typeclasses&#x2F;monad.html&quot;&gt;Monad&lt;&#x2F;a&gt;, a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;datatypes&#x2F;freemonad.html&quot;&gt;Free Monad&lt;&#x2F;a&gt; is a relatively simple concept behind a scary name. Easier than it seems, and very useful. Either that, or I’ve understood nothing and need to go back to the study desk ;)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-business-case&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#a-business-case&quot; aria-label=&quot;Anchor link for: a-business-case&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
A business case&lt;&#x2F;h2&gt;
&lt;p&gt;I’ll start with a very simplistic business case. We want to implement an application to buy and sell stocks. Our standard approach may generate code similar to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Orders&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;	&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;	&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;Response&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;	&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;???&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;	&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;???&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But we have heard about this new thing called &lt;code&gt;Free Monad&lt;&#x2F;code&gt; and we want to use it. We start by creating a DSL, a business language, that describes our actions. For example, we convert&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;into&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Buy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can see there is an equivalence in meaning between the two forms: case class parameters and method parameters, return value and type parameter in our case class (specifically in &lt;code&gt;Orders[Response]&lt;&#x2F;code&gt;). We are converting our methods into a language, but one that has no implementation associated.&lt;&#x2F;p&gt;
&lt;p&gt;If we do this with both methods, we get:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Orders&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Buy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Sell&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Please take a moment to see and understand the parallelisms between the above implementation, using case classes, and our original methods. Note that the parent trait &lt;code&gt;Orders&lt;&#x2F;code&gt; is similar to a &lt;code&gt;Functor&lt;&#x2F;code&gt; (a structure with a hole); this is a requirement of &lt;code&gt;Free&lt;&#x2F;code&gt;, all the languages you define &lt;em&gt;must&lt;&#x2F;em&gt; follow a similar structure.&lt;&#x2F;p&gt;
&lt;p&gt;So, what do we have at this point? We have a language that defines buying or selling a stock. But it has no logic associated, and creating an instance does nothing (besides instantiating the case class). Furthermore, we can’t try to compile something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;	&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;r&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;FB&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; r
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;as it won’t work. We need to turn this into a Monad, somehow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lifting-to-free&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#lifting-to-free&quot; aria-label=&quot;Anchor link for: lifting-to-free&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Lifting to Free&lt;&#x2F;h2&gt;
&lt;p&gt;To be able to use the language in our programs, we want to convert it into something we can run. For example, a Monad. That’s the task of a Free Monad, and Cats provides a very easy way to do that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;free&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;Free&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;OrdersF&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have defined a new type, a &lt;code&gt;Free&lt;&#x2F;code&gt; Monad on &lt;code&gt;Orders&lt;&#x2F;code&gt; and a parameter &lt;code&gt;A&lt;&#x2F;code&gt;. But that’s not enough, we need to map our case classes to instances of &lt;code&gt;Free&lt;&#x2F;code&gt;. Thankfully &lt;code&gt;Free&lt;&#x2F;code&gt; itself makes this step easy:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;free&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;Free&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;OrdersF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; liftF&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;stock&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; amount&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;OrdersF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; liftF&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;stock&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; amount&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that the return types of the methods, &lt;code&gt;OrdersF[Response]&lt;&#x2F;code&gt;, match the Free Monad (as defined above). Also, the type parameter returned, &lt;code&gt;Response&lt;&#x2F;code&gt;, matches the parameter in the &lt;code&gt;extends&lt;&#x2F;code&gt; portion of our case class definition, which we mapped to work akin to &lt;em&gt;return type&lt;&#x2F;em&gt; when converting from methods to case classes.&lt;&#x2F;p&gt;
&lt;p&gt;Now we can use these support methods, &lt;code&gt;buy&lt;&#x2F;code&gt; and &lt;code&gt;sell&lt;&#x2F;code&gt;, to obtain our monads. And it works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;flatMapThat&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; buy&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;APPL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;flatMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-arrow z-lambda z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; sell&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code above builds and returns a &lt;code&gt;Free&lt;&#x2F;code&gt; structure. This means that we can use the monads to define some business logic. For example, we can define a smart algorithm to buy and sell shares:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;smartTrade&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;OrdersF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; buy&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;APPL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;50&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; buy&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;MSFT&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; sell&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;200&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; rsp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are using a for-comprehension to chain a series of actions. &lt;code&gt;buy&lt;&#x2F;code&gt; and &lt;code&gt;sell&lt;&#x2F;code&gt; are used to obtain the monads that define the steps of the algorithm. As you can see, the return type is &lt;code&gt;OrdersF[Response]&lt;&#x2F;code&gt; as expected by the logic, which yields the result of calling &lt;code&gt;sell&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;At this point we have built a language for our business case, along algorithms that use that language. But this code still does nothing else than defining the steps, we have no way to obtain a result from it. We need a way to execute, or interpret, our language.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-first-interpreter&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#our-first-interpreter&quot; aria-label=&quot;Anchor link for: our-first-interpreter&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Our first interpreter&lt;&#x2F;h2&gt;
&lt;p&gt;An interpreter is something that will read our program and do something with it. Technically, an interpreter is a &lt;code&gt;natural transformation&lt;&#x2F;code&gt;, but as I said at the start I don’t want to focus on the theory right now. The key thing to know is that an interpreter requires a monad as the end-part of the transformation. This means you can use an interpreter to obtain &lt;code&gt;Option&lt;&#x2F;code&gt;, &lt;code&gt;Xor&lt;&#x2F;code&gt;, or some other monad, but not to obtain anything that is not a monad.&lt;&#x2F;p&gt;
&lt;p&gt;As usual an example is better than a thousand words, so let’s use the simplest monad, &lt;code&gt;Id&lt;&#x2F;code&gt;, to build an interpreter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-import z-selector z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;Id&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; ~&amp;gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;orderPrinter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; fa &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;        &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;          println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Buying &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; of &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;          &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ok&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Selling &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; of &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ok&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This squiggly sign &lt;code&gt;~&amp;gt;&lt;&#x2F;code&gt; is the syntax sugar for &lt;code&gt;natural transformation&lt;&#x2F;code&gt;. Note that in the interpreter we do a pattern match over each member of our language. As &lt;code&gt;Buy&lt;&#x2F;code&gt; is of type &lt;code&gt;Order[Response]&lt;&#x2F;code&gt; (equivalent to &lt;code&gt;Order[String]&lt;&#x2F;code&gt; in this scenario), the method signature forces us to return a result of &lt;code&gt;Id[String]&lt;&#x2F;code&gt;. The same for &lt;code&gt;Sell&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, we are also executing some &lt;code&gt;println&lt;&#x2F;code&gt; statements before returning the result. The only restriction given by the signature is the return type, we can have side effects in our code (as we do in this case). Obviously this is not advisable, but it can be useful when we create interpreters for testing purposes.&lt;&#x2F;p&gt;
&lt;p&gt;We have our interpreter, which means that we have all the pieces we need to execute the program. We can do this via the &lt;code&gt;foldMap&lt;&#x2F;code&gt; operation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt; smartTrade&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;orderPrinter&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we will see the result of the &lt;code&gt;println&lt;&#x2F;code&gt; operations in our terminal:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Buying 50 of APPL
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Buying 10 of MSFT
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Selling 200 of GOOG
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s working! We have built our first Free Monad, and it works. Take your time to understand what we have done, and remember the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;free-monad-sample&quot;&gt;code&lt;&#x2F;a&gt; is available to download.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xor-interpreters&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#xor-interpreters&quot; aria-label=&quot;Anchor link for: xor-interpreters&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Xor Interpreters&lt;&#x2F;h2&gt;
&lt;p&gt;We have built our first interpreter, but let’s be honest: &lt;code&gt;Id&lt;&#x2F;code&gt; is not so useful, and we want to avoid side-effects in our code. If we aim to do something akin to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;fsharpforfunandprofit.com&#x2F;posts&#x2F;recipe-part2&#x2F;&quot;&gt;railway oriented programming&lt;&#x2F;a&gt; we may want to use &lt;code&gt;Xor&lt;&#x2F;code&gt; instead.&lt;&#x2F;p&gt;
&lt;p&gt;But this reveals a slight issue: the natural transformation expects a monad with shape &lt;code&gt;G[_]&lt;&#x2F;code&gt;, and &lt;code&gt;Xor&lt;&#x2F;code&gt; is &lt;code&gt;Xor[+A, +B]&lt;&#x2F;code&gt;. There is a mismatch in the number of &lt;em&gt;holes&lt;&#x2F;em&gt;. Thankfully we can fix that with a small trick, by fixing the type of the left side of &lt;code&gt;Xor&lt;&#x2F;code&gt;, like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;ErrorOr&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Xor&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This creates a new monadic type with a single type parameter, which fits the requirements of natural transformation. You may want to use an ADT instead of &lt;code&gt;String&lt;&#x2F;code&gt; on the left side, to make it more flexible. In any case, we can now construct a new interpreter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;syntax&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;xor&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;data&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;Xor&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;xorInterpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ErrorOr&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ErrorOr&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;   &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ErrorOr&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;     fa &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;       &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;         &lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; - &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;right
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;       &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;         &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Why are you selling that?&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;left
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;     &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt; &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and if we execute it&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt; smartTrade&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;xorInterpreter&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we will see that the result is a left:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Left(Why are you selling that?)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which brings us to a very important point: you are using your interpreter in a for-comprehension (usually). If you return a monadic value that would usually shortcut the process, like &lt;code&gt;Xor.Left&lt;&#x2F;code&gt; or &lt;code&gt;Nil&lt;&#x2F;code&gt; or &lt;code&gt;None&lt;&#x2F;code&gt;, the remainder of the program won’t we executed.
This may be what you want, but be aware of this behaviour. For a relevant example, if we had a case class extending &lt;code&gt;Orders[Unit]&lt;&#x2F;code&gt; and a natural transformation to &lt;code&gt;Option&lt;&#x2F;code&gt;, we may want to return &lt;code&gt;Some(())&lt;&#x2F;code&gt; instead of &lt;code&gt;None&lt;&#x2F;code&gt; to avoid this behaviour.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, so we have built another interpreter, and it works. But our language is still very simple, let’s make it a bit more useful.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extending-the-language&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#extending-the-language&quot; aria-label=&quot;Anchor link for: extending-the-language&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Extending the language&lt;&#x2F;h2&gt;
&lt;p&gt;We want smart algorithms, and hardcoding the stocks to buy won’t help. We are aiming to build programs similar to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt; &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;smartTradeWithList&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;st&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; listStocks&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; buy&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;st&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; sell&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; rsp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So we can start by defining a new case class and lifting it to a Free Monad instance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; ListStocks&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;listStocks&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;OrdersF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  liftF&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;ListStocks&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you execute the program above (&lt;code&gt;smartTradeWithList&lt;&#x2F;code&gt;) you will see it doesn’t compile. The reason is that &lt;code&gt;buy&lt;&#x2F;code&gt; expects a single &lt;code&gt;Symbol&lt;&#x2F;code&gt;, but &lt;code&gt;st&lt;&#x2F;code&gt; is &lt;code&gt;List[Symbol]&lt;&#x2F;code&gt;. Ah, but of course! We are flatmapping over &lt;code&gt;OrdersF[A]&lt;&#x2F;code&gt; and, as expected, the left side of the for-comprehension binds to the &lt;code&gt;A&lt;&#x2F;code&gt; value. In our case, as &lt;code&gt;listStocks&lt;&#x2F;code&gt; returns &lt;code&gt;OrdersF[List[Symbol]]&lt;&#x2F;code&gt; then &lt;code&gt;st&lt;&#x2F;code&gt; will be &lt;code&gt;List[Symbol]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So what now? If we couldn’t work around this restriction, the utility of Free Monads would be very limited, as this is a common use case. Luckily, the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eed3si9n.com&#x2F;herding-cats&#x2F;Traverse.html&quot;&gt;Traverse&lt;&#x2F;a&gt; typeclass solves exactly this kind of issue. We can rewrite our program as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;std&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;list&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;syntax&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;traverse&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;smartTradeWithList&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;st&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; listStocks&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; st&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;traverseU&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;buy&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; sell&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; rsp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and, with slightly more verbose code, it will compile. We could always hide the extra verbosity behind a helper method, if we want. We must also update our &lt;code&gt;orderPrinter&lt;&#x2F;code&gt; to tackle the new &lt;code&gt;ListStocks&lt;&#x2F;code&gt; case:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;orderPrinter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;	  fa &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;        &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;ListStocks&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;          println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Getting list of stocks: FB, TWTR&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;          &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;FB&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;TWTR&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Buying &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; of &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ok&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Selling &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; of &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ok&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now we can execute the new program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;smartTradeWithList&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;orderPrinter&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to see the expected output:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Getting list of stocks: FB, TWTR
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Buying 100 of FB
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Buying 100 of TWTR
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Selling 100 of GOOG
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The language works. We can now build our smart programs and release into production to, hopefully, earn us a lot of money. Well, almost. The programs work, but if someone makes a mistake, how will we know? We might want to add some logging, but we don’t want to use side effects. How to do it?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-logs&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#adding-logs&quot; aria-label=&quot;Anchor link for: adding-logs&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Adding Logs&lt;&#x2F;h2&gt;
&lt;p&gt;Logging is a language in itself. We want to embed log messages in the application, but how to manage them is another matter: we may want to ignore them on testing, to send them to a log file, or even to several destination. As such, using a Free Monad for logs makes sense. So let’s define the language and create the associated Free Monad:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Log&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Info&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Error&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;LogF&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;info&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LogF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  liftF&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;msg&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;error&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LogF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  liftF&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;msg&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;logPrinter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;	  fa &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;        &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;		  println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[Info] - &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;		  println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[Error] - &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have seen this before, nothing new here. We can now log &lt;code&gt;info&lt;&#x2F;code&gt; and &lt;code&gt;error&lt;&#x2F;code&gt; messages and we have an interpreter to &lt;code&gt;Id&lt;&#x2F;code&gt; that will send some output to the terminal. Let’s add some logging to our program, then:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;smartTradeWithLogs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; info&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;I&amp;#39;m going to trade smartly&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; buy&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;APPL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; info&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;I&amp;#39;m going to trade even more smartly&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; buy&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;MSFT&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; sell&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; error&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Wait, what?!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; rsp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and, no, this doesn’t compile. The reason is clear once you look at the signature of &lt;code&gt;flatMap&lt;&#x2F;code&gt;, &lt;code&gt;flatMap[A,B](a: F[A])(f: A =&amp;gt; F[B]): F[B]&lt;&#x2F;code&gt;. The initial and final monad must be the same when using &lt;code&gt;flatMap&lt;&#x2F;code&gt;, but in here we are mixing &lt;code&gt;OrdersF&lt;&#x2F;code&gt; and &lt;code&gt;LogF&lt;&#x2F;code&gt; monads in the same for-comprehension. So it won’t compile.&lt;&#x2F;p&gt;
&lt;p&gt;The solution, in Cats, is to use an alternative way to lift our case classes to Monads. Instead of using the &lt;code&gt;liftF&lt;&#x2F;code&gt; method from &lt;code&gt;Free&lt;&#x2F;code&gt; we will use a slightly more complex structure that will help us later to mix both Monads. Let’s start with an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;free&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-import z-selector z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;Free&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; Inject&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; OrderI&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;I&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Inject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;buyI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;inject&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;stock&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; amount&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;sellI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;inject&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;stock&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; amount&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; We need this implicit&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;orderI&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;I&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Inject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;OrderI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;OrderI&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see we create a class &lt;code&gt;OrderI&lt;&#x2F;code&gt; that contains two methods which will lift our case classes into monads, by using &lt;code&gt;Free.inject&lt;&#x2F;code&gt;. The key part here is the implicit &lt;code&gt;Inject[Orders, F]&lt;&#x2F;code&gt; which, on compilation, will resolve to a type that binds everything together. The implicit method &lt;code&gt;orderI&lt;&#x2F;code&gt; is there to facilitate using this construct in our program, as we will see later on.&lt;&#x2F;p&gt;
&lt;p&gt;Take this as a template to follow, a bit of boilerplate to lift case classes into monads, no need to understand all the details right now. Note that we can use both &lt;code&gt;liftF&lt;&#x2F;code&gt; and this &lt;em&gt;new&lt;&#x2F;em&gt; way to lift our case classes into monads, they are not exclusive nor incompatible.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s do the same for our new language &lt;code&gt;Log&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;free&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-import z-selector z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;Free&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; Inject&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; LogI&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;I&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Inject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;infoI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;inject&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;msg&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;errorI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;inject&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;msg&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;logI&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;I&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Inject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LogI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LogI&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have a way to lift both languages into monads, we need a way to use both in a for-comprehension. The solution here is given by &lt;code&gt;Coproduct&lt;&#x2F;code&gt; (explanation on this typeclass outside of the scope, sorry!) which will allow us to wire both types together.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; cats&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;data&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;Coproduct&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;TradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Coproduct&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this we can now define our program, again:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;smartTradeWithLogs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;O&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;OrderI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;TradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;                                &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;L&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LogI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;TradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;TradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; L&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; O&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Look, ma, both monads at once!&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; infoI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;I&amp;#39;m going to trade smartly&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; buyI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;APPL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; infoI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;I&amp;#39;m going to trade even more smartly&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; buyI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;MSFT&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; sellI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; errorI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Wait, what?!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; rsp
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This compiles. We are using the implicit methods defined before to create instances of &lt;code&gt;OrderI&lt;&#x2F;code&gt; and &lt;code&gt;LogI&lt;&#x2F;code&gt;. By receiving our &lt;code&gt;Coproduct&lt;&#x2F;code&gt; as the type parameter, their implicit &lt;code&gt;Inject&lt;&#x2F;code&gt; will help us build a compatibility layer between both monads. You can check the source code of &lt;code&gt;Inject&lt;&#x2F;code&gt; to understand how this works.&lt;&#x2F;p&gt;
&lt;p&gt;We have our program, with both behaviour and logs in it. Now we want to execute it. Unfortunately, the interpreters we defined before can’t be used as they are, we need an interpreter for the new &lt;code&gt;TradeApp&lt;&#x2F;code&gt; type. The good news are that this new interpreter can be built on top of the existing ones:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;composedInterpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;TradeApp&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; orderPrinter or logPrinter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This interpreter is defining a natural transformation from &lt;code&gt;TradeApp&lt;&#x2F;code&gt; (a monad) to &lt;code&gt;Id&lt;&#x2F;code&gt; (another monad). As &lt;code&gt;TradeApp&lt;&#x2F;code&gt; is a &lt;code&gt;Coproduct&lt;&#x2F;code&gt;, and we already have interpreters from each of its elements to &lt;code&gt;Id&lt;&#x2F;code&gt;, we can take advantage of the &lt;code&gt;or&lt;&#x2F;code&gt; method in a natural transformation and delegate the task to our existing interpreters. Reuse is always good :)&lt;&#x2F;p&gt;
&lt;p&gt;We can run this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;smartTradeWithLogs&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;composedInterpreter&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we will see the output in our terminal, including the logs:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Info] - I&amp;#39;m going to trade smartly
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Buying 100 of APPL
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Info] - I&amp;#39;m going to trade even more smartly
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Buying 100 of MSFT
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Selling 100 of GOOG
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Error] - Wait, what?!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There you have it. Two full languages working together to define a program, that we can later on run with a specific interpreter. Isn’t it neat? Although the code seems more verbose that with the original example, remember that we are defining all these elements (implicit classes and interpreters) just once, and they will work with all our programs using these languages. Not a bad trade-off.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-better-than-2-languages&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#what-s-better-than-2-languages&quot; aria-label=&quot;Anchor link for: what-s-better-than-2-languages&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
What’s better than 2 languages?&lt;&#x2F;h2&gt;
&lt;p&gt;So we can build programs with two languages, but… what if we want three? We are managing money and shares, so besides logs we may be required to add auditing to the application. How easy is that? Let’s start by defining a third language, &lt;code&gt;Audit&lt;&#x2F;code&gt;, as we just did with the other two:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Audit&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; UserActionAudit&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;UserId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; SystemActionAudit&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;job&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;JobId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; AuditI&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;I&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Inject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;userAction&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;UserId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;inject&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UserActionAudit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;user&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; action&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; values&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;systemAction&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;job&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;JobId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-scala&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;inject&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;SystemActionAudit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;job&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; action&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; values&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;auditI&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;I&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Inject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;AuditI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;AuditI&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;auditPrinter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;	  fa &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;        &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UserActionAudit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;		  println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[USER Action] - user &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;user&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; called &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; with values &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;SystemActionAudit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;job&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;		  println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;[SYSTEM Action] - &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;job&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; called &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;action&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; with values &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;values&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, you have seen all this before. We have a language, we lift the case classes to Free Monad and we create an interpreter to &lt;code&gt;Id&lt;&#x2F;code&gt;. Easy. The complex part comes when we want to define our &lt;code&gt;Coproduct&lt;&#x2F;code&gt; and the typeclass is declared as &lt;code&gt;Coproduct[F[_], G[_], A]&lt;&#x2F;code&gt;, which means we have room for only two monads, &lt;code&gt;F&lt;&#x2F;code&gt; and &lt;code&gt;G&lt;&#x2F;code&gt;. But we need 3. Ouch!&lt;&#x2F;p&gt;
&lt;p&gt;But, wait! In the previous section we defined the &lt;code&gt;TradeApp&lt;&#x2F;code&gt; coproduct. Which is a coproduct, yes, but also behaves like our Free Monads, so we can consider it a Monad (I’m not sure if it is technically correct to call it a Monad, but let’s ignore that by now). This means, in fact, we have only two monads: &lt;code&gt;Audit&lt;&#x2F;code&gt; and &lt;code&gt;TradeApp&lt;&#x2F;code&gt;. So we can build the &lt;code&gt;Coproduct&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;AuditableTradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Coproduct&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;TradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A note of interest: due to the way &lt;code&gt;Inject&lt;&#x2F;code&gt; is implemented, our &lt;code&gt;TradeApp&lt;&#x2F;code&gt; class needs to be on the right hand side, otherwise this code won’t compile.&lt;&#x2F;p&gt;
&lt;p&gt;We have the type, what about the interpreter? Yes, we can reuse our existing ones, this has not changed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;auditableInterpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;AuditableTradeApp&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; auditPrinter or composedInterpreter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that in the interpreter the order also matters, due to the implementation details of &lt;code&gt;or&lt;&#x2F;code&gt;. But, at this point, we have all the pieces we need and we can build our program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;smartTradeWithAuditsAndLogs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;O&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;OrderI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;AuditableTradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;                                         &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;L&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;LogI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;AuditableTradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;										 &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;AuditI&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;AuditableTradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;							    &lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;AuditableTradeApp&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; A&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; L&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; O&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; infoI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;I&amp;#39;m going to trade smartly&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; userAction&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ID102&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;buy&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;APPL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;100&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; buyI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;APPL&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;200&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; infoI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;I&amp;#39;m going to trade even more smartly&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; userAction&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ID102&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;buy&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;MSFT&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;100&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; buyI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;MSFT&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;100&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; userAction&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ID102&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;sell&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;100&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;rsp&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; sellI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;GOOG&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-scala&quot;&gt;300&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; systemAction&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;BACKOFFICE&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;tradesCheck&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ID102&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;lastTrades&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; errorI&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Wait, what?!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; rsp
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and on execution&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;smartTradeWithAuditsAndLogs&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;auditableInterpreter&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we see&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Info] - I&amp;#39;m going to trade smartly
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[USER Action] - user ID102 called buy with values List(APPL, 100)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Buying 200 of APPL
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Info] - I&amp;#39;m going to trade even more smartly
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[USER Action] - user ID102 called buy with values List(MSFT, 100)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Buying 100 of MSFT
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[USER Action] - user ID102 called sell with values List(GOOG, 100)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Selling 300 of GOOG
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[SYSTEM Action] - BACKOFFICE called tradesCheck with values List(ID102, lastTrades)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Error] - Wait, what?!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We did it. We have three languages working together in our program. And the only additional definitions are a couple of &lt;code&gt;Coproduct&lt;&#x2F;code&gt; types as well as interpreters, which are built reusing existing interpreters for our types. Not a lot of work for the benefits we get, if I can say so.&lt;&#x2F;p&gt;
&lt;p&gt;At this stage we could try to add more languages, but we see the pattern on how it would work. So let’s try something different.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;free-monads-all-the-way-down&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#free-monads-all-the-way-down&quot; aria-label=&quot;Anchor link for: free-monads-all-the-way-down&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Free Monads all the way down&lt;&#x2F;h2&gt;
&lt;p&gt;Our original &lt;code&gt;Orders&lt;&#x2F;code&gt; language didn’t specify how would we send an order to someone. We could code that into an interpreter, true. But we can safely assume that Orders will be propagated via either HTTP requests or Messages to some system. Given the recent popularity of event-sourcing and Kafka, let’s say some publish-subscribe system. It would be wasteful to redefine the details to interact with that system in each interpreter that needed so.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, we can think that a language exists to interact with that system, so we should be able to define a Free Monad to work with that language. Let’s do so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;sealed&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Messaging&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Publish&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ChannelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;source&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;SourceId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;messageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;case &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Subscribe&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ChannelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;filterBy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Condition&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-scala&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-scala&quot;&gt;MessagingF&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;= &lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Free&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ChannelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;source&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;SourceId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;messageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessagingF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  liftF&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Publish&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;channelId&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; source&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; messageId&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; payload&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ChannelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;filterBy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Condition&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessagingF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  liftF&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Subscribe&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;channelId&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; filterBy&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;messagingPrinter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Messaging&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;	  fa &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;        &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Publish&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;source&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;messageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;          println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Publish [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;] From: [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;source&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;] Id: [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;messageId&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;] Payload: [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;]&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;          &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ok&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Subscribe&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;filterBy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;payload&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Event fired&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          println&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Received message from [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;channelId&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;](filter: [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;filterBy&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;]): [&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;payload&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;]&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          payload
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;   &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nothing new here either, we defined another language, this time using &lt;code&gt;liftF&lt;&#x2F;code&gt;, along an interpreter to &lt;code&gt;Id&lt;&#x2F;code&gt; to print messages to the terminal. By now, you should be able to do this with your eyes closed ;)&lt;&#x2F;p&gt;
&lt;p&gt;We have the language. How to make &lt;code&gt;Orders&lt;&#x2F;code&gt; work with this language, such that we can define our orders in terms of operations against a publish-subscribe network? The answer is natural transformation. If you remember, a natural transformation allows us to convert our original language to a new monad. And &lt;code&gt;MessagingF&lt;&#x2F;code&gt; is a monad, a free one. Which means we can do the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;orderToMessageInterpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessagingF&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessagingF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessagingF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;      fa &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;        &lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;ListStocks&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;          &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;            &lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; publish&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Orders&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;randomUUID&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;toString&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Get Stocks List&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;            &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;payload&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; subscribe&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;*&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;          &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-scala&quot;&gt;yield&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;payload&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-first z-scala&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Buy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          publish&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Orders&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;randomUUID&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;toString&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Buy &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-declaration z-scala&quot;&gt;case&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-pattern z-scala&quot;&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Sell&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-case z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;          publish&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;001&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Orders&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;randomUUID&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;toString&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-support z-function z-scala&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Sell &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;stock&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-scala&quot;&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-scala&quot;&gt;amount&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-interpolated z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-case z-non-first z-scala&quot;&gt;      &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This compiles (and works, as we will see later). And yes, you can use a for-comprehension inside the interpreter, as we do in our &lt;code&gt;ListStocks&lt;&#x2F;code&gt; case. This specific transformation is simpler due to the fact that &lt;code&gt;publish&lt;&#x2F;code&gt;, &lt;code&gt;buy&lt;&#x2F;code&gt; and &lt;code&gt;sell&lt;&#x2F;code&gt; have the same response type &lt;code&gt;Response&lt;&#x2F;code&gt;, but as you can see adapting the results wouldn’t be a problem, if required.&lt;&#x2F;p&gt;
&lt;p&gt;That was easy, wasn’t it? So what about our interpreter? How do we bridge from &lt;code&gt;Orders&lt;&#x2F;code&gt; to &lt;code&gt;Id&lt;&#x2F;code&gt; while using &lt;code&gt;MessagingF&lt;&#x2F;code&gt;? For this case we need to build a small bridge between interpreters. Let me show you what I mean:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;messagingFreePrinter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessagingF&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-keyword z-other z-scala&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessagingF&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;MessagingF&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-scala&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-scala&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-scala&quot;&gt;]&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;	  fa&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;messagingPrinter&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;ordersToTerminalViaMessage&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Orders&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  orderToMessageInterpreter andThen messagingFreePrinter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can chain natural transformations via their &lt;code&gt;andThen&lt;&#x2F;code&gt; method. In this case, though, we have a small mismatch of parameters: &lt;code&gt;orderToMessageInterpreter&lt;&#x2F;code&gt; returns a &lt;code&gt;MessagingF&lt;&#x2F;code&gt; but &lt;code&gt;messagingPrinter&lt;&#x2F;code&gt; expects &lt;code&gt;Messaging&lt;&#x2F;code&gt;. The solution is to create a new interpreter from &lt;code&gt;MessagingF&lt;&#x2F;code&gt; to &lt;code&gt;Id&lt;&#x2F;code&gt;. The good news is that this interpreter can reuse our existing &lt;code&gt;messagingPrinter&lt;&#x2F;code&gt; via &lt;code&gt;foldMap&lt;&#x2F;code&gt;, which means this bridge is not adding risk (as in new logic) to our application.&lt;&#x2F;p&gt;
&lt;p&gt;If we use all this together to run our original program, without logging nor auditing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;smartTrade&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;ordersToTerminalViaMessage&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we see&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Publish [001] From: [Orders] Id: [c7f22b1e-b688-4f61-82cb-39b421b8ab6c] Payload: [Buy APPL 50]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Publish [001] From: [Orders] Id: [94bbf71d-1c95-4c26-97a3-ce0b970893aa] Payload: [Buy MSFT 10]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Publish [001] From: [Orders] Id: [27311809-97f9-4e04-b813-7a2cf9743415] Payload: [Sell GOOG 200]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So now we are running our orders via another Free Monad that represents a lower-level layer in the stack. This means we can compose this new monad with other languages, as needed. This has the benefit that improvements to the interpreters of this new &lt;code&gt;Messaging&lt;&#x2F;code&gt; language will be automatically propagated to any program indirectly using it, as well as reducing the amount of code that needs to be tested thanks to reuse.&lt;&#x2F;p&gt;
&lt;p&gt;We have one last task left: use this new &lt;code&gt;Messaging&lt;&#x2F;code&gt; language with our program that has logs and audit commands.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;all-together&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#all-together&quot; aria-label=&quot;Anchor link for: all-together&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
All together&lt;&#x2F;h2&gt;
&lt;p&gt;The last step is to put all this together. We have a program, &lt;code&gt;smartTradeWithAuditsAndLogs&lt;&#x2F;code&gt;, that has logging and auditing. We want to run it against an interpreter that also uses our &lt;code&gt;Orders&lt;&#x2F;code&gt; to &lt;code&gt;Messaging&lt;&#x2F;code&gt; to &lt;code&gt;Id&lt;&#x2F;code&gt; interpreter defined above, &lt;code&gt;ordersToTerminalViaMessage&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To do this, we need to define two new interpreters. The reason is that our original &lt;code&gt;TradeApp ~&amp;gt; Id&lt;&#x2F;code&gt; interpreter wasn’t running through our &lt;code&gt;Messaging&lt;&#x2F;code&gt; language, and by changing the interpreter for &lt;code&gt;TradeApp&lt;&#x2F;code&gt; we will also need to define a new one for &lt;code&gt;AuditableTradeApp&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;composedViaMessageInterpreter&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;TradeApp&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  ordersToTerminalViaMessage or logPrinter
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-scala&quot;&gt;def&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-scala&quot;&gt;auditableToTerminalViaMessage&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;AuditableTradeApp&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-scala&quot;&gt;~&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;Id&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  auditPrinter or composedViaMessageInterpreter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As before, the good news is that we are reusing our previous original interpreters, just modifying how we combine them. When you think about it, we have only 4 interpreters to &lt;code&gt;Id&lt;&#x2F;code&gt;, one per language. All the other interpreters are combinations of these. Which means that, although it seems we are reimplementing them often, in fact we are not.&lt;&#x2F;p&gt;
&lt;p&gt;With this last interpreter we can run our full program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;smartTradeWithAuditsAndLogs&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;foldMap&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;auditableToTerminalViaMessage&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and see in our terminal&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Info] - I&amp;#39;m going to trade smartly
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[USER Action] - user ID102 called buy with values List(APPL, 100)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Publish [001] From: [Orders] Id: [1198b3b5-c4bd-4f96-90e7-56553f0d2a54] Payload: [Buy APPL 200]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Info] - I&amp;#39;m going to trade even more smartly
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[USER Action] - user ID102 called buy with values List(MSFT, 100)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Publish [001] From: [Orders] Id: [98b19c50-6b61-4f92-b28e-59395c103362] Payload: [Buy MSFT 100]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[USER Action] - user ID102 called sell with values List(GOOG, 100)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Publish [001] From: [Orders] Id: [8f95b6ae-47d4-4a70-aea3-feca73d63e7a] Payload: [Sell GOOG 300]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[SYSTEM Action] - BACKOFFICE called tradesCheck with values List(ID102, lastTrades)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[Error] - Wait, what?!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that’s it. We have defined a program using 4 different languages, used at different levels of abstraction. Quite a comprehensive case, if the length of this post is any indication :) I hope this showcases the main uses of Free Monad and gives you a better understanding on the subject.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that you can clone the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;free-monad-sample&quot;&gt;code&lt;&#x2F;a&gt; to play with all this yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s talk about a couple of issues with Free Monads.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance-impact&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#performance-impact&quot; aria-label=&quot;Anchor link for: performance-impact&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Performance impact&lt;&#x2F;h2&gt;
&lt;p&gt;Every time we add an abstraction, performance may diminish. I’ve not done any tests on performance using Free Monads as doing a proper benchmark is very hard, but I found a couple of references on the subject which may help understanding the impact.&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;okmij.org&#x2F;ftp&#x2F;Computation&#x2F;free-monad.html&quot;&gt;Free Monad explanation&lt;&#x2F;a&gt; is quite comprehensive, and it says about performance:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do we have to pay for all the benefits of free and freer monads in performance?
With the simplest free and freer monads described so far: yes, the performance suffers.
One should keep in mind that performance does not always matter: a large portion of software
we successfully interact with every day is written in Python, Perl or Ruby, and which are not
exactly speed kings.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I agree with the statement above in that most of our applications are not performance sensitive, within certain limits. For most operations the overhead introduced by Free Monad is not relevant, but don’t use it if performance is critical to your business case.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;mandubian&quot;&gt;Pascal Voitot&lt;&#x2F;a&gt; wrote last year a post on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;mandubian.com&#x2F;2015&#x2F;04&#x2F;09&#x2F;freer&#x2F;&quot;&gt;better implementations&lt;&#x2F;a&gt; of Free. As far as I understand, some of the concepts are already implemented in Cats and may reduce the impact of Free a bit.&lt;&#x2F;p&gt;
&lt;p&gt;As usual, each use case is different. You should test your implementation to ensure resulting performance is acceptable to you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-criticisms&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#the-criticisms&quot; aria-label=&quot;Anchor link for: the-criticisms&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
The criticisms&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve left this part to the last, at the point where saw a full implementation of Free and we can judge the criticisms from a more informed perspective. Shouldn’t come as a surprise that not everybody likes Free Monad, and there are some justified criticisms to it.&lt;&#x2F;p&gt;
&lt;p&gt;As an example, recently &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;alexelcu&quot;&gt;Alexandru Nedelcu&lt;&#x2F;a&gt;, of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;monix.io&#x2F;&quot;&gt;Monix&lt;&#x2F;a&gt; fame, tweeted a series of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;alexelcu&#x2F;status&#x2F;736090380999888898&quot;&gt;opinions&lt;&#x2F;a&gt; where he highlights some trade offs you make when you decide to use Free Monads.&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;event.scaladays.org&#x2F;scaladays-nyc-2016#!#schedulePopupExtras-7558&quot;&gt;talk&lt;&#x2F;a&gt; by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;kelleyrobinson&quot;&gt;Kelley Robinson&lt;&#x2F;a&gt; gave a bit more detail on situations in which Free Monad may not be a good fit. The video has not been published yet, but there are &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;KelleyRobinson1&#x2F;why-the-free-monad-isnt-free-61836547&quot;&gt;slides&lt;&#x2F;a&gt; available.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately I’ve lost a couple of references I had with people raising concerns about Free Monad. But I hope these two give you an idea of the general issues people have with this pattern.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, you have to remember the Free Monad is just a tool, and no tool is a silver bullet. It may be a perfect fit for your application and team, right now, but you should understand the trade offs you are accepting. Unfortunately you can only understand that through experience; my advice is to start using it in areas of the code where the impact will be small and spread it as you learn.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#thanks&quot; aria-label=&quot;Anchor link for: thanks&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Thanks&lt;&#x2F;h2&gt;
&lt;p&gt;With concepts like Free Monad, existing literature and people’s help are crucial to navigate the hard parts. It would be unfair to not mention all contributions that helped me to understand (or so I hope) Free Monad, and to write this post.&lt;&#x2F;p&gt;
&lt;p&gt;There’s plenty of information online that has been extremely useful. The most relevant links are listed in the next section. A big thanks to all the authors, the time spent on that documentation has helped at least one person :)&lt;&#x2F;p&gt;
&lt;p&gt;I need to thank &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;milessabin&quot;&gt;Miles Sabin&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;channingwalton&quot;&gt;Channing Walton&lt;&#x2F;a&gt;, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;lancewalton&quot;&gt;Lance Walton&lt;&#x2F;a&gt;, as experimentation we did with Free Monad provided a foundation for this post.&lt;&#x2F;p&gt;
&lt;p&gt;Many thanks to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;julientruffaut&quot;&gt;Julien Truffaut&lt;&#x2F;a&gt;. He pointed to &lt;code&gt;traversableU&lt;&#x2F;code&gt; as the solution to mixing &lt;code&gt;List&lt;&#x2F;code&gt; results in the program for &lt;code&gt;Orders&lt;&#x2F;code&gt;. I got stuck in that case and, without his contribution, I’d be giving a horribly wrong solution to you, my reader.&lt;&#x2F;p&gt;
&lt;p&gt;Last, but not least, I need to thank &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;typelevel&#x2F;cats&quot;&gt;Cat’s Gitter channel&lt;&#x2F;a&gt;, in particular &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;adelbertchang&quot;&gt;Adelbert Chang&lt;&#x2F;a&gt;, as he corrected a few misconceptions I had whilst porting a Free Monad built using Scalaz to a version using Cats.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#references&quot; aria-label=&quot;Anchor link for: references&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
References&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve used a lot of sources to improve my understanding on Free Monad. Below you can find a list of links that I found very relevant and helpful:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cats definition (very good explanation): &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;datatypes&#x2F;freemonad.html&quot;&gt;http:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;datatypes&#x2F;freemonad.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Free Monad technical explanation: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;okmij.org&#x2F;ftp&#x2F;Computation&#x2F;free-monad.html&quot;&gt;http:&#x2F;&#x2F;okmij.org&#x2F;ftp&#x2F;Computation&#x2F;free-monad.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Tim Perrett’s blog post (uses Scalaz): &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;timperrett.com&#x2F;2013&#x2F;11&#x2F;21&#x2F;free-monads-part-1&#x2F;&quot;&gt;http:&#x2F;&#x2F;timperrett.com&#x2F;2013&#x2F;11&#x2F;21&#x2F;free-monads-part-1&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Underscore post by Noel Welsh (uses Scalaz): &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2015&#x2F;04&#x2F;14&#x2F;free-monads-are-simple.html&quot;&gt;http:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2015&#x2F;04&#x2F;14&#x2F;free-monads-are-simple.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A second post by Noel Welsh: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2015&#x2F;04&#x2F;23&#x2F;deriving-the-free-monad.html&quot;&gt;http:&#x2F;&#x2F;underscore.io&#x2F;blog&#x2F;posts&#x2F;2015&#x2F;04&#x2F;23&#x2F;deriving-the-free-monad.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The always useful Tutorial for Cats: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eed3si9n.com&#x2F;herding-cats&#x2F;Free-monads.html&quot;&gt;http:&#x2F;&#x2F;eed3si9n.com&#x2F;herding-cats&#x2F;Free-monads.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;A year living Freely&lt;&#x2F;em&gt; by Chris Myers: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=rK53C-xyPWw&quot;&gt;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=rK53C-xyPWw&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A post by John A De Goes (uses Haskell) &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;degoes.net&#x2F;articles&#x2F;modern-fp&quot;&gt;http:&#x2F;&#x2F;degoes.net&#x2F;articles&#x2F;modern-fp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That’s all for now, I hope this was informative and useful. As always, feedback via Twitter&#x2F;Email is more than welcome. Cheers!&lt;&#x2F;p&gt;
&lt;p&gt;PS: Hold the door.&lt;&#x2F;p&gt;
</content>
        <summary type="html">The concept of Free Monad is becoming popular, or at least I’ve seen plenty of mentions about it in the Scala Functional Programming community as of late. Why is it relevant?
…</summary>
        </entry><entry xml:lang="en">
        <title>Scala Exchange 2015 Day Two</title>
        <published>2015-12-11T00:00:00+00:00</published>
        <updated>2015-12-11T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/scala-exchange-2015-day-two/" type="text/html"/>
        <id>https://perevillega.com/posts/scala-exchange-2015-day-two/</id>
        
            <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;skillsmatter.com&#x2F;conferences&#x2F;6862-scala-exchange-2015#program&quot;&gt;Scala Exchange 2015&lt;&#x2F;a&gt; is on! I will be updating this entry with summaries on the talks I attended. Typos a plenty, be warned, but I hope this proves useful to somebody while we wait for the videos to be made available. You can also read my &lt;a href=&quot;&#x2F;scala-exchange-2015-day-one&#x2F;&quot;&gt;summary of day one&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;keynote-spark-hadoop-and-how-it-relates-to-scala&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#keynote-spark-hadoop-and-how-it-relates-to-scala&quot; aria-label=&quot;Anchor link for: keynote-spark-hadoop-and-how-it-relates-to-scala&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Keynote: Spark+Hadoop and how it relates to Scala&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;sean_r_owen&quot;&gt;Sean Owen&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Intends to give a different perspective on Scala, a less technical talk, more about his path into Scala coming from Hadoop and Java.&lt;&#x2F;p&gt;
&lt;p&gt;Sean started with EJB and Struts. Some of these ideas faded after the dot-com bust. Moved to Google, built Barcode scanner in Android. He chose to move towards Java to avoid C++. After Google got involved with open-source in a project that ended up being Apache Mahout. There were ML systems before Hadoop, but Hadoop attracted all those Java developers interested in the area. He worked with it until 2 years ago where he moved to Spark, and Scala.&lt;&#x2F;p&gt;
&lt;p&gt;The common thread on most of this path is the JVM. For enterprise people, everything looks like Spring&#x2F;Maven&#x2F;etc, the standard stack. Your world view is defined by it, you mold problems to fit that.&lt;&#x2F;p&gt;
&lt;p&gt;Why Hadoop in Java, instead of C++ which was used in Google for Map-Reduce? Officially due to the usual reasons: type-safe, garbage colector, easier to debug, libraries available, and platform independence. But Sean thinks there are other reasons: lots of people fled the dot-com burst to the safety of tech giants. Enterprise architecture meets web scale and Hadoop is born. A colleague thinks the real reason is Lucene used Java as an experiment, and Hadoop inherited that decision along the way.&lt;&#x2F;p&gt;
&lt;p&gt;Hadoop has some functional ideas from the start. Map-reduce, HDFS (immutable file system), no side effects in mappers&#x2F;reducers. They probably were not taken directly from FP, they are just good ideas and assumptions that work well in a distributed environment, almost essential.&lt;&#x2F;p&gt;
&lt;p&gt;However, Hadoop ‘feels’ enterprise-y. For example, a Mapper is a heavy-weight object instead of a simple function. It allows you to store state, exposes threading to you, makes you manage serialisation, etc. There may be reasons behind (performance, etc) but it’s not very functional.&lt;&#x2F;p&gt;
&lt;p&gt;In a parallel world, Python grew in the ‘big-data’ environment. Python is different: has an interpreter, sometype inference, has lambdas, libraries for ML, and pip to manage dependencies. Not at all like enterprise software. There are some nice things in the Python environment we wish we could have in the Java world (at that time). But if you are used to Java’s world you won’t realise you may want these things.&lt;&#x2F;p&gt;
&lt;p&gt;Then we arrive to 2014, where functional invades the Hadoop ecosystem via Spark, Kafka, and Java 8 lambdas. Mentions to Storm and other similars projects that reinforce the trend. So suddenly the JVM has access to some of the features it was lacking.&lt;&#x2F;p&gt;
&lt;p&gt;But this is not about Spark replacing Map-reduce unexpectedly, we already had projects (like Crunch) that had improved in that area so the progression is ‘natural’, it has been coming for a while. This is just a next step in the evolution.&lt;&#x2F;p&gt;
&lt;p&gt;Why do Scala&#x2F;Spark fit Hadoop? Many reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Immutable data at the foundation, perfect match between FP and Hadoop&lt;&#x2F;li&gt;
&lt;li&gt;Functional paradigm from the start&lt;&#x2F;li&gt;
&lt;li&gt;Unlocks caching due to immutability, at all levels from Spark to HDFS&lt;&#x2F;li&gt;
&lt;li&gt;Scala naturally from Java, which in turn replaced C++. Natural progression&lt;&#x2F;li&gt;
&lt;li&gt;Hybrid imperative&#x2F;functional wins, easier to adapt to and quickly grab benefits&lt;&#x2F;li&gt;
&lt;li&gt;Memory caching allows for fast iteration, which benefits data scientists as iteration is at the core of ML&lt;&#x2F;li&gt;
&lt;li&gt;The provided Shell allows for exploratory analytics, makes it easier to prototype&lt;&#x2F;li&gt;
&lt;li&gt;It’s more familiar to Python devs and the environment&#x2F;features they are used to&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What do I like about Scala as a former Java developer?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Love collections, say what you will but they give you a lot of expressiveness&lt;&#x2F;li&gt;
&lt;li&gt;Love case classes and tuples, save you a lot of boilerplate&lt;&#x2F;li&gt;
&lt;li&gt;Love language constructs like val, lazy and match. They simplify and clarify what you intend to write&lt;&#x2F;li&gt;
&lt;li&gt;Love closures, which are much better than Java 8 lambdas, cleaner and slicker&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What do I dislike about Scala as a former Java developer?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Dislike Option, not sure it’s way better than &lt;em&gt;null&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Dislikes incompatible minor releases, has been very painful in Spark. A big deal for projects&lt;&#x2F;li&gt;
&lt;li&gt;Dislikes Sbt imperative style, still prefers Maven declarative style. Writing code in your build script is a step backwards when you try to understand somebody else Sbt build script.&lt;&#x2F;li&gt;
&lt;li&gt;Dislike the fact &lt;em&gt;scalac&lt;&#x2F;em&gt; is incredibly heavy. Yes, he understands the Scala compiler does so much more for you, but compiling park takes so long it seems crazy on 2015.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The last complain about Scala community it’s the excessive fascination with syntax, sometimes using complex functional chain of operations to express simple ideas which could be expressed in a simpler way in Java.&lt;&#x2F;p&gt;
&lt;p&gt;Scala is, no doubt, the future for Hadoop ecosystem. That is good.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;streams-reactive-functional-or-akka-scalaz-streams-side-by-side&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#streams-reactive-functional-or-akka-scalaz-streams-side-by-side&quot; aria-label=&quot;Anchor link for: streams-reactive-functional-or-akka-scalaz-streams-side-by-side&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Streams: reactive? functional? Or: akka- &amp;amp; scalaz- streams side-by-side&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;adamwarski&quot;&gt;Adam Warski&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The aim of today is to see the differences between Akka and Scalaz streams. Most of the talk will be live coding, so please watch the video.&lt;&#x2F;p&gt;
&lt;p&gt;The problem we want to solve is to process data as it comes. We can’t hold all the data into memory for some reason, irrelevant why. We focus on scenarios with a single node which cover a lot of common scenarios, for multi-node computations please check Spark.&lt;&#x2F;p&gt;
&lt;p&gt;Akka Streams introduces itself as a library to process and transfer a sequence of elements in a bounded buffer space.
Scalaz Streams is a streaming I&#x2F;O library focussed on compositionally, expressiveness and resource safety.&lt;&#x2F;p&gt;
&lt;p&gt;In both cases we want to define a pipeline, in a type-safe way, and then run data through it. Scalaz-stream is slightly more typesafe than Akka Streams. In both libraries the first step is to create a ‘blue-print’ (graph for Akka, process for Scalaz) that defines how to transform the data. After that is defined we can execute it (materialise in Akka, run in Scalaz).&lt;&#x2F;p&gt;
&lt;p&gt;The basic building blocks for Akka is a Graph (simple caseL linear pipeline), that has a source (produces elements), Sink (consumes an input) and some Flow pieces that transforms elements. At runtime each component is materialised into an Actor, and each actor does the operation defined in the relevant component. Each component also materialise into an additional value (example: Source into a Future you can use to get the result of the processing).&lt;&#x2F;p&gt;
&lt;p&gt;In Scalaz the approach is different. We initially create a data type &lt;code&gt;Process[F[_], T]&lt;&#x2F;code&gt;. &lt;code&gt;T&lt;&#x2F;code&gt; is the output type, &lt;code&gt;F[_]&lt;&#x2F;code&gt; describes side-effects that can occur while processing. In simplest case we have &lt;code&gt;Process[Nothing, T]&lt;&#x2F;code&gt; that emits &lt;code&gt;T&lt;&#x2F;code&gt; without any change. We also have aliases like &lt;code&gt;Sink[F[_],0] = Process[F, O =&amp;gt; F[Unit]]&lt;&#x2F;code&gt;. The Process is in fact akin to a state machine.&lt;&#x2F;p&gt;
&lt;p&gt;Akka implements the reactive-streams standard, which provides back-pressure via a back-channel, via dynamic push-pull. Source only produces data when the back-channel indicates it is needed, to avoid overwhelming components downstream. Everything is actor based, things happen concurrently.&lt;&#x2F;p&gt;
&lt;p&gt;Scalaz has back-pressure for free as it is entirely pull-based. Elements are evaluated on by one, in a functional approach by which we only process one element once the state machine says we can do so. Not dependent on Scalaz except for &lt;code&gt;Task&lt;&#x2F;code&gt;. To be clear, Scalaz is slower than Akka version (2-3x).&lt;&#x2F;p&gt;
&lt;p&gt;(Code examples via live-coding start, please watch video. I’ll try to summarise any key ideas mentioned)&lt;&#x2F;p&gt;
&lt;p&gt;In Akka operations over the Source (like &lt;code&gt;map&lt;&#x2F;code&gt; or &lt;code&gt;filter&lt;&#x2F;code&gt;) are converted into actors behind the scenes. The first example to manipulate a text file (read, filter, map and save) already creates at least 8 actors. You can’t influence the concurrency.&lt;&#x2F;p&gt;
&lt;p&gt;Code in Scalaz version looks similar, just using different types as Source. Scalaz calls &lt;code&gt;run&lt;&#x2F;code&gt; twice, first once compiles process into a &lt;code&gt;Task&lt;&#x2F;code&gt;, the second runs the &lt;code&gt;Task&lt;&#x2F;code&gt;. If you want parallelism you need to be explicit about it, there is none by default.&lt;&#x2F;p&gt;
&lt;p&gt;In the first test Akka took 3.84s while Scalaz took 6.93s. Take in account Scalaz was using a single thread (no parallelism defined).&lt;&#x2F;p&gt;
&lt;p&gt;The second example wants to transform Int to Int, processing odd and even elements in parallel. For Akka this means creating a FlowGrap that defines the data flow by first creating components of the Graph and then declaring the connections. Beware the graph correctness is checked at runtime, not at compile time! Adam comments that creating a component, &lt;code&gt;SplitStage&lt;&#x2F;code&gt;, was complex and more so due to the use of a mutable API.&lt;&#x2F;p&gt;
&lt;p&gt;Scalaz version of the Int processing, all purely functional. Adam confesses it was hard to write the first time. Scalaz requires us to be explicit on parallelism, so we need to create bounded queues (for memory protection) and we use streams to add&#x2F;get elements to&#x2F;from them. We also need to close the queues once we are done. In the code we define several components, please watch the video to see the full structure (hard to describe without showing the code). All the code is purely functional with full control on side-effects. All the connections are checked at compile time.&lt;&#x2F;p&gt;
&lt;p&gt;In the second test Akka took 3.43s and Scalaz 3.25s, as both were waiting for 1s during processing.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;fast-automatic-type-class-derivation-with-shapeless&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#fast-automatic-type-class-derivation-with-shapeless&quot; aria-label=&quot;Anchor link for: fast-automatic-type-class-derivation-with-shapeless&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Fast automatic type class derivation with shapeless&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;alxarchambault&quot;&gt;Alexandre Archambault&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Modelisation: in Scala you use a lot of case classes and sealed traits to represent your domain. Hundreds or more on big projects. The usual tasks include conversion to&#x2F;from JSON, persist in binary format, render as CSV, pretty-print, etc. You do this a lot, so you want to automate these tasks.&lt;&#x2F;p&gt;
&lt;p&gt;You could use macros, but the Scala type system is quite complex and that means you need to consider a lot of things. Also, macros have some surprises within the API (side effects). All in all, using macros to automate these tasks becomes unwieldy.&lt;&#x2F;p&gt;
&lt;p&gt;A solution is to use Shapeless instead.&lt;&#x2F;p&gt;
&lt;p&gt;A first example is a &lt;code&gt;Printer&lt;&#x2F;code&gt; class that takes a value of type &lt;code&gt;T&lt;&#x2F;code&gt; and prints it. To explain how to do it, first let’s talk about &lt;code&gt;HLists&lt;&#x2F;code&gt;. &lt;code&gt;HLists&lt;&#x2F;code&gt; are a sequence of types&#x2F;values, similar to Scala &lt;code&gt;List&lt;&#x2F;code&gt; except its elements may have different types inside the same list (&lt;code&gt;String :: Int :: HNil&lt;&#x2F;code&gt; as an example). We can identify a &lt;code&gt;HList&lt;&#x2F;code&gt; to a case class of the same types.&lt;&#x2F;p&gt;
&lt;p&gt;As we can build &lt;code&gt;HLists&lt;&#x2F;code&gt; inductively, by prepending elements (&lt;code&gt;::&lt;&#x2F;code&gt;), we can define our &lt;code&gt;Printer&lt;&#x2F;code&gt; class by recursively iterating over the &lt;code&gt;HList&lt;&#x2F;code&gt; and printing the values. We use support &lt;code&gt;Printer&lt;&#x2F;code&gt; for basic types (&lt;code&gt;Printer[String]&lt;&#x2F;code&gt;, &lt;code&gt;Printer[Int]&lt;&#x2F;code&gt;, etc) and as we can decompose the &lt;code&gt;HList&lt;&#x2F;code&gt; into these basic components, we know we will print as expected.&lt;&#x2F;p&gt;
&lt;p&gt;As we mentioned, we can map case classes to &lt;code&gt;HList&lt;&#x2F;code&gt;. Given that, defining &lt;code&gt;Printer&lt;&#x2F;code&gt; in terms of &lt;code&gt;HList&lt;&#x2F;code&gt; (which is easy) provides us a way to print any existing case class in our code, including any case class we create in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes there are issues due to wrong divergences or recursive types. We can make our derivation more robust by using Shapeless’ &lt;code&gt;Lazy&lt;&#x2F;code&gt; type, which helps the compiler resolve the issues mentioned before and handles real recursion in types properly.&lt;&#x2F;p&gt;
&lt;p&gt;A caveat to consider is that implicit priorities may cause issues in automatic generation. There are workarounds, like using &lt;code&gt;export-hook&lt;&#x2F;code&gt; from Miles Sabin, or break implicits into an object hierarchy.&lt;&#x2F;p&gt;
&lt;p&gt;There are ways to speed up the process, for example using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lihaoyi&#x2F;upickle-pprint&quot;&gt;upickle&lt;&#x2F;a&gt;, a project that uses macros to help with type generation.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;keynote-typelevel-the-benefits-of-collaboration&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#keynote-typelevel-the-benefits-of-collaboration&quot; aria-label=&quot;Anchor link for: keynote-typelevel-the-benefits-of-collaboration&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Keynote: Typelevel - the benefits of collaboration&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;milessabin&quot;&gt;Miles Sabin&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is a different talk from the ones Miles usually gives, where he codes live. This one has slides! And no talking about Shapeless either.&lt;&#x2F;p&gt;
&lt;p&gt;The title was chosen months ago. This is about Typelevel and how collaboration is good. But, following Jessica’s talk, I feel the subtitle should be ‘The benefits of community’.&lt;&#x2F;p&gt;
&lt;p&gt;A year ago, Lars gave a keynote in this very stage. I watched that video and was astonished to how much has happened in the last year. Some very good, some not quite so great.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s travel to September 2014, where Typelevel announced a fork of the Scala compiler. We wanted to push some prevalent Typelevel ideas into it, to fix some particular things. It’s something that can cause a lot of friction and disruption, but luckily the reaction was mostly positive. This shows that there is a big vibrant OS community around Scala. Shows that Typesafe is happy to let people help. It’s better to have people collaborate instead of moaning. EPFL also showed a generally positive feeling about the possible outcomes of experimentation and prototyping in Scala compiler.&lt;&#x2F;p&gt;
&lt;p&gt;A few months later, Scala Exchange 2014, Lars did his keynote. There was a friendly panel and everybody seemed going along very well.&lt;&#x2F;p&gt;
&lt;p&gt;After that, something came to the spotlight: Typelevel is not only about technology and functional programming, it also wants to promote a good environment for minorities in the community. This caused Typelevel to adopt a code of conduct, seen as a means to an end: encourage good behaviour and deal with bad behaviour. Although most of the people accepted the code of conduct, this lead to a certain amount of drama in a part of the Scalaz community (where Lars was a primary maintainer). This had some cascading effects and shaped Typelevel since them up to now.&lt;&#x2F;p&gt;
&lt;p&gt;One of the first things that became clear is that Scalaz couldn’t continue as part of Typelevel. Lars stepped down as a Scalaz maintainer. But there was the need for the abstractions Scalaz provided for Typelevel libraries. As a consequence, Cats was created, to cover the technical needs while agreeing to the code of conduct, thus following Typelevel aims.&lt;&#x2F;p&gt;
&lt;p&gt;As a result of the drama, we realised it wasn’t clear to everybody else what is Typelevel about. So we needed to define Typelevel better to help people understand us besides our technical projects like Cats.&lt;&#x2F;p&gt;
&lt;p&gt;So what is Typelevel? (Mind, the following is work-in-progress and Typelevel wants feedback on it). Typelevel is a community of projects and individuals organised around:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;pure, typeful, functional programming in Scala (not in Haskell!)&lt;&#x2F;li&gt;
&lt;li&gt;independent free and open-source software, not linked to any organisation or company. Scala owes &lt;strong&gt;a lot&lt;&#x2F;strong&gt; to the community, don’t forget it.&lt;&#x2F;li&gt;
&lt;li&gt;a desire to share ideas and code&lt;&#x2F;li&gt;
&lt;li&gt;accessible and idiomatic learning resources&lt;&#x2F;li&gt;
&lt;li&gt;inclusive, welcoming and safe environment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is evolving, but what is we think Typelevel is about. Please watch Erik Osheim’s Scala World talk to see ways you can build open source communities. Very recommended.&lt;&#x2F;p&gt;
&lt;p&gt;Typelevel has always been a collection of projects. Since one year ago we had some changes: Scalaz, Scalaz-streams and Argonaut left, other libraries like Circe, Cats, Dogs, and a few more joined. There’s been new tools, tests and laws like Ensime and tut (among others). There have also appeared several integration projects, like shapeless-argonaut, which enhance existing libraries; as well as macro&#x2F;plugin helpers which facilitate the job of library maintainers. A lot of stuff in one year :)&lt;&#x2F;p&gt;
&lt;p&gt;Typelevel Scala has not moved very much due to all the effort being put into Cats and related projects. But there have been tools developed that proof some concepts we wanted in the forked compiler, so some progress has been achieved. See George Leontiev’s Scala World talk for more details. There’s been some specific compiler work, minor, but it proves we can work with it.&lt;&#x2F;p&gt;
&lt;p&gt;Some details on some of the libraries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;well stablished libraries like Scodec (binary data, very powerful and performant), Shapeless (generic programming) and Spire (numeric library for high precision operations). All widely used, directly or indirectly.&lt;&#x2F;li&gt;
&lt;li&gt;also well stablished are Discipline (law checking for type classes), ScalaCheck (automated property-based testing) and Spec2 (software specification)&lt;&#x2F;li&gt;
&lt;li&gt;we have integrations, generic extensions of other libraries. For example, argonaut-shapeless.&lt;&#x2F;li&gt;
&lt;li&gt;we have news things: Algebra, Cats, and Alleycats. Cats ia a Scalaz replacement. Algebra provides a set of algebraic type classes, comprising some fundamental type classes which are then used in Cats. Alleycats are lawless type classes and instances, which are also used in Cats.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There’s been a lot of activity lately. For example, since January 2015 there have been 1558 commits to Cats by 57 contributors.&lt;&#x2F;p&gt;
&lt;p&gt;Our guiding principles for Algebra, Cats, and Alleycats:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;approachability: we want people to be able to approach the library much more easily than it was with Scalaz. For example, preference for text-based operators, make sure terminology is expressive enough instead of just focussing on the mathematical origin of the concept.&lt;&#x2F;li&gt;
&lt;li&gt;modularity: we broke Cats into submodules so it can be used as required instead of being a massive jar&lt;&#x2F;li&gt;
&lt;li&gt;documentation: we strive to have a massively improved documentation so we can convey useful information in a simple and centralised way&lt;&#x2F;li&gt;
&lt;li&gt;efficiency: we are willing to compromise and use (under the hood) non-functional constructs to improve performance. Watch Stew O’Connors talk at Scala by the Bay.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s talk about Tut. It’s a markdown processor which interprets Scala in code blocks. This provides type-checked documentation, which helps us having useful and relevant documentation. It’s been even used by Underscore to produce a book, Essential Slick!&lt;&#x2F;p&gt;
&lt;p&gt;Circe is a JSON library for Scala and Scala.js. Derived from Argonaut, uses &lt;em&gt;jawn&lt;&#x2F;em&gt; for parsing. Uses Monocle for lenses, works with Refined. Uses Shapeless for codec derivation.&lt;&#x2F;p&gt;
&lt;p&gt;(Miles is running out of time so it skips some stuff, like explaining other Typelevel libraries)&lt;&#x2F;p&gt;
&lt;p&gt;Simulacrum: provides annotations to automatically generate boilerplate when creating type classes. Machinist is a macro that eliminates overhead associated with Simulacrum.&lt;&#x2F;p&gt;
&lt;p&gt;The experience with all these projects has influenced the way we think about the forked compiler. We have a better picture of the trade offs, and we can tackle small issues in helpers and bigger pieces in the compiler itself.&lt;&#x2F;p&gt;
&lt;p&gt;We want people to get involved. We hope we have created an active and lively community. But we want you in. There is an up-to-date list of projects in our homepage. Most projects exist in Github and Gitter.&lt;&#x2F;p&gt;
&lt;p&gt;News! There will be two Typelevel summits next year! Please join us!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;workshop-shapeless-for-mortals&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#workshop-shapeless-for-mortals&quot; aria-label=&quot;Anchor link for: workshop-shapeless-for-mortals&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Workshop: Shapeless for Mortals&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;fommil&quot;&gt;Sam Halliday&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It is a workshop so there will be no notes on it, sorry!&lt;&#x2F;p&gt;
&lt;p&gt;Don’t forget to join us at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;skillsmatter.com&#x2F;conferences&#x2F;7402-scalaxhack&quot;&gt;ScalaXHack&lt;&#x2F;a&gt; tomorrow. Hope you enjoyed the content :)&lt;&#x2F;p&gt;
</content>
        <summary type="html">Scala Exchange 2015 is on! I will be updating this entry with summaries on the talks I attended. Typos a plenty, be warned, but I hope this proves useful to somebody while we wait for the videos to be made available. You can also read my summary of day one.
…</summary>
        </entry><entry xml:lang="en">
        <title>Scala Exchange 2015 Day One</title>
        <published>2015-12-10T00:00:00+00:00</published>
        <updated>2015-12-10T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/scala-exchange-2015-day-one/" type="text/html"/>
        <id>https://perevillega.com/posts/scala-exchange-2015-day-one/</id>
        
            <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;skillsmatter.com&#x2F;conferences&#x2F;6862-scala-exchange-2015#program&quot;&gt;Scala Exchange 2015&lt;&#x2F;a&gt; is on! I will be updating this entry with summaries on the talks I attended. Typos a plenty, be warned, but I hope this proves useful to somebody while we wait for the videos to be made available. You can also read my &lt;a href=&quot;&#x2F;scala-exchange-2015-day-two&#x2F;&quot;&gt;summary of day two&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;keynote-scaling-intelligence-moving-ideas-forward&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#keynote-scaling-intelligence-moving-ideas-forward&quot; aria-label=&quot;Anchor link for: keynote-scaling-intelligence-moving-ideas-forward&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Keynote: Scaling Intelligence: moving ideas forward&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jessitron&quot;&gt;Jessica Kerr&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Scala as a language is about scaling. There is an inherent limit on development: what fits in our head (see this &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;complexity-simplicity-esb&quot;&gt;other talk&lt;&#x2F;a&gt; by Jessica Kerr and Dan North). Given that limit, we need to scale outside of ourselves, use our team and community. People learn best in teams, people are not superstars by themselves, great teams create stars.&lt;&#x2F;p&gt;
&lt;p&gt;Most of what we do is not coding, nor learning, but teaching. We teach computer what to do, teach business about their own process (via requirement gathering), teach users via the UI we build, and we teach each other. Reusable code, flexible code, that is learnable code. A good commit message, that teaches what intention is behind the change. Documentation teaches what something does.&lt;&#x2F;p&gt;
&lt;p&gt;We want people in our community as only that way we can scale that knowledge that makes us better. There are two things we need to know about Scala which we can only learn from members and group diversity:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clarity: a teacher looks at the context of the learner, appreciates that context and adapts to that to teach. If something is not clear to you is not your fault, it is being explained wrong.&lt;&#x2F;li&gt;
&lt;li&gt;Usefulness: if code is not useful then it doesn’t matter how correct it is. Determined by aggregate support of the community.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Scala is designed to scale the community. Scala is supposed to be a staircase, to start by using features that make more sense to us and gradually learn more things and advance. But currently you can hit roadblocks due to lack of context when trying to learn something, which forces you to learn stuff you do’t care about not or you are not ready to tackle.&lt;&#x2F;p&gt;
&lt;p&gt;You should write blogs, even for very basic information. Writing blogs helps less experienced people to find solutions to problems when they Google the error and they learn why something is that way. If many people do this we accelerate the community and help moving to next step in the language.&lt;&#x2F;p&gt;
&lt;p&gt;Documentation written by leaders or experts of a community that know too much on the subject is too sparse as they have too much context. They can’t scale a community themselves. New joiners, with less experience, can help because they can identify what context is needed for an explanation. Scala can be hard, don’t feel stupid for nto understanding! Write and collaborate.&lt;&#x2F;p&gt;
&lt;p&gt;Your contribution is valuable. If something (blog post, stack overflow question) helps you, writing a post pointing to it and saying that helped you and how it was useful makes Google raise its relevance and helps the community to find it easily, helping all. Writing that makes you part of Scala. A language by itself doesn’t do anything, Scala is part of a programming system that includes libraries, tools, editors, AND the community.&lt;&#x2F;p&gt;
&lt;p&gt;We can learn a lot from the Ruby community (and they can learn about language form us :P) It is a community that has scaled and it is still growing, still writing very useful software in it. We can learn on how they interact with each other, we can bring the same community scale to us.&lt;&#x2F;p&gt;
&lt;p&gt;We can learn things like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scala values evolution vs stability. Ruby solved this dilema because libraries have a lot of maintainers, so they can be upgraded and evolve while being stable. In Scala with Typesafe, Typelevel you are still good. But other groups (Twitter, Foursquare, etc) which have few maintainers you are at risk, you don’t know when will they use newer idioms.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What is idiomatic scala? Still not clear, everybody’s Scala is different, and we spend time arguing about this while people leaves the community. We need to find a way, and only the community can do that, no one can tell us, no other community can offer us the solution. Ruby found a way to solve this issue and developed common idioms, we can too. Ruby spent time where people was reading each other’s useful code (business code, not library code), which helps spreading knowledge.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You should approach code with humility and respect for the reader. Be a teacher. For example: always include imports on your code examples and be explicit on the imports you use (not just ._). Give context.&lt;&#x2F;p&gt;
&lt;p&gt;Beware symbolic representations.They make things harder than necessary. Words are clearer than symbols and can be Googled, so really make sure that symbol is necessary. Naming in scala is a very strong asset, we should use this power more. Naming is hard, but then if it is hard, do it more! It is hard because you need to think about the problem you solve. So do it.&lt;&#x2F;p&gt;
&lt;p&gt;Avoid words like simply, obviously, etc… They tell you are supposed to know something you may not know. As a teacher, help the students by being more clear, providing links, helping to set a context for the action. Use&lt;&#x2F;p&gt;
&lt;p&gt;Use Stack Overflow. Write blog posts. All that helps the community. We need to discuss not only the language and FP but also code style, tools, etc. Don’t just show syntax, teach me why is that option better, what is the concept behind. Make documentation better and more complete.&lt;&#x2F;p&gt;
&lt;p&gt;Accept help from newer users. Saying ‘no, that is not the right way’ to a pull request you have closed the door of the community to that person. Accept pull-requests, even more so for documentation. If it is not great, help that person to improve but don’t shut the community’s door to new joiners.&lt;&#x2F;p&gt;
&lt;p&gt;Assuming context or acting like someone is stupid for not knowing context is a bad idea. That will alienate people and hurt us as a group. Don’t define scala documentation in terms of learn you a Haskell. If you learn scala you want to learn Scala in Scala’s context, asking me to learn Haskell is not the way. Don’t ask me to learn category theory to write a useful business application. Give me the context I need to do what I want.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, publish boring Scala code that teaches business domain and how to build useful things to the community. Use that hashtag  #blueSkyScala to spread that knowledge to the community.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;functional-patterns-for-fp-beginners&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#functional-patterns-for-fp-beginners&quot; aria-label=&quot;Anchor link for: functional-patterns-for-fp-beginners&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Functional Patterns for FP beginners&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;clementd&quot;&gt;Clément Delafargue&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;(Note: you should watch the video once released to see more detailed examples on the concepts)&lt;&#x2F;p&gt;
&lt;p&gt;Functional programmer, day to day work with Javascript, but what I learned from Scala helped to write better JS. This talk is about simple patterns for FP. Not common abstractions like Functors or Monads, no Category Theory, but the tools we can use to build these abstractions. This is a way (of many possible) to do these things. Customise it to your needs.&lt;&#x2F;p&gt;
&lt;p&gt;Scala documentation in FP refers mostly to Haskell documentation, but if you don’t know Haskell that is a problem. Here we want to avoid that and focus on common FP patterns.&lt;&#x2F;p&gt;
&lt;p&gt;FP (functional programming) being ‘programming with values’, where everything is an expression and you tweak values to get to the desired result. For example &lt;code&gt;if&lt;&#x2F;code&gt; is not a block anymore, is an expression that returns a value. Pattern match is not a substitute for switch, is a way to produce a value.&lt;&#x2F;p&gt;
&lt;p&gt;We have Typed FP in Scala. All your expressions have types and you can type check the results, letting the compiler check the control flow and ensure correctness.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;algebraic-data-types-adt&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#algebraic-data-types-adt&quot; aria-label=&quot;Anchor link for: algebraic-data-types-adt&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Algebraic data types (ADT)&lt;&#x2F;h2&gt;
&lt;p&gt;We use Algebraic Design, where you start with values, combine values and get desired values. Your workflow is data driven. So how do we model the data? Via Algebraic data types (ADT).&lt;&#x2F;p&gt;
&lt;p&gt;Algebraic because they have two properties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Product types: compound type created by combining two or more types. Example: Tuple; case class User(name: String, age: Int)&lt;&#x2F;li&gt;
&lt;li&gt;Sum types (or Co-products): a simple example is a Json value, which can be either a string, object, array or number. A Sum type is a group of values. In Scala this is implemented via a &lt;code&gt;sealed trait&lt;&#x2F;code&gt; and we use pattern matching to work with them (deconstruct and inspect structure). Example:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sealed trait JsonElem
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case classe JsonBoolean extends JsonElem
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case classe JsonNumber extends JsonElem
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pattern matching raises compiler warnings if you forget a member of the Sum, which is handy. In Scala you can also combine Sum types to share elements across types. An example is Json is ‘root elements’ or Json values (which can be only object or array) vs all possible Json elements.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sealed trait JsonElem
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sealed trait JsonValue
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case classe JsonBoolean extends JsonElem
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case classe JsonNumber extends JsonElem
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case classe JsonObject extends JsonElem with JsonValue
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case classe JsonArray extends JsonElem with JsonValue
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;OOP makes it easy to add cases, while FP makes it easy to add functions. Compiler helps in both cases, but there is a trade-off for the developer. Thankfully in Scala you can choose the way you want to implement things as it gives both options.&lt;&#x2F;p&gt;
&lt;p&gt;Should you hand roll your own ADT or use generic types (like tuples or Either)? ADT are preferred unless you are deconstructing the result right away, as when the application grows your own ADT will help you more (compiler works for you).&lt;&#x2F;p&gt;
&lt;p&gt;Sum and Product types keep properties of mathematical sum and product, like associativity, exponentials and factorisation. We have neutral value (Unit). For example:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;A * 1  =&amp;gt; A  and  (A, Unit) =&amp;gt; A
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;A + 0  =&amp;gt; A  and  A | Unit =&amp;gt; A
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(User(&amp;quot;Me&amp;quot;, 27), Pet(&amp;quot;cat&amp;quot;))  and  UserWithPet(&amp;quot;Me&amp;quot;, 27, &amp;quot;cat&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;&#x2F; more examples in the video, watch it
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These are equivalent but one gives more information via types:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sealed trait X
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case class Bad(v: String) extends X
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case class Good(v: String) extends X
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case class Y(v: String, isGood: Boolean)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Please void booleans in ADT, you want to use the types to provide information. Types make you more precise and allow compiler to type check.&lt;&#x2F;p&gt;
&lt;p&gt;ADT are used to do Domain Driven Design, where you observe your data and build domain based on that. Much better than POJOs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;programming-with-contextualised-values&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#programming-with-contextualised-values&quot; aria-label=&quot;Anchor link for: programming-with-contextualised-values&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Programming with Contextualised Values&lt;&#x2F;h2&gt;
&lt;p&gt;We can program expressing into types if a computation failed, is asynchronous, etc.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;error-handling&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#error-handling&quot; aria-label=&quot;Anchor link for: error-handling&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Error handling&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Option&lt;&#x2F;code&gt; type is useful when only one thing can go wrong. For example when you parse String to Integer, there is no need of extra precision. It is simple to use, but restricted, if many things can go wrong you are losing information.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Either&lt;&#x2F;code&gt; is a Sum type (Left -&amp;gt; Error, Right -&amp;gt; value) which allows you to handle several errors cases. Please use ADT to describe errors as Strings provide less information on the error type. With ADT you can handle all error cases. Beware &lt;code&gt;Either&lt;&#x2F;code&gt; is not biased in Scala and doesn’t work too well with type inference. You can use &lt;code&gt;Disjunction&lt;&#x2F;code&gt; from Scalaz which behaves better and it’s biased (defaults to Right and provides flatMap operation to use inside a for-comprehension).&lt;&#x2F;p&gt;
&lt;p&gt;If chained, both &lt;code&gt;Either&lt;&#x2F;code&gt; and &lt;code&gt;Disjunction&lt;&#x2F;code&gt; fail on the first error. Sometimes you want to accumulate errors, then you should use &lt;code&gt;Validation&lt;&#x2F;code&gt; from Scalaz. The error list is a &lt;code&gt;NonEmptyList&lt;&#x2F;code&gt; to ensure we have error messages on failure.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes you want to accumulate errors, some times you want to fail on first error. Don’t flatten your errors, decide what is what you want.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;extend-types&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#extend-types&quot; aria-label=&quot;Anchor link for: extend-types&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Extend types&lt;&#x2F;h3&gt;
&lt;p&gt;Type &lt;code&gt;Monoid&lt;&#x2F;code&gt; allows you to combine 2 values and provides a neutral element. With subclassing you can’t declare a Zero element or extend Standard library classes (they are final). The workaround is to use &lt;code&gt;traits&lt;&#x2F;code&gt; that provide the desired behaviour and that you pass as additional parameter to functions.&lt;&#x2F;p&gt;
&lt;p&gt;To avoid the work of explicitly passing that new type as a parameter, you declare the new type as implicit so the compiler autowires the proper implementation. Just be careful with Typeclass convergence where a type could have multiple implementations of the same behaviours, which causes problems.&lt;&#x2F;p&gt;
&lt;p&gt;Simulacrum library helps you creating typeclasses and boilerplate for these types.&lt;&#x2F;p&gt;
&lt;p&gt;(see examples from the talk when the video is published)&lt;&#x2F;p&gt;
&lt;p&gt;Recommended to read Cats code as it is simple code and will help you understand.&lt;&#x2F;p&gt;
&lt;p&gt;Final tips as we are running out of time:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use property testing for everything&lt;&#x2F;li&gt;
&lt;li&gt;Separate effects from logic (Free Monads?)&lt;&#x2F;li&gt;
&lt;li&gt;Read FP in Scala book&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;building-a-cqrs-application-using-the-scala-type-system-and-akka&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#building-a-cqrs-application-using-the-scala-type-system-and-akka&quot; aria-label=&quot;Anchor link for: building-a-cqrs-application-using-the-scala-type-system-and-akka&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Building a CQRS application using the Scala Type System and Akka&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;renatocaval&quot;&gt;Renato Cavalcanti&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Content of talk comes from current work done by Renato for the Belgium Government, so real world problems and lessons.&lt;&#x2F;p&gt;
&lt;p&gt;CQRS: the idea behind is to have 2 objects, one which accepts commands and produces events, another object which receives the events and generates views on the model. If you don’t use event sourcing you need to produce event and save both write and read model in same transaction, otherwise you will lose event and data. If the commit fails, you have a problem. That is why event sourcing is important, as events can be stored and replayed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;command&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#command&quot; aria-label=&quot;Anchor link for: command&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Command&lt;&#x2F;h2&gt;
&lt;p&gt;Replaying events is very powerful, as you can use the stored events from production in a test environment to check all your components work as expected and produce the desired results. Facilitates verification of code.&lt;&#x2F;p&gt;
&lt;p&gt;The talk will show how to use CQRS in Akka, please watch video for full code examples. The examples uses mostly Akka-Http and Akka-Stream, two solutions for pretty well defined domains that help building the solution. The problem with Akka is that Akka is in fact a function to =&amp;gt; Any, which means you lose type safety and has its own problems.&lt;&#x2F;p&gt;
&lt;p&gt;The solution is to build something on top of Akka that isolates you from these issue. You find the building blocks of a CQRS system, following DDD: &lt;code&gt;DomainCommand&lt;&#x2F;code&gt;, &lt;code&gt;DomainEvent&lt;&#x2F;code&gt; and &lt;code&gt;Aggregate&lt;&#x2F;code&gt;. These are traits that help you define your building blocks.
We also define some functions to validate events (which return a Future) and to construct Aggregates from DomainEvents.&lt;&#x2F;p&gt;
&lt;p&gt;That solved, we have another issue to tackle. We need to persist the events, which we can do via Akka Persistence. We don’t store the message received in the actor, but the event generated as reaction to that message. If an Aggregate (implemented as an actor) is restarted, it can recover its status from reading the chain of events in the event-store.&lt;&#x2F;p&gt;
&lt;p&gt;But for all this to work we need a Protocol, a set of command and events for a given Aggregate. We also define the Behaviour (mapping between commands and events). We can create a DSL to facilitate generating Behaviours for an Aggregate.&lt;&#x2F;p&gt;
&lt;p&gt;[Renato now shows code showcases the implementation of a Protocol, the corresponding Behaviour DSL and an Aggregate. Please watch video for more details]&lt;&#x2F;p&gt;
&lt;p&gt;If I have Aggregate, Protocol and Behaviour then I can create an AggregateManager, an Actor, that creates AggregateActors and manages its life-cycle. Your AggregateService is fully typed, via the protocol, and the Manager abstracts the Akka details from you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;query&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#query&quot; aria-label=&quot;Anchor link for: query&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Query&lt;&#x2F;h2&gt;
&lt;p&gt;The Query side is about reading the events and producing Views on the data. We use Akka Persistence Query, an experimental feature. An actor generates a Projection from the events, so we don’t need to recalculate the status every time (snapshot-style). Each projection has an id to identify it and provide versioning. The actor doesn’t accept new events while generating a Projection, only after it has finished.&lt;&#x2F;p&gt;
&lt;p&gt;[Renato now shows code of the Query part of the system]&lt;&#x2F;p&gt;
&lt;p&gt;The Projection object is not typed, as usually you handle multiple events in a single projection. A future improvement is to strongly type projections, but not there yet. A Projection also has more data than the Aggregate stores, as there may be inferred data that is valuable for the business when viewing data, but we don’t need to store explicitly.&lt;&#x2F;p&gt;
&lt;p&gt;The DSL used by Renato also provides methods to &lt;code&gt;watch&lt;&#x2F;code&gt; a Projection, so we can detect events and, for example, wait until all events required are received before generating a projection result.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;takeways&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#takeways&quot; aria-label=&quot;Anchor link for: takeways&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Takeways&lt;&#x2F;h2&gt;
&lt;p&gt;Given a Protocol, Behaviour and Aggregate then you can have an actor that understand the life-cycle and a fully typed AggregateService.&lt;&#x2F;p&gt;
&lt;p&gt;Command validations can usually be asynchronous, but events must be pure and always succeed.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;keynote-without-resilience-nothing-else-matters&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#keynote-without-resilience-nothing-else-matters&quot; aria-label=&quot;Anchor link for: keynote-without-resilience-nothing-else-matters&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Keynote: Without Resilience, Nothing Else Matters&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jboner&quot;&gt;Jonas Bonér&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If your application is not available, doing something useful, nothing else matters: quality, speed, etc.&lt;&#x2F;p&gt;
&lt;p&gt;“It isn’t about how hard you hit, is about how hard can you be hit and keep moving forward. […] That’s how winning is done.” (from Rocky Movie)&lt;&#x2F;p&gt;
&lt;p&gt;Fault tolerance is not enough. Resilience is beyond fault tolerance, and it’s all that matters. Resilience is the ability to spring back into shape, to recover quickly from difficulties. Software today can be incredibly complex, and we need to understand resilience in the context of these complex systems.&lt;&#x2F;p&gt;
&lt;p&gt;A complicated system has multiple small parts that interact to do something. It can be understood, although it is hard. A complex system is made of many similarly interacting parts with simple rules (ala Game of Life). Those rules define emerging properties which are impossible to understand. You can understand individual rules, but not the full interactions and outcomes. Complicated is not the same a Complex.&lt;&#x2F;p&gt;
&lt;p&gt;Complex systems run in degraded mode. Complex systems run as broken systems. In a Complex system there is something failing somewhere, always! And humans make things worse, as complex systems are counterintuitive and when we use intuition we usually end up worsening the existing issues.&lt;&#x2F;p&gt;
&lt;p&gt;Complex systems operate at the edge of failure. There is the economic failure boundary, where you can run out of business. There is the unacceptable workload boundary where you can’t cope with the work. There is the accident boundary, when an undefined event causes us to fail. The operating point moves between these boundaries, and if it crosses one of them we fail.&lt;&#x2F;p&gt;
&lt;p&gt;This means we have 3 pressures on the operating point. Management tries to minimise economic failure, workload tends to least effort, and as a result we are pushing the point towards the accident boundary which is undefined. We try to counteract with tools, systems, but this keeps happening as we can’t understand all implications. The only solution is to add an error margin to protect us from failure, so when we get into dangerous territory we can act before we fail.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that we don’t know much, if anything, about the failure boundary so it is hard to define a proper error boundary. And we keep pushing it closer to the failure boundary as the system looks stable to us, until the point where the boundary is not helping anymore and we fail.&lt;&#x2F;p&gt;
&lt;p&gt;We must embrace failure. We know complex systems always work as broken system, so we need to accept failure as normality. We must understand that resilience is by design, it can’t be bolted in afterwards.&lt;&#x2F;p&gt;
&lt;p&gt;“In the animal kingdom simplicity leads to complexity which leads to resilience”. Complexity may help building resilience. Another example on how complexity builds resilience is how the current world protects us: it feeds us, give sus shelter, etc. And it is very complex. So we can learn about resilience in both biological and social systems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Feature diversity and redundancy&lt;&#x2F;li&gt;
&lt;li&gt;Interconnected network structure&lt;&#x2F;li&gt;
&lt;li&gt;Wide distribution&lt;&#x2F;li&gt;
&lt;li&gt;Capacity to self-adapt and self-organise&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;How does this apply to computer systems? We need to change the way we manage failure. Failure is natural and expected. One way: Let it crash, like Erlang does.&lt;&#x2F;p&gt;
&lt;p&gt;So we have Crash Only software (name of a paper). Stop is equal to crash safely. Start is equal to recover fast from a crash. We can apply this recursively and turn the big sledgehammer into a scalpel to tolerate failures at many levels. It is recommended to read the paper.&lt;&#x2F;p&gt;
&lt;p&gt;We need a way out of the ‘State Tar Pit’ (another paper). A lot of failure is related to data (partial data, wrong data, etc). We have input data, provided by customers, and derived data, data we compute from the input data. The critical one is input data, that we need to keep and take care of to avoid annoying users.&lt;&#x2F;p&gt;
&lt;p&gt;In the traditional way of managing state a error at the end of an input path will cause all the path to fail and we will lose the input data, which is an utterly broken way to manage this. We react to this by abusing defensive programming, adding try-catch blocks everywhere, etc.&lt;&#x2F;p&gt;
&lt;p&gt;“Accidents come from relationships, not broken parts.” A Sane failure model means that Failures need to be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Contained to avoid cascading failures&lt;&#x2F;li&gt;
&lt;li&gt;Reified as messages&lt;&#x2F;li&gt;
&lt;li&gt;Signalled asynchronously&lt;&#x2F;li&gt;
&lt;li&gt;Observed by at least 1 actor, up to N observers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Basically, the bulkhead pattern used by ship industry. If a compartment breaks the ship is not affected. But we can still do better, by adding Supervision: observe and manage failures from a healthy context. Components that fail should notify the Supervisor so something can be done about it. An ‘Onion Later State &amp;amp; Failure management’ or ‘Error Kernel pattern’. The kernel delegates all work and supervises so the task is performed correctly, managing any errors as necessary. We apply this recursively, with a layer managing failures of the underlying level.&lt;&#x2F;p&gt;
&lt;p&gt;We can’t put all eggs in same basket. We need to maintain diversity and redundancy. Servers crash, AWS goes down. We need multiple servers, even multiple data centers, which means running a distributed system. And they should be decoupled in time (to enable concurrency) and space (enables mobility of nodes). This gives a very solid base for resilience.&lt;&#x2F;p&gt;
&lt;p&gt;We need to decompose systems using consistency boundaries. We need to think about isolation of components. We need to start with the weakest consistency guarantees we can, and add stronger ones as we go if we need them. The less ACID and coordination you need, the better. Within the boundary we can have strong consistency (example: actors are single threaded with an inbox). Between boundaries it is a ‘zoo’, all bets are off, we need to manage failure as described above. But that is good, as weak coupling and other properties of the ‘zoo’ enhance our resilience.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: strong consistency is the wrong default, it adds too strong coupling, but what we need is to decompose systems and create safe islands (consistency boundaries).&lt;&#x2F;p&gt;
&lt;p&gt;To conclude, let’s talk about resilient protocols, the way to manage the ‘zoo’ outside consistency boundaries. They depends on asynchronous communication and eventual consistency. They must embrace ACID 2.0 (Associative, Commutative, Idempotent, Distributed); they must be tolerant to message loss, reordering, and duplication.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: Complex systems run as borken systems. Something is always failing. Resilience is by design. Without resilience, nothing else matters.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;a-purely-functional-approach-to-building-large-applications&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#a-purely-functional-approach-to-building-large-applications&quot; aria-label=&quot;Anchor link for: a-purely-functional-approach-to-building-large-applications&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
A purely functional approach to building large applications&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;noelmarkham&quot;&gt;Noel Markham&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This talks follow a bit on his talk last year about ‘Introduction to Scalaz’. We will look at tools and techniques and how to do things in a more purely functional manner. (Talk will be heavy on screen-coding, so please watch the video! I will try to summarise the concepts explained, but without seeing the code it may not make too much sense)&lt;&#x2F;p&gt;
&lt;p&gt;Start by breaking rules and using &lt;code&gt;import scalaz._; import Scalaz._&lt;&#x2F;code&gt; and other generic imports. Sorry Jessica Kerr ;)&lt;&#x2F;p&gt;
&lt;p&gt;Starting point are a couple of API which are not too flexible but we can’t modify, they are external API.&lt;&#x2F;p&gt;
&lt;p&gt;First concept: let’s talk about &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Markov_chain&quot;&gt;&lt;code&gt;Markov Chains&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. We want to build a structure to, given 2 words, try to guess what would be the next word and a function that would use that to generate possible sentences. We could use a method that returns a &lt;code&gt;Future&lt;&#x2F;code&gt;, and use &lt;code&gt;Await.result&lt;&#x2F;code&gt; over the external API and then use the result to the generator. We can improve that by using a for-comprehension.&lt;&#x2F;p&gt;
&lt;p&gt;We can improve the code more by extracting the configuration. Side concept: we can compose functions (f andThen g), but a function can be considered a Functor, so it can be mapped over! So we can group all our configuration into a case class and create functions &lt;code&gt;Config =&amp;gt; String&lt;&#x2F;code&gt; or &lt;code&gt;Config =&amp;gt; Int&lt;&#x2F;code&gt; to extract config. And we can group those functions to extract several values at once. We can go further and use functions as Monads to extract config (via the functions) using a for-comprehension.&lt;&#x2F;p&gt;
&lt;p&gt;Given all we did above, we can create functions that given a config (as a parameter) return a function that will return what we want (tweets, other data). We can do the same for the string generator, to make it depend on config. And then we can use both in a for-comprehension as functions are Monads, although we still have the Future type around.&lt;&#x2F;p&gt;
&lt;p&gt;We can tackle that Future type by wrapping the function with a Reader type. Then we need to understand the concept of Monad transformers, which allows us to &lt;em&gt;unwrap&lt;&#x2F;em&gt; a monad to interact with it’s element. For example, given a &lt;code&gt;Future[Option[Int]]&lt;&#x2F;code&gt; we can interact with the &lt;code&gt;Option&lt;&#x2F;code&gt; directly, without having to call a method in &lt;code&gt;Future&lt;&#x2F;code&gt;. In Scalaz that would be &lt;code&gt;OptionT[Future, Int]&lt;&#x2F;code&gt;. Given Monad transformers, we can then work with &lt;code&gt;ReaderT&lt;&#x2F;code&gt; which will allow us to ignore the Future in our methods until we really want to. This gives us a &lt;code&gt;ReaderT[Future, String, Int]&lt;&#x2F;code&gt; which allows us to work with all the elements of our computation independently (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kleisli_category&quot;&gt;kleisli&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Going back to our example, we can then change our functions to become &lt;code&gt;kleisli&lt;&#x2F;code&gt; for &lt;code&gt;ReaderT[Future, Config, List[Tweet]]&lt;&#x2F;code&gt; or &lt;code&gt;ReaderT[Future, Config, String]&lt;&#x2F;code&gt;. We have separated constituent types and we can deal with each one as we need to. Which helps us produce a very sane for-comprehension, very legible and understandable. And we get as result a &lt;code&gt;Future[String]&lt;&#x2F;code&gt; but that is at the end of the calculation, so we block at a point after we defined all the task to do, decoupling task from execution.&lt;&#x2F;p&gt;
&lt;p&gt;An advantage is that this makes this code easier to test. Our methods take functions as arguments, a home-grown dependency injection system where we can plug anything we want (respecting types!) so we can test the code without interacting with 3rd party services or doing other steps of the process. No need to mock, just use simple stubs.&lt;&#x2F;p&gt;
&lt;p&gt;A suggestion to test is to use ScalaCheck. With ScalaCheck you suggest properties for your code, and the framework makes sure your properties hold by trying to find values that break them. (Also adding a dash of Shapeless, because why not). With this we can, for example, make sure our code doesn’t modify the text of the tweets in any way by default.&lt;&#x2F;p&gt;
&lt;p&gt;We can still do better, let’s try to abstract over ReaderT. Right now we are only using ReaderT as Mond, so we may as well replace it by &lt;code&gt;M[List[Tweet]]&lt;&#x2F;code&gt; and &lt;code&gt;M[String]&lt;&#x2F;code&gt; on our functions. Our for-comprehension doesn’t change, but it has other benefits. For example, our test code can be simpler as we can use the &lt;code&gt;Id&lt;&#x2F;code&gt; (identity) monad to generate values.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s say we now want to add logging to it. How can we tackle this? Let’s assume we are given a method &lt;code&gt;log&lt;&#x2F;code&gt; that returns a &lt;code&gt;Future&lt;&#x2F;code&gt;. We can integrate this as a parameter &lt;code&gt;String =&amp;gt; M[Unit]&lt;&#x2F;code&gt; and we are done. Except we don’t like side-effects and &lt;code&gt;Unit&lt;&#x2F;code&gt;. We can wrap the log in a &lt;code&gt;Writer&lt;&#x2F;code&gt; which allows us to do an operation and do an additional operation into a secondary store (basically, a log). With this we replace our &lt;code&gt;Reader&lt;&#x2F;code&gt; by &lt;code&gt;Writer&lt;&#x2F;code&gt; to integrate the logging, but both are Monads so the signatures and for-comprehension don’t change, only implementation details. (Note: I may have missed some detail in that last part! Check the video.)&lt;&#x2F;p&gt;
&lt;p&gt;After all this process, we found nice ways to provide configuration, wire functions (akin to dependency injection) and abstract over Monads, all by leveraging the power of libraries like Scalaz, Shapeless, and ScalaCheck. And by using the libraries you reduce boilerplate and make code easier to understand.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Important Note&lt;&#x2F;strong&gt;: you really need to see the slides with the code to follow the talk fully, very recommended talk if you are interested in FP.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;exploiting-dependent-types-for-safer-faster-code&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#exploiting-dependent-types-for-safer-faster-code&quot; aria-label=&quot;Anchor link for: exploiting-dependent-types-for-safer-faster-code&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Exploiting Dependent Types for Safer, Faster Code&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;propensive&quot;&gt;Jon Pretty&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is an advanced feature of Scala’s type system. Not difficult to use, but writing libraries that use them can be complex.&lt;&#x2F;p&gt;
&lt;p&gt;The ‘Slippery road’ represent a dynamic language, where you can’t control the types and you have no guidance. Throughout the talk an example library will be used: Raptured command-line.&lt;&#x2F;p&gt;
&lt;p&gt;Example: a bash command&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ls -lah --sort time --width=120
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We would like to convert that to Scala. We can try to parse the arguments into Scala values. We may even specify a type parameter so the parsing doesn’t return a String but an Int. We may want to use several representations for a value (-s, –size). All this an be abstracted further into a value of type &lt;code&gt;Param[Int](&#x27;s&#x27;, &quot;size&quot;)&lt;&#x2F;code&gt;. Nothing too exciting.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s stash that for a moment and talk about Rapture I18N, a library to support I18N Strings in apps. The standard solution is to use string bundles, one per language, managed separately from the code itself. But what if you forget to add a translation for a sentence in a language? You get a runtime error. Rapture I18N embeds the languages in the source and makes the compiler check for completeness.&lt;&#x2F;p&gt;
&lt;p&gt;(Some examples of Rapture I18N follow)&lt;&#x2F;p&gt;
&lt;p&gt;A type behind Rapture I18N is:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;class IString[L1] {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	def |[L2](that: IString[L2]): IString[L1 with L2] = ???
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That gives us a type intersection, a type per language, and we track the contents of an IString as if it was a map of language type to string. The intersection type &lt;code&gt;En with De&lt;&#x2F;code&gt; means the type is both an &lt;code&gt;En&lt;&#x2F;code&gt; and a &lt;code&gt;De&lt;&#x2F;code&gt;. In Scala we can create an intersection between any two types, for example: &lt;code&gt;Int with String&lt;&#x2F;code&gt;. A type can exists even if we can’t have instance of it.&lt;&#x2F;p&gt;
&lt;p&gt;These kind of types are called &lt;code&gt;phantom types&lt;&#x2F;code&gt; which exist purely for compiler benefit, they will never be instantiated. After compilation they get erased, they don’t exist in bytecode (type erasure). But the compiler can use them to enforce constraints on other types and to drive implicit resolution.&lt;&#x2F;p&gt;
&lt;p&gt;For example we can use the constraint enforce to make sure &lt;code&gt;sayHi[Ru]&lt;&#x2F;code&gt; will fail compilation if we didn’t define a &lt;code&gt;Ru&lt;&#x2F;code&gt; version of Hi. We can do that by requiring a supertype of the phantom type &lt;code&gt;V &amp;gt;:T&lt;&#x2F;code&gt;. Given &lt;code&gt;En with De&lt;&#x2F;code&gt;, &lt;code&gt;En&lt;&#x2F;code&gt; is a supertype and will compile, but &lt;code&gt;Ru&lt;&#x2F;code&gt; is not a supertype and it will fail compilation.&lt;&#x2F;p&gt;
&lt;p&gt;As all accesses are checked at compile time, we know they are safe operations and total functions, which we know won’t fail. But we don’t know which times we are going to access at compile time, we will know at runtime time. How can we convert the string indicating language from the user into a type? What if they send a request for a language that doesn’t exist?&lt;&#x2F;p&gt;
&lt;p&gt;We can write parsers like &lt;code&gt;(en | de).parse(inputLang)&lt;&#x2F;code&gt; which becomes the only point of failure at runtime. We can’t avoid that, but all the rest of the code has been checked at compile time, so we know we can handle the exceptional cases in there and do not worry anymore about I18N types. Narrowing failure points is good for programming.&lt;&#x2F;p&gt;
&lt;p&gt;(Quick demo on Rapture I18N follows)&lt;&#x2F;p&gt;
&lt;p&gt;After the demo, back to the Command Line problem stated at the start. We want to enforce some constrains on the parameters passed to a command line instruction. We can do it naively via pattern matching and for comprehension, but could do better and try to reduce this to a single point of failure as we did with the I18n library.&lt;&#x2F;p&gt;
&lt;p&gt;We potentially have a complex structure of conjunctions and disjunctions over parameter preferences and alternative representations. We can represent them in Scala types, so &lt;code&gt;A &amp;amp; B &amp;amp; C&lt;&#x2F;code&gt; becomes &lt;code&gt;Product[A with B with C]&lt;&#x2F;code&gt;. &lt;code&gt;A | B | C&lt;&#x2F;code&gt; becomes &lt;code&gt;CoProduct[A with B with C]&lt;&#x2F;code&gt;. And then we define combinators for &lt;code&gt;|&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; (see slides for definitions, basically pattern matching grouping parameters into &lt;code&gt;Product&lt;&#x2F;code&gt; or &lt;code&gt;CoProduct&lt;&#x2F;code&gt; instances). The result will be a complex type built following the defined combinations.&lt;&#x2F;p&gt;
&lt;p&gt;With these definitions we can do as we did with I18N, reducing the point of failure to &lt;code&gt;parse&lt;&#x2F;code&gt; (Note: you will need to see the slides&#x2F;video to follow the code that generates all this, can’t reproduce in this summary).&lt;&#x2F;p&gt;
&lt;p&gt;In summary: multiple failure points increase the burden on error handling. Instead we want to handle all failures together, up-front. Use total functions and many more operations are now dafe, with more code becoming free of distracting error handling. We have reduced the surface of failure.&lt;&#x2F;p&gt;
&lt;p&gt;Predictions: dependent types will be increasingly important in the future of typed languages. Work will be around make it easier to write. In Scala, error messages CAN be improved, we can have better tooling to manage them. Hopefully we will have more code that consists entirely of total functions, with very reduce surface for error. Lastly, this additional information provided by the types can offer opportunities to improve performance.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;lighting-talks-track-1&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#lighting-talks-track-1&quot; aria-label=&quot;Anchor link for: lighting-talks-track-1&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Lighting Talks - Track 1&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ozgus4000&quot;&gt;Andrew (Gus) Gustafson&lt;&#x2F;a&gt; - Making your life easier with macros&lt;&#x2F;p&gt;
&lt;p&gt;Problem: write out a class using snake case JSON field names. By default you need to override a method provided by some JSON library to provide what you want. Or for example, if you want to convert an ADT to JSON, to process the parent sealed trait you need a (potentially big) pattern match for every possible child.&lt;&#x2F;p&gt;
&lt;p&gt;Macros are a simple way to generate this ‘boilerplate’ code, following a DRY principle. Write macro once, apply everywhere, without duplicating code.&lt;&#x2F;p&gt;
&lt;p&gt;Tips and Tricks for Macros:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;println&lt;&#x2F;code&gt; is your friend. Auto-complete too. Keep typing until something good happens&lt;&#x2F;li&gt;
&lt;li&gt;macro code needs to be in a separate codebase than your domain model&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;(Code example follows)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lighting-talks-track-1-1&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#lighting-talks-track-1-1&quot; aria-label=&quot;Anchor link for: lighting-talks-track-1-1&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Lighting Talks - Track 1&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jamiepullar&quot;&gt;Jamie Pullar&lt;&#x2F;a&gt; - Handling Partially Dynamic Data&lt;&#x2F;p&gt;
&lt;p&gt;Subtitle: exploring a DSL approach to lenses with Jsentric and Dsentric.&lt;&#x2F;p&gt;
&lt;p&gt;Examples of partially dynamic data:  given a JSON object we validate only fields of interest in the server. Or microservices supporting arbitrary content structures, they only care about specific fields and ignore the rest of the data.&lt;&#x2F;p&gt;
&lt;p&gt;The first challenge: how do we deserialise data to work with it? Use type safe structures (ADT vs Map[String, Any]).&lt;&#x2F;p&gt;
&lt;p&gt;How to extract the data we want? We can use Lenses to extract the fields we want. Lenses allow us to target parts of the data and operate with it. The issue is that it can become a bit unwieldy code wise.&lt;&#x2F;p&gt;
&lt;p&gt;To solve code verbosity we introduce a Contract structure, which defines the structure we care about. Then we can use it to pattern match over the input data (for example JSON) and work with the relevant values, while not relevant data is silently ignored. The Contract allows us to read, modify, and delete the relevant values. Using Shapeless we can improve usability by providing helpers which reduce boilerplate even more.&lt;&#x2F;p&gt;
&lt;p&gt;We can extend the Contract to add validations, as precise as we need (example: age &amp;gt; 0 and &amp;lt; 150). These validations can be type safe. Further extension allows us to build querying over the structures, so we can filter the data. All this is possible because the Contract is abstracting the data structure from our business logic.&lt;&#x2F;p&gt;
&lt;p&gt;Dsentric is custom contract configuration with Monocle.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lighting-talks-track-1-2&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#lighting-talks-track-1-2&quot; aria-label=&quot;Anchor link for: lighting-talks-track-1-2&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Lighting Talks - Track 1&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;leakimav&quot;&gt;Mikael Valot&lt;&#x2F;a&gt; - Flexible data structures in Scala&lt;&#x2F;p&gt;
&lt;p&gt;(Talk heavy on code examples, check slides for more clarity)&lt;&#x2F;p&gt;
&lt;p&gt;Project &lt;code&gt;Strucs&lt;&#x2F;code&gt;. Case classes are not composable. How can I define common fields only once without using Shapeless records?&lt;&#x2F;p&gt;
&lt;p&gt;Structs enables you to concatenate case classes via &lt;code&gt;+&lt;&#x2F;code&gt; operator to generate new types. So you can create one case class per each field, and concatenate to generate a composite type. Compiler checks to avoid field duplication. You can compose these struct types, so having a &lt;code&gt;Person&lt;&#x2F;code&gt; and an &lt;code&gt;Address&lt;&#x2F;code&gt; you can then have a &lt;code&gt;Person with Address&lt;&#x2F;code&gt; that includes values of both.&lt;&#x2F;p&gt;
&lt;p&gt;These compositions can be used in structural types, so you can define a type parameter &lt;code&gt;T &amp;lt;: Age with Name&lt;&#x2F;code&gt; to ensure type safety of your operations.&lt;&#x2F;p&gt;
&lt;p&gt;Under the hood, a Struct is a &lt;code&gt;Struct[F](private val fields: Map[StructKey, Any])&lt;&#x2F;code&gt;, where all access to the map is via parametrised types, for example &lt;code&gt;get[T](implicit k: StructKeyProvider[T], ev: F &amp;lt;:&amp;lt; T): T&lt;&#x2F;code&gt;. This should avoid the issues usually related to using &lt;code&gt;Any&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Struct enables us to provide automatic JSON encode&#x2F;decode via macros.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lighting-talks-track-1-3&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#lighting-talks-track-1-3&quot; aria-label=&quot;Anchor link for: lighting-talks-track-1-3&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Lighting Talks - Track 1&lt;&#x2F;h1&gt;
&lt;p&gt;By &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;nick_engb&quot;&gt;Nick Pollard&lt;&#x2F;a&gt; - More Typing, Less Typing - Driving behaviour with types&lt;&#x2F;p&gt;
&lt;p&gt;Scala has a very powerful type system. What is it good for? Usually we though about Validation, what about generating behaviour? We do that all the time, for example when we overload methods or we use Typeclasses.&lt;&#x2F;p&gt;
&lt;p&gt;Typeclasses revisited: interface across type, common capability but varied behaviour by type. Each instance provides behaviour, implemented using &lt;code&gt;trait&lt;&#x2F;code&gt; and used via &lt;code&gt;implicit&lt;&#x2F;code&gt;. Instances are defined as implicit values and def. Implicit def can take another implicit as parameter.&lt;&#x2F;p&gt;
&lt;p&gt;When searching for an implicit the compiler can chain successive implicits if it will produce the required type.&lt;&#x2F;p&gt;
&lt;p&gt;How can we handle more complex types via implicits? We need an algebra for types. An algebra is just a group of objects and operators you can use on those objects. Like numbers and mathematical operators, or types and type operators.&lt;&#x2F;p&gt;
&lt;p&gt;How do we operate on types? What is a type? A type can be seen as a set of values. Example: &lt;code&gt;Boolean&lt;&#x2F;code&gt; is &lt;code&gt;Set(true, false)&lt;&#x2F;code&gt;. &lt;code&gt;Char&lt;&#x2F;code&gt; is &lt;code&gt;Set(&#x27;a&#x27;, &#x27;b&#x27;, ...)&lt;&#x2F;code&gt;. So we can use Set operators, of which we care about two, &lt;code&gt;product&lt;&#x2F;code&gt; (cartesian product) and &lt;code&gt;coproduct&lt;&#x2F;code&gt; (also named disjoint union, like Scalaz &#x2F;, or sum).&lt;&#x2F;p&gt;
&lt;p&gt;With this we can express types in the terms of operators. &lt;code&gt;Option[A] = () \&#x2F; A&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If we can model types as operators in simple types, we can construct typeclasses from that. This is what Shapeless does for this.&lt;&#x2F;p&gt;
&lt;p&gt;Shapeless uses HList (heterogeneous lists). Equivalent to nested tuples &lt;code&gt;(A, (B, C))&lt;&#x2F;code&gt;. The base case is HNil, we can recurse over the list until we hit HNil. Shapeless also provides CoProduct, similar to Tuples of &lt;code&gt;\&#x2F;&lt;&#x2F;code&gt; (simplifying).&lt;&#x2F;p&gt;
&lt;p&gt;How is that useful? It allows us, for example, to generate parsers for any type of case class by treating them as HList. Shapeless automatically turns ADTs into HList (it has implicits and macros to do that). This reduces boilerplate, we write a generic parser once and we can apply it to any present or future ADT we use.&lt;&#x2F;p&gt;
</content>
        <summary type="html">Scala Exchange 2015 is on! I will be updating this entry with summaries on the talks I attended. Typos a plenty, be warned, but I hope this proves useful to somebody while we wait for the videos to be made available. You can also read my summary of day two.
…</summary>
        </entry><entry xml:lang="en">
        <title>Emacs and Scala in Mac OS X Yosemite</title>
        <published>2015-09-20T00:00:00+00:00</published>
        <updated>2015-09-20T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/emacs-and-scala-in-mac-os-x-yosemite/" type="text/html"/>
        <id>https://perevillega.com/posts/emacs-and-scala-in-mac-os-x-yosemite/</id>
        
            <content type="html">&lt;p&gt;After hearing a lot about the benefits of using Emacs to code in Scala, I’ve decided to give it a go and also to document the steps to work with it, in case anyone else feels crazy enough to try this.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;why&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#why&quot; aria-label=&quot;Anchor link for: why&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Why?&lt;&#x2F;h2&gt;
&lt;p&gt;I guess first I should explain why would I use Emacs when there are products like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;idea&#x2F;?fromMenu&quot;&gt;IntelliJ IDEA&lt;&#x2F;a&gt; which provide a lot of functionality and are easy (easier?) to use. This is a personal decision, but some reasons I’ve found to try Emacs are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IDEA sometimes shows misleading errors with Scalaz. Add some EitherT or similar to your code and suddenly correct code that is built by Sbt with no complains is flagged red by IDEA. This is because they use their own compiler, and although it seems a minor issue it can become annoying (is this IDEA acting or did I break it?) and fixing it requires adding explicit type annotations to your code, which means more verbosity and less readable code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Resource efficiency. This last summer, due to me changing jobs, I had to bring back to life my 7 year old desktop with its non-ssd hard drive and only 4 Gb of ram. Trying to code in it was extremely annoying. I had only IDEA, a browser and a terminal open, but it felt clunky and focussing was hard due to constant system slowdowns. Replacing IDEA by a simple text editor helped a lot, but there was a lack of syntax highlighting and other tooling I was used to. I don’t know if&#x2F;when I may find myself in a similar situation again, so being comfortable with a leaner IDE has become relevant.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.nhs.uk&#x2F;conditions&#x2F;Repetitive-strain-injury&#x2F;Pages&#x2F;Introduction.aspx&quot;&gt;RSI&lt;&#x2F;a&gt;. Luckily I’m not suffering from it but I’m a frequent customer of physiotherapy due to heavy mouse use harming my shoulders. I’ve been told repeatedly that Emacs is a great environment to reduce these muscular issues, better than IDEA, so it’s worth the effort.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I don’t mind the new &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;company&#x2F;press&#x2F;pr_030915.html&quot;&gt;payment policy&lt;&#x2F;a&gt; of Jetbrains; I’ve been paying for my license for years and renewing for each new version, so it would make no difference to me. But the change highlights the dangers of being tied to a proprietary tool and unexpected changes to them. If we believe in the software craftsmanship movement and we care about our tools, we need full control on them.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Let’s be honest, knowing Emacs sounds cool. I may fail on the task and realise I’m not the nerd I expected to be, but it’s worth the test ;)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;environment&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#environment&quot; aria-label=&quot;Anchor link for: environment&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Environment&lt;&#x2F;h2&gt;
&lt;p&gt;I’m going to install Emacs in a MacBook Pro with Yosemite.&lt;&#x2F;p&gt;
&lt;p&gt;There are several Emacs packages you can choose from, the one I’ve been recommended is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;syl20bnr&#x2F;spacemacs&quot;&gt;Scapemacs&lt;&#x2F;a&gt; so I’ll be trying this one.&lt;&#x2F;p&gt;
&lt;p&gt;For Scala goodness I’ll use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ensime&quot;&gt;Ensime&lt;&#x2F;a&gt; and its Emacs plugin.&lt;&#x2F;p&gt;
&lt;p&gt;I won’t research any other plugins by now, geting used to Emacs is enough.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-spacemacs&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#installing-spacemacs&quot; aria-label=&quot;Anchor link for: installing-spacemacs&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Installing Spacemacs&lt;&#x2F;h2&gt;
&lt;p&gt;Spacemacs is a bundle of configuration and plugins for Emacs, as a consequence before starting you will need Emacs installed. As of today Spacemacs recommends to use the &lt;code&gt;emacs-mac-port&lt;&#x2F;code&gt; package, available in Homebrew:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	$ brew tap railwaycat&#x2F;emacsmacport
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	$ brew install emacs-mac --with-spacemacs-icon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that, it is recommended to backup your current Emacs config:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	cd ~
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	mv .emacs.d .emacs.bak
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To install Spacemacs, just clone the repo along its submodules to &lt;code&gt;~&#x2F;.emacs.d&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;syl20bnr&#x2F;spacemacs ~&#x2F;.emacs.d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once done, launch Emacs and wait for the set up to be done:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	$ emacs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;scala-and-emacs&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#scala-and-emacs&quot; aria-label=&quot;Anchor link for: scala-and-emacs&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Scala and Emacs&lt;&#x2F;h2&gt;
&lt;p&gt;Spacemacs provides integration with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ensime&quot;&gt;Ensime&lt;&#x2F;a&gt; via &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;syl20bnr&#x2F;spacemacs&#x2F;tree&#x2F;master&#x2F;contrib&#x2F;!lang&#x2F;scala&quot;&gt;this package&lt;&#x2F;a&gt;. It works as a layer, to install it just edit your &lt;code&gt;~&#x2F;.spacemacs&lt;&#x2F;code&gt; file and find &lt;code&gt;dotspacemacs-configuration-layers&lt;&#x2F;code&gt; near the top of the file. Add &lt;code&gt;scala&lt;&#x2F;code&gt; as a new layer:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	dotspacemacs-configuration-layers
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	   &amp;#39;(
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; ----------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; Example of useful layers you may want to use right away.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; Uncomment some layer names and press &amp;lt;SPC f e R&amp;gt; (Vim style) or
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; &amp;lt;M-m f e R&amp;gt; (Emacs style) to install them.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; ----------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; auto-completion
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; better-defaults
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     emacs-lisp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; git
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; markdown
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; org
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; (shell :variables
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;;        shell-default-height 30
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;;        shell-default-position &amp;#39;bottom)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     ;; syntax-checking
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     version-control
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     scala
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	     )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then restart Emacs. Next create a global &lt;code&gt;plugins.sbt&lt;&#x2F;code&gt; at &lt;code&gt;~&#x2F;.sbt&#x2F;0.13&#x2F;plugins&#x2F;plugin.sbt&lt;&#x2F;code&gt; and add to it:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	resolvers += Resolver.sonatypeRepo(&amp;quot;snapshots&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	addSbtPlugin(&amp;quot;org.ensime&amp;quot; % &amp;quot;ensime-sbt&amp;quot; % &amp;quot;0.1.5-SNAPSHOT&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run sbt once in some of your projects to download the dependency.&lt;&#x2F;p&gt;
&lt;p&gt;To work with a Scala project you will need to create a &lt;code&gt;.ensime&lt;&#x2F;code&gt; file by running&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	sbt gen-ensime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the root.  To load Ensime, type &lt;code&gt;SPC : ensime&lt;&#x2F;code&gt; and wait until the environment is configured, which may take a while the first time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-spacemacs&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#learning-spacemacs&quot; aria-label=&quot;Anchor link for: learning-spacemacs&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Learning Spacemacs&lt;&#x2F;h2&gt;
&lt;p&gt;After Emacs loads all the configuration you are welcomed by… an ugly yellow screen. Ugh. Yes, it will take a while to get used to this, no one said it would be easy ;) There are two resources I’m using to get started:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;sachachua.com&#x2F;blog&#x2F;wp-content&#x2F;uploads&#x2F;2013&#x2F;05&#x2F;How-to-Learn-Emacs-v2-Large.png&quot;&gt;How to Learn Emacs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;syl20bnr&#x2F;spacemacs#learning-spacemacs&quot;&gt;Learning Spacemacs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I started with the Evil-adapted Vimtutor to get familiar with the key bindings. Press &lt;code&gt;SPC h T&lt;&#x2F;code&gt; to launch it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-day-feelings&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#first-day-feelings&quot; aria-label=&quot;Anchor link for: first-day-feelings&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
First day feelings&lt;&#x2F;h2&gt;
&lt;p&gt;This is hard. I’m ashamed to acknowledge how long did it take me to open a file in Emacs, much less to compile it via Sbt.&lt;&#x2F;p&gt;
&lt;p&gt;I can see the benefits of learning Emacs and not having to use the mouse much, but it will take effort to get used to this and to get the ‘right’ environment setup working.&lt;&#x2F;p&gt;
</content>
        <summary type="html">After hearing a lot about the benefits of using Emacs to code in Scala, I’ve decided to give it a go and also to document the steps to work with it, in case anyone else feels crazy enough to try this.
…</summary>
        </entry><entry xml:lang="en">
        <title>Scala REPL</title>
        <published>2015-07-03T00:00:00+00:00</published>
        <updated>2015-07-03T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/scala-repl/" type="text/html"/>
        <id>https://perevillega.com/posts/scala-repl/</id>
        
            <content type="html">&lt;p&gt;One of the things people love about Scala is the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;&#x2F;a&gt;. I have to be honest;
I never paid too much attention to it as IntelliJ provides a handy &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;blog.jetbrains.com&#x2F;scala&#x2F;2014&#x2F;05&#x2F;23&#x2F;meet-the-new-scala-worksheets-in-intellij-idea&#x2F;&quot;&gt;Scala Worksheet&lt;&#x2F;a&gt;. But it is time to fix this..&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The main reason is that my old desktop started misbehaving and running IntelliJ slows it down to a crawl. While I find a suitable replacement, I had to settle with using Sublime Text 2 to toy around with some Scala code. Is at this point that my lack of knowledge of the REPL became obvious, and a hindrance. And what better way to help fix that issue than to document the relevant parts :)&lt;&#x2F;p&gt;
&lt;p&gt;Most likely you are using the new &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.typesafe.com&#x2F;community&#x2F;core-tools&#x2F;activator-and-sbt&quot;&gt;Activator&lt;&#x2F;a&gt; to generate your projects. Activator has a lot of commands:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ .&#x2F;activator
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[info] Loading project definition from &#x2F;home&#x2F;pvillega&#x2F;Dropbox&#x2F;Projectes&#x2F;scala-fp-exercises&#x2F;project
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[info] Set current project to scala-fp-exercises (in build file:&#x2F;home&#x2F;pvillega&#x2F;Dropbox&#x2F;Projectes&#x2F;scala-fp-exercises&#x2F;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; help
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  help                                    Displays this help message or prints detailed help on requested commands (run &amp;#39;help &amp;lt;command&amp;gt;&amp;#39;).
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  completions                             Displays a list of completions for the given argument string (run &amp;#39;completions &amp;lt;string&amp;gt;&amp;#39;).
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  about                                   Displays basic information about sbt and the build.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  tasks                                   Lists the tasks defined for the current project.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  settings                                Lists the settings defined for the current project.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  reload                                  (Re)loads the current project or changes to plugins project or returns from it.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  projects                                Lists the names of available projects or temporarily adds&#x2F;removes extra builds to the session.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  project                                 Displays the current project or changes to the provided `project`.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  set [every] &amp;lt;setting&amp;gt;                   Evaluates a Setting and applies it to the current project.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  session                                 Manipulates session settings.  For details, run &amp;#39;help session&amp;#39;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  inspect [uses|tree|definitions] &amp;lt;key&amp;gt;   Prints the value for &amp;#39;key&amp;#39;, the defining scope, delegates, related definitions, and dependencies.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  &amp;lt;log-level&amp;gt;                             Sets the logging level to &amp;#39;log-level&amp;#39;.  Valid levels: debug, info, warn, error
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  plugins                                 Lists currently available plugins.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  ; &amp;lt;command&amp;gt; (; &amp;lt;command&amp;gt;)*              Runs the provided semicolon-separated commands.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  ~ &amp;lt;command&amp;gt;                             Executes the specified command whenever source files change.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  last                                    Displays output from a previous command or the output from a specific task.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  last-grep                               Shows lines from the last output for &amp;#39;key&amp;#39; that match &amp;#39;pattern&amp;#39;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  export &amp;lt;tasks&amp;gt;+                         Executes tasks and displays the equivalent command lines.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  exit                                    Terminates the build.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  --&amp;lt;command&amp;gt;                             Schedules a command to run before other commands on startup.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  show &amp;lt;key&amp;gt;                              Displays the result of evaluating the setting or task associated with &amp;#39;key&amp;#39;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  all &amp;lt;task&amp;gt;+                             Executes all of the specified tasks concurrently.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;More command help available using &amp;#39;help &amp;lt;command&amp;gt;&amp;#39; for:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  !, +, ++, &amp;lt;, alias, append, apply, eval, iflast, onFailure, reboot, shell
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The snippet above only shows the most relevant ones, but there are plenty more (278 as I write this) although just a few are used very often:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; projects        # lists the projects available
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; project &amp;lt;name&amp;gt;  # changes to the given project (run will execute the selected project now)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; plugins         # lists all plugins
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; reload          # reloads all the config and plugins without leaving the session
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; run             # runs the current project
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; ~test           # runs the tests. The initial ~ means it will run them all every time a source file changes, handy for TDD
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; exit            # leaves activator
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; console         # launches Scala REPL
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see with a few commands you cover most of your development needs. But as we were talking about REPL the command I want to focus on is &lt;code&gt;console&lt;&#x2F;code&gt;, which starts a REPL in the currently selected project:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt; console
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[info] Starting scala interpreter...
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[info]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Welcome to Scala version 2.11.6 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_45).
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Type in expressions to have them evaluated.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Type :help for more information.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;scala&amp;gt; :help
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;All commands can be abbreviated, e.g., :he instead of :help.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:edit &amp;lt;id&amp;gt;|&amp;lt;line&amp;gt;        edit history
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:help [command]          print this summary or command-specific help
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:history [num]           show the history (optional num is commands to show)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:h? &amp;lt;string&amp;gt;             search the history
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:imports [name name ...] show import history, identifying sources of names
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:implicits [-v]          show the implicits in scope
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:javap &amp;lt;path|class&amp;gt;      disassemble a file or class name
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:line &amp;lt;id&amp;gt;|&amp;lt;line&amp;gt;        place line(s) at the end of history
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:load &amp;lt;path&amp;gt;             interpret lines in a file
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:paste [-raw] [path]     enter paste mode or paste a file
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:power                   enable power user mode
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:quit                    exit the interpreter
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:replay [options]        reset the repl and replay all previous commands
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:require &amp;lt;path&amp;gt;          add a jar to the classpath
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:reset [options]         reset the repl to its initial state, forgetting all session entries
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:save &amp;lt;path&amp;gt;             save replayable session to a file
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:sh &amp;lt;command line&amp;gt;       run a shell command (result is implicitly =&amp;gt; List[String])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:settings &amp;lt;options&amp;gt;      update compiler options, if possible; see reset
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:silent                  disable&#x2F;enable automatic printing of results
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:type [-v] &amp;lt;expr&amp;gt;        display the type of an expression without evaluating it
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:kind [-v] &amp;lt;expr&amp;gt;        display the kind of expression&amp;#39;s type
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;:warnings                show the suppressed warnings from the most recent line which had any
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see there aren’t many commands in the REPL, which makes it very easy to use even for the uninitiated. Some of them deserve additional attention as you will run them often.&lt;&#x2F;p&gt;
&lt;p&gt;For example &lt;code&gt;:implicits&lt;&#x2F;code&gt; will show a list of all implicits in scope. Given implicits are problematic (judging by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;search?q=%5Bscala%5D+implicit&quot;&gt;Stack Overflow&lt;&#x2F;a&gt; questions), this may help when debugging your app.&lt;&#x2F;p&gt;
&lt;p&gt;One of the main drawbacks of a REPL is to type all the context (imports, type definitions, etc) you need before you can test stuff. Two commands remove this pain: &lt;code&gt;:load &amp;lt;path&amp;gt;&lt;&#x2F;code&gt; will read and interpret a file as if you had typed it into the terminal; the command &lt;code&gt;:paste&lt;&#x2F;code&gt; works similarly by starting a &lt;em&gt;paste mode&lt;&#x2F;em&gt; that allows you to copy-paste relevant code into the REPL.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;scala&amp;gt; :paste
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;&#x2F; Entering paste mode (ctrl-D to finish)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;val s = 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;def g = (x: Int) =&amp;gt; x*x
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;&#x2F; Exiting paste mode, now interpreting.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;s: Int = 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;g: Int =&amp;gt; Int
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alongside &lt;code&gt;:load&lt;&#x2F;code&gt; there is a corresponding &lt;code&gt;:save &amp;lt;path&amp;gt;&lt;&#x2F;code&gt; command which saves the current status of the REPL into a file that can be loaded later on to continue your work at that point.&lt;&#x2F;p&gt;
&lt;p&gt;There are other commands you may want to check, like &lt;code&gt;:require&lt;&#x2F;code&gt; or &lt;code&gt;:history&lt;&#x2F;code&gt;, but with just the ones above working inside the REPL becomes a much more pleasant experience and not having a full fledge IDE is less of an issue.&lt;&#x2F;p&gt;
&lt;p&gt;That’s all. As always, feedback via Twitter&#x2F;Email is more than welcome. Cheers!&lt;&#x2F;p&gt;
</content>
        <summary type="html">One of the things people love about Scala is the REPL. I have to be honest;
I never paid too much attention to it as IntelliJ provides a handy Scala Worksheet. But it is time to fix this..
…</summary>
        </entry><entry xml:lang="en">
        <title>Using Docker in Heroku</title>
        <published>2015-05-11T00:00:00+00:00</published>
        <updated>2015-05-11T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/using-docker-in-heroku/" type="text/html"/>
        <id>https://perevillega.com/posts/using-docker-in-heroku/</id>
        
            <content type="html">&lt;p&gt;Heroku has announced &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;devcenter.heroku.com&#x2F;articles&#x2F;getting-started-with-scala-and-heroku-local-docker-development&quot;&gt;beta support&lt;&#x2F;a&gt; for Docker containers running in its platform. As I have some time in my hands, I’ve tried how well it integrates.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;strong&gt;Updated 15&#x2F;5&#x2F;2015:&lt;&#x2F;strong&gt; Michael Friss from Heroku sent me an email regarding the concerns I raised, update at the end with his comments.&lt;&#x2F;p&gt;
&lt;p&gt;I have a confession to make before I start: I was a Heroku convert that left the flock but is heading back to it. Years ago, when Heroku added support for Play apps, I made the same mistake as many developers before: I built my own (crappy) blog engine. I don’t know if the code is still around but for the sake of my employability I won’t surface any link to it ;)&lt;&#x2F;p&gt;
&lt;p&gt;At that time Heroku was very convenient, albeit expensive: $37&#x2F;month for a personal blog with dozens of visits per month… not a sound idea. I ended up looking for alternatives and realised the obvious: AWS, Linode and others were way cheaper and provided much more power. So I moved away.&lt;&#x2F;p&gt;
&lt;p&gt;Recently I’ve come full cycle. A couple of weeks ago, at a HackTheTower event organised by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jr0cket&quot;&gt;John Stevenson&lt;&#x2F;a&gt;, who’s a Heroku evangelist, I asked him why should I use Heroku as it is quite pricey. His answer: you pay for a 3rd party DevOps team. Obvious an answer as it is, the experience acquired between the time I used Heroku and now made me realise how valuable that is if you are building a serious app.&lt;&#x2F;p&gt;
&lt;p&gt;With the advent of Docker I went ballistic trying to run things in my computer, even trying to migrate some components at Gumtree. Shiny new thing and all that. The outcome wasn’t one I enjoyed: lots of issues and nothing fully working, plus the realisation that I’m a horrible sysadmin and, although I enjoy the theory of putting servers together, I’d rather focus on developing the app and let someone else manage all the other stuff.&lt;&#x2F;p&gt;
&lt;p&gt;So if I ever build a sizeable app I’d go back to Heroku . With that in my mind the announcement of Docker for Heroku really picked my interest. Thus, this post.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, boring interlude is over, let’s hack!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;set-up&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#set-up&quot; aria-label=&quot;Anchor link for: set-up&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Set up&lt;&#x2F;h2&gt;
&lt;p&gt;The instructions to use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;devcenter.heroku.com&#x2F;articles&#x2F;getting-started-with-scala-and-heroku-local-docker-development&quot;&gt;docker in Heroku&lt;&#x2F;a&gt; are missing some crucial info: you need to install both Docker and a specific plugin in your machine.&lt;&#x2F;p&gt;
&lt;p&gt;I’m using Linux Mint, based on Ubuntu. Installing Docker &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;installation&#x2F;ubuntulinux&#x2F;&quot;&gt;seems easy&lt;&#x2F;a&gt; until you hit this error when trying to run it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;FATA[0000]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; Get http:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock&#x2F;v1.17&#x2F;version: dial unix &#x2F;var&#x2F;run&#x2F;docker.sock:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;no&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; such file or directory.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Are&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; you trying to connect to a TLS-enabled daemon without TLS&lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;?&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As always, StackOverflow to the rescue. The &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;29294286&#x2F;fata0000-get-http-var-run-docker-sock-v1-17-version-dial-unix-var-run-doc&quot;&gt;first answer&lt;&#x2F;a&gt; fixed the issue for me. If you see the same error and you are not using Ubuntu or a derivative Google the error, there’s a lot of information about it. Such a common error and no steps to avoid it in the installation document… &lt;em&gt;ouch&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can find how to install the plugin for Heroku &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;devcenter.heroku.com&#x2F;articles&#x2F;introduction-local-development-with-docker?preview=1&quot;&gt;here&lt;&#x2F;a&gt;. Run the following to ensure all is working as expected:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; heroku help docker&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; heroku docker&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Use&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; Docker to build and deploy Heroku apps&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;[...]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;running-the-app&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#running-the-app&quot; aria-label=&quot;Anchor link for: running-the-app&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Running the app&lt;&#x2F;h2&gt;
&lt;p&gt;With Docker and the plugin working, just follow &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;devcenter.heroku.com&#x2F;articles&#x2F;getting-started-with-scala-and-heroku-local-docker-development&quot;&gt;the steps&lt;&#x2F;a&gt;. A quick summary of the relevant commands follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; git clone https:&#x2F;&#x2F;github.com&#x2F;heroku&#x2F;scala-getting-started.git&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cd scala-getting-started&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; sbt stage                 &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; let&amp;#39;s build the code&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; heroku docker:init        &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; create dockerfile&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; heroku docker:start       &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; run the app. You may or may not need sudo for this&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will generate a local &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;docs.docker.com&#x2F;reference&#x2F;builder&#x2F;&quot;&gt;Dockerfile&lt;&#x2F;a&gt; and run the app. The Dockerfile generated is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; heroku&#x2F;cedar:14&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; useradd&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;d&lt;&#x2F;span&gt; &#x2F;app&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;m&lt;&#x2F;span&gt; app&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;USER&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; app&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;WORKDIR&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &#x2F;app&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ENV&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; HOME &#x2F;app&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ENV&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; PATH &#x2F;app&#x2F;heroku&#x2F;jdk&#x2F;bin:&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ENV&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; PORT 3000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; mkdir&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;p&lt;&#x2F;span&gt; &#x2F;app&#x2F;heroku&#x2F;jdk&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; mkdir&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;p&lt;&#x2F;span&gt; &#x2F;app&#x2F;.profile.d&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; curl&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;s&lt;&#x2F;span&gt; http:&#x2F;&#x2F;lang-jvm.s3.amazonaws.com&#x2F;jdk&#x2F;openjdk1.8.0_40-cedar14.tar.gz&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;tar&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; xz&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;C&lt;&#x2F;span&gt; &#x2F;app&#x2F;heroku&#x2F;jdk&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; echo &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;export JAVA_HOME=&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&#x2F;app&#x2F;heroku&#x2F;jdk&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &#x2F;app&#x2F;.profile.d&#x2F;jdk.sh&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; echo &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;export PATH=&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&#x2F;app&#x2F;heroku&#x2F;jdk&#x2F;bin:&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\$&lt;&#x2F;span&gt;PATH&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt; &#x2F;app&#x2F;.profile.d&#x2F;jdk.sh&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ONBUILD&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; COPY target &#x2F;app&#x2F;target&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ONBUILD&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; USER root&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ONBUILD&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; RUN chown&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;R&lt;&#x2F;span&gt; app &#x2F;app&#x2F;target&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ONBUILD&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; USER app&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ONBUILD&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; EXPOSE 3000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most of the file is just setting the environment: open ports, install JDK, etc. The relevant part is the series of &lt;em&gt;ONBUILD&lt;&#x2F;em&gt; actions at the end. They are the ones copying the contents of our &lt;em&gt;target&lt;&#x2F;em&gt; folder as the app to run and exposing the port used to connect to it. But the fact they are &lt;em&gt;ONBUILD&lt;&#x2F;em&gt; means this image will be extended by another Dockerfile, as otherwise they would not be executed.&lt;&#x2F;p&gt;
&lt;p&gt;And, indeed, if you look at the output of &lt;em&gt;docker:start&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 16 : ONBUILD expose 3000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;---&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; Running in b6ff244c054f&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;---&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-file-descriptor z-shell&quot;&gt;81&lt;&#x2F;span&gt;c9310081ff&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Removing&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; intermediate container b6ff244c054f&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Successfully&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; built 81c9310081ff&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;building&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; image...&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Sending&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; build context to Docker daemon 21.44 MB&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Sending&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; build context to Docker daemon&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0 : FROM heroku-docker-ef389ffce157641fd8a8a903641ab592&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; Executing 5 build triggers&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Trigger&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0, COPY target &#x2F;app&#x2F;target&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0 : COPY target &#x2F;app&#x2F;target&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Trigger&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1, USER root&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0 : USER root&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;---&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; Running in 783a26569081&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Trigger&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 2, RUN chown&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;R&lt;&#x2F;span&gt; app &#x2F;app&#x2F;target&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0 : RUN chown&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;R&lt;&#x2F;span&gt; app &#x2F;app&#x2F;target&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;---&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; Running in 0cc41d250626&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Trigger&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 3, USER app&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0 : USER app&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;---&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; Running in cad1a44eaeac&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Trigger&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 4, EXPOSE 3000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0 : EXPOSE 3000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;---&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; Running in c816b4ac395a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;---&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; ca0051ac830e&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Did you notice that &lt;code&gt;FROM heroku-docker-ef389ffce157641fd8a8a903641ab592&lt;&#x2F;code&gt;? A bit of magic in here, but we will allow it as it is the point of Heroku: devops as a  black box. In any case, time to go to production:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; heroku create&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; heroku docker:release&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; heroku open&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A new image is built (you can see the triggers being actioned again) and the locally generated slug is uploaded to Heroku, a total of 63MB of a maximum allowed of 300Mb. The app works as expected, all good. A very similar experience to what you expect with the standard Heroku process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;concerns&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#concerns&quot; aria-label=&quot;Anchor link for: concerns&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Concerns&lt;&#x2F;h2&gt;
&lt;p&gt;Using Docker within Heroku makes me uneasy. I like Docker, but I see this integration as trying to marry two contradicting approaches. Docker requires you to know what are you doing, you can hack it blissfully ignorant but then it hits back with a dose of reality and a pile of errors. Heroku, on the other hand, is a fire-and-forget heaven for developers: care about the services, not about how are they being run.&lt;&#x2F;p&gt;
&lt;p&gt;Arguably the tools Heroku provides hide this pain as the Dockerfile is built for you and it is a very basic Dockerfile. But then, is it necessary? And is it a complete abstraction?&lt;&#x2F;p&gt;
&lt;p&gt;Every time I built my app for either local or remote deployment, the build process happened locally in my machine. The issue here is that the base image (the Dockerfile generated) is not rebuild, there is no need as the key steps are triggers (ONBUILD) that will be run later.&lt;&#x2F;p&gt;
&lt;p&gt;Now, I may be missing something obvious as I’m not an expert, but as far as I understand this means that if the &lt;em&gt;cedar-14&lt;&#x2F;em&gt; base image contains a component with a serious vulnerability, unless I wipe all the local caches from my system (for both &lt;em&gt;cedar-14&lt;&#x2F;em&gt; and my app) my built slug will contain that vulnerability. Obviously I don’t know which magic happens inside the Dockerfile used by Heroku that extends mine, but that doesn’t ease my concerns at all.&lt;&#x2F;p&gt;
&lt;p&gt;It seems by trying to adopt a new technology now the developer needs to worry a bit more about sysadmin things. And also, not critical but still relevant, we need to upload the locally-built slug to the system. This can be up to 300Mb, which kind of defeats the speed increase of doing the build process in your beefy machine. Asymmetric connections are still the norm, unfortunately.&lt;&#x2F;p&gt;
&lt;p&gt;So, I get why is Heroku trying to do this, but I’m not sure it has any real benefit as unfortunately not all developers may realise some implications. Or maybe that’s the point: get people on-board via Docker and then show them a simpler and maybe safer way, the old and tested one.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;&#x2F;strong&gt; As I mentioned above, I received an email from Michael Friss (from Heroku) about the concerns I had. I feel they address the issues and it is fair to mention it:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You stack concerns are valid and interesting, so I want to address them in detail.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;heroku docker:release&lt;&#x2F;code&gt; does not (currently) release the entire heroku&#x2F;cedar:14 that you created locally. It only extracts the &lt;code&gt;&#x2F;app&lt;&#x2F;code&gt; contents and packages that into a slug (containing a JVM, your packages and your app) that’s released to Heroku. That’s deployed to the same Heroku runtime stack as slugs from normal buildpacks, and we keep that patched and updated. We also keep the &lt;code&gt;heroku&#x2F;cedar:14&lt;&#x2F;code&gt; image updated on Docker-hub for you to pull.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As we make progress on the Docker-stuff, and if it graduates out of beta, we’ll build supported and hands-off flows similar to how the Heroku-supported buildpacks work. (We’ll probably also rely more on Buildpacks to make the Docker-flow work. Check out how Python works right now: https:&#x2F;&#x2F;github.com&#x2F;heroku&#x2F;heroku-docker&#x2F;blob&#x2F;master&#x2F;platforms&#x2F;python&#x2F;Dockerfile.t#L31&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You’re correct that there’s ALSO an option to break out of the supported flow and tweak the Dockerfile. This has roughly the same semantics as forking a Heroku buildpack or creating a buildpack from scratch. Something that 1000s of Heroku users do.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That’s all. As always, feedback via Twitter&#x2F;Email is more than welcome. Cheers!&lt;&#x2F;p&gt;
</content>
        <summary type="html">Heroku has announced beta support for Docker containers running in its platform. As I have some time in my hands, I’ve tried how well it integrates.
…</summary>
        </entry><entry xml:lang="en">
        <title>Real-Time Analytics With Storm - Done!</title>
        <published>2015-02-22T00:00:00+00:00</published>
        <updated>2015-02-22T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/real-time-analytics-with-apache-storm-done/" type="text/html"/>
        <id>https://perevillega.com/posts/real-time-analytics-with-apache-storm-done/</id>
        
            <content type="html">&lt;p&gt;And &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.udacity.com&#x2F;course&#x2F;ud381&quot;&gt;Real-Time Analytics with Apache Storm&lt;&#x2F;a&gt; it’s over. Kinda. But it has been a fun road to travel.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;When I say ‘kinda’ is because the last lesson consists on a relatively big project (classifying tweets) which I will skip. It can be quite time consuming and I feel after the previous lessons I understand the concepts behind Storm well enough. I believe that, even if I spend now a few evenings doing this project, I will forget stuff from lack of use of Storm after it. Thus, it feels a better investment of my time to focus on other areas right now and put that effort whenever I need to use Storm for something.&lt;&#x2F;p&gt;
&lt;p&gt;That said, the course was very useful. I liked the format, and it gave me a good library of examples I stored in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;udacity-storm&quot;&gt;Github&lt;&#x2F;a&gt; and can be used in the future to refresh my memory. A tip: if you do the course, don’t skip the interviews at the end of lesson 4. They have some nice insights.&lt;&#x2F;p&gt;
</content>
        <summary type="html">And Real-Time Analytics with Apache Storm it’s over. Kinda. But it has been a fun road to travel.
…</summary>
        </entry><entry xml:lang="en">
        <title>Real-Time Analytics With Storm - Lesson 2</title>
        <published>2015-02-15T00:00:00+00:00</published>
        <updated>2015-02-15T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/real-time-analytics-with-storm-lesson-2/" type="text/html"/>
        <id>https://perevillega.com/posts/real-time-analytics-with-storm-lesson-2/</id>
        
            <content type="html">&lt;p&gt;I just finished the second lesson of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.udacity.com&#x2F;course&#x2F;ud381&quot;&gt;Real-Time Analytics with Apache Storm&lt;&#x2F;a&gt;. At this stage I should be able to understand how Sprouts and Bolts interact, and to parse data from Twitter in real time.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;It was an interesting lesson. I like a lot the fact that you have videos explaining what to do, then a text document describing steps, followed by a video with the solution. It makes it easy to go through the course, and if you are tight on time you can skip the first video (and go back to it if you get stuck).&lt;&#x2F;p&gt;
&lt;p&gt;I found the use of Twitter data very interesting, seeing all that data coming to you in real time… wow. The only downside is that the server (run in your localhost) to visualise the results was dying under the pressure. The fans of my MacBook Pro were spinning like crazy, but the server couldn’t handle the sheer amount of data. Oh, well, lesson learned!&lt;&#x2F;p&gt;
&lt;p&gt;To be honest I have the feeling my solutions for exercise 6 and 7 may not be correct, but due to the visualisation problem mentioned above I can’t verify if that’s the case. I’m not too worried, though, as the aim of this lesson is to understand the concepts behind connecting Sprouts and Bolts, which I did.&lt;&#x2F;p&gt;
&lt;p&gt;You can find my solutions to this lesson in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;udacity-storm&quot;&gt;Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        <summary type="html">I just finished the second lesson of Real-Time Analytics with Apache Storm. At this stage I should be able to understand how Sprouts and Bolts interact, and to parse data from Twitter in real time.
…</summary>
        </entry><entry xml:lang="en">
        <title>Machine Learning at Coursera</title>
        <published>2015-02-08T00:00:00+00:00</published>
        <updated>2015-02-08T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/machine-learning-at-coursera/" type="text/html"/>
        <id>https://perevillega.com/posts/machine-learning-at-coursera/</id>
        
            <content type="html">&lt;p&gt;And more work in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Data_science&quot;&gt;data science&lt;&#x2F;a&gt; world. I’ve joined yet another &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;&quot;&gt;Coursera&lt;&#x2F;a&gt; class: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;class.coursera.org&#x2F;ml-008&#x2F;&quot;&gt;Machine Learning&lt;&#x2F;a&gt;. Yes, I might be overdoing it.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;To be honest this is a class I started time ago but I had to drop due to lack of time. So it was great news to realise that it was running again, just when I want to focus on this area. The videos are very helpful and after doing the first practical exercise I’m very happy as the hands-on experience allows you to play around and imagine areas in which you could already apply this. Very motivating.&lt;&#x2F;p&gt;
&lt;p&gt;Not only that, the lessons about Octave proved beneficial as it facilitated solving the exercises in the other class I’m taking, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;class.coursera.org&#x2F;mmds-002&quot;&gt;Mining Massive Datasets&lt;&#x2F;a&gt;. As I wrote in my last post, I wasn’t sure if to continue that class as I didn’t want to spend hours doing matrix calculations by hand (laziness, or maybe just trying to be more efficient). Octave solved that by letting me automate the process. A win - win situation!&lt;&#x2F;p&gt;
&lt;p&gt;I’d love to publish the code in Octave, but unfortunately this goes against the Code of Honour, so… maybe another time :)&lt;&#x2F;p&gt;
</content>
        <summary type="html">And more work in the data science world. I’ve joined yet another Coursera class: Machine Learning. Yes, I might be overdoing it.
…</summary>
        </entry><entry xml:lang="en">
        <title>Mining Massive Datasets</title>
        <published>2015-02-05T00:00:00+00:00</published>
        <updated>2015-02-05T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/mining-massive-datasets/" type="text/html"/>
        <id>https://perevillega.com/posts/mining-massive-datasets/</id>
        
            <content type="html">&lt;p&gt;As part of my efforts to understand more of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Data_science&quot;&gt;data science&lt;&#x2F;a&gt; world, I’ve joined another &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;&quot;&gt;Coursera&lt;&#x2F;a&gt; class: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;class.coursera.org&#x2F;mmds-002&quot;&gt;Mining Massive Datasets&lt;&#x2F;a&gt;. First week done, how was it?&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I have to say that, unfortunately, I found it discouraging for a developer. Don’t take me wrong, the course is fine and plenty of developers will love it. But my maths are &lt;strong&gt;very&lt;&#x2F;strong&gt; rusty, it’s been a long time since I had to do things like multiplying matrixes. So the first week has been harder than expected: I can calculate your &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MapReduce&quot;&gt;MapReduce&lt;&#x2F;a&gt; solutions with little effort, but iterating over PageRank…&lt;&#x2F;p&gt;
&lt;p&gt;I guess that, personally, I like more a ‘hands-on’ approach and the fact this course is so theoretical puts me off a bit. One gets used to a quick-feedback loop during development and moving to the pure-theory realm is hard.&lt;&#x2F;p&gt;
&lt;p&gt;From what I understand all the course will follow the same pattern (videos and quiz) with some coding exercises as &lt;em&gt;optional&lt;&#x2F;em&gt; deliverables with no impact in your grade. I doubt many people attend a MOOC for the grade (at least if you are taking the free ones) so most of the effort in the course will be to understand purely theoretical approaches. I’m not denying their usefulness, but given my limited free time I may have to drop this course if things keep at the same level, as at my current level of data science knowledge I won’t benefit too much from it.&lt;&#x2F;p&gt;
</content>
        <summary type="html">As part of my efforts to understand more of the data science world, I’ve joined another Coursera class: Mining Massive Datasets. First week done, how was it?
…</summary>
        </entry><entry xml:lang="en">
        <title>Real-Time Analytics With Apache Storm at Udacity</title>
        <published>2015-02-01T00:00:00+00:00</published>
        <updated>2015-02-01T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/real-time-analytics-with-apache-storm-at-udacity/" type="text/html"/>
        <id>https://perevillega.com/posts/real-time-analytics-with-apache-storm-at-udacity/</id>
        
            <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Marc_Andreessen&quot;&gt;Marc Andreessen&lt;&#x2F;a&gt; famously said that &lt;em&gt;Why Software Is Eating the World&lt;&#x2F;em&gt;. There is a lot of truth in this but if we think about it a bit more it feels that, nowadays, the way this is happening is via machine learning and analytics. These are the tools that can move personalization to the next level and, with it, changing the way services interact with customers.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;All that is just to justify why I’ve started the first lesson of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.udacity.com&#x2F;course&#x2F;ud381&quot;&gt;Real-Time Analytics with Apache Storm&lt;&#x2F;a&gt;, a free &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.udacity.com&#x2F;&quot;&gt;Udacity&lt;&#x2F;a&gt; course. Recently I’ve tried to narrow down things I do to a few relevant ones, instead of being too spread out into many unrelated tasks. And, as I wrote at the start of the post, I truly believe real-time analytics is the next big software revolution (well, arguably is already ongoing, not that I’m a visionary of any kind) so, as a developer, any effort on it is worth the time.&lt;&#x2F;p&gt;
&lt;p&gt;So, how was it? The course has 4 lessons and today I’ve finished the first one. This is an introductory lesson in which you set up your environment and you learn some of the pitfalls of real-time analytics along what’s the role of Storm in this field.&lt;&#x2F;p&gt;
&lt;p&gt;Code wise you have some very simple problems in which you modify existing topologies, but I feel these basic exercises help you getting familiar with Storm’s architecture. Judging by the advice and some of the steps required, the lessons are aimed to people with minimal knowledge of Java and Maven but that’s not bad (you will do that part faster if you know them).&lt;&#x2F;p&gt;
&lt;p&gt;Waiting to see how the second lesson works out for me.&lt;&#x2F;p&gt;
&lt;p&gt;You can find my solutions in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;udacity-storm&quot;&gt;Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        <summary type="html">Marc Andreessen famously said that Why Software Is Eating the World. There is a lot of truth in this but if we think about it a bit more it feels that, nowadays, the way this is happening is via machine learning and analytics. These are the tools that can move personalization to the next level and, with it, changing the way services interact with customers.
…</summary>
        </entry><entry xml:lang="en">
        <title>Twilio and Play Framework</title>
        <published>2014-01-10T00:00:00+00:00</published>
        <updated>2014-01-10T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/twilio-and-play-framework/" type="text/html"/>
        <id>https://perevillega.com/posts/twilio-and-play-framework/</id>
        
            <content type="html">&lt;p&gt;Another year, more technology to test :) Busy as I am in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.gumtree.com&#x2F;&quot;&gt;Gumtree&lt;&#x2F;a&gt;, I’ve been able to test some interesting stuff. You know, evaluation of technologies to see if they make sense from a business perspective. Or playing around, it depends on the point of view ;)&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This time the testing platform has been &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.twilio.com&#x2F;&quot;&gt;Twilio&lt;&#x2F;a&gt;. I built a prototype using Play Framework, Scala and the Twilio API to see how things work and if we could use some of them in the site. Granted, by prototype I mean 2 pages to test some calls to the API, but I guess this covers the core of Twilio, and extending it should be quite straightforward.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve written about it in a post in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@GumtreeDevTeam&#x2F;using-twilio-from-within-play-framework-81b174e31a84&quot;&gt;Gumtree dev blog&lt;&#x2F;a&gt;, where I also link to the sample code in Github.&lt;&#x2F;p&gt;
&lt;p&gt;As always, feedback via Twitter&#x2F;Email is more than welcome.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, and Happy 2014! May the (reactive?) code be with you ;)&lt;&#x2F;p&gt;
</content>
        <summary type="html">Another year, more technology to test :) Busy as I am in Gumtree, I’ve been able to test some interesting stuff. You know, evaluation of technologies to see if they make sense from a business perspective. Or playing around, it depends on the point of view ;)
…</summary>
        </entry><entry xml:lang="en">
        <title>Enums to JSON in Scala</title>
        <published>2013-09-21T00:00:00+00:00</published>
        <updated>2013-09-21T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/enums-to-json-in-scala/" type="text/html"/>
        <id>https://perevillega.com/posts/enums-to-json-in-scala/</id>
        
            <content type="html">&lt;p&gt;Scala gives the developer the possibility of using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;api&#x2F;current&#x2F;index.html#scala.Enumeration&quot;&gt;Enumerations&lt;&#x2F;a&gt;. If they should be used or if &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;docs.scala-lang.org&#x2F;tutorials&#x2F;tour&#x2F;case-classes.html&quot;&gt;Case Classes&lt;&#x2F;a&gt; are better is a debate I’m not going to start here. They exist and they can be used.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The reason I mention enumerations is that in a personal project (which I hope to publish soon, but I digress) I’ve been using them inside some &lt;em&gt;case classes&lt;&#x2F;em&gt;. In the same project I’m using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mandubian&#x2F;play-json-alone&quot;&gt;Play-JSON&lt;&#x2F;a&gt;, a standalone version of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.2.x&#x2F;ScalaJson&quot;&gt;Play Framework JSON libraries&lt;&#x2F;a&gt;, which turn working with JSON into a boilerplate-free pleasure. All was grand until I added my first enumeration as a parameter in a case class. The compiler started to complain and it took me a while to find how to fix it.&lt;&#x2F;p&gt;
&lt;p&gt;The solution was provided by, who else, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;15488639&#x2F;how-to-write-readst-and-writest-in-scala-enumeration-play-framework-2-1&#x2F;15489179#15489179&quot;&gt;StackOverflow&lt;&#x2F;a&gt; which &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;blog.stackoverflow.com&#x2F;2013&#x2F;09&#x2F;five-years-ago-stack-overflow-launched-then-a-miracle-occurred&#x2F;&quot;&gt;in just 5 years&lt;&#x2F;a&gt; has become an invaluable resource. I thought this may be useful to other people, so I created some basic sample code showing the solution to the issue and pushed it to a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;scala_enum_json&quot;&gt;Github repository&lt;&#x2F;a&gt;. As always, feel free to clone and comment.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-issue&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#the-issue&quot; aria-label=&quot;Anchor link for: the-issue&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
The issue&lt;&#x2F;h1&gt;
&lt;p&gt;Let’s assume we have the following code structure:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;&#x2F; Enum sample #1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;object EnumType1 extends Enumeration {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  type EnumType1 = Value
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val N = Value(&amp;quot;N&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val D = Value(&amp;quot;D&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val A = Value(&amp;quot;A&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val C = Value(&amp;quot;C&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val L = Value(&amp;quot;L&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val P = Value(&amp;quot;P&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;&#x2F; Enum sample #2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;object EnumType2 extends Enumeration {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  type EnumType2 = Value
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_A = Value(&amp;quot;OPTION_A&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_B = Value(&amp;quot;OPTION_B&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_C = Value(&amp;quot;OPTION_C&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_D = Value(&amp;quot;OPTION_D&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_E = Value(&amp;quot;OPTION_E&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_F = Value(&amp;quot;OPTION_F&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;&#x2F; Case class that uses enums
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case class EnumCaseClass(name: String, enum1: EnumType1, enum2: EnumType2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can take advantage of &lt;em&gt;Play-JSON&lt;&#x2F;em&gt; and create a companion object for our case class that will helps us serializing instances of this class from or into JSON.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;object EnumCaseClass {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  &#x2F;&#x2F; Support object to convert EnumCaseClass to Json using Play-JSON
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  implicit val fmt = Json.format[EnumCaseClass]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  def fromJson(json: JsValue) = Json.fromJson[EnumCaseClass](json).get
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  def toJson(enumCaseClass: EnumCaseClass) = Json.toJson(enumCaseClass)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, when compiling we will get errors due to the enumerations missing valid &lt;em&gt;Reads&lt;&#x2F;em&gt; and &lt;em&gt;Writes&lt;&#x2F;em&gt;. We can test this by removing the enum parameters from the case class and replacing them by simple types as shown below. The code works and converts the case class into JSON, which proves that the issue is the enumeration type that can’t be managed by &lt;em&gt;Play-JSON&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;case class EnumCaseClass(name: String, enum1: Int, enum2: Int)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;solution&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#solution&quot; aria-label=&quot;Anchor link for: solution&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Solution&lt;&#x2F;h1&gt;
&lt;p&gt;The solution is, obviously, to provide &lt;em&gt;Reads&lt;&#x2F;em&gt; and &lt;em&gt;Writes&lt;&#x2F;em&gt; for the enumerations. But we would like to do it in a generic way, to avoid duplication of very similar code. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;15488639&#x2F;how-to-write-readst-and-writest-in-scala-enumeration-play-framework-2-1&#x2F;15489179#15489179&quot;&gt;StackOverflow&lt;&#x2F;a&gt; provides an example of a support class that can accomplish this:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;object EnumUtils {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  def enumReads[E &amp;lt;: Enumeration](enum: E): Reads[E#Value] =
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    new Reads[E#Value] {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      def reads(json: JsValue): JsResult[E#Value] = json match {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        case JsString(s) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          try {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            JsSuccess(enum.withName(s))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          } catch {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;            case _: NoSuchElementException =&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;               JsError(s&amp;quot;Enumeration expected of type: &amp;#39;${enum.getClass}&amp;#39;,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                      but it does not appear to contain the value: &amp;#39;$s&amp;#39;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;          }
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        case _ =&amp;gt; JsError(&amp;quot;String value expected&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  implicit def enumWrites[E &amp;lt;: Enumeration]: Writes[E#Value] =
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    new Writes[E#Value] {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      def writes(v: E#Value): JsValue = JsString(v.toString)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  implicit def enumFormat[E &amp;lt;: Enumeration](enum: E): Format[E#Value] = {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    Format(enumReads(enum), enumWrites)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This creates an object that provides generic &lt;em&gt;Reads&lt;&#x2F;em&gt;, &lt;em&gt;Writes&lt;&#x2F;em&gt; and &lt;em&gt;Format&lt;&#x2F;em&gt; methods that can be used with any enumeration. We can use the methods in our enumerations, adding some implicit vals of type &lt;em&gt;Reads&lt;&#x2F;em&gt; and &lt;em&gt;Writes&lt;&#x2F;em&gt; that will redirect the execution flow to the support object, as follows:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;object EnumType1 extends Enumeration {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  type EnumType1 = Value
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val N = Value(&amp;quot;N&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val D = Value(&amp;quot;D&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val A = Value(&amp;quot;A&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val C = Value(&amp;quot;C&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val L = Value(&amp;quot;L&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val P = Value(&amp;quot;P&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  implicit val enumReads: Reads[EnumType1] = EnumUtils.enumReads(EnumType1)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  implicit def enumWrites: Writes[EnumType1] = EnumUtils.enumWrites
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;object EnumType2 extends Enumeration {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  type EnumType2 = Value
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_A = Value(&amp;quot;OPTION_A&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_B = Value(&amp;quot;OPTION_B&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_C = Value(&amp;quot;OPTION_C&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_D = Value(&amp;quot;OPTION_D&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_E = Value(&amp;quot;OPTION_E&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  val OPTION_F = Value(&amp;quot;OPTION_F&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  implicit val enumReads: Reads[EnumType2] = EnumUtils.enumReads(EnumType2)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  implicit def enumWrites: Writes[EnumType2] = EnumUtils.enumWrites
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By adding this support object and the enumeration-specific &lt;em&gt;vals&lt;&#x2F;em&gt;, we can now compile the project and serialize our &lt;em&gt;case class&lt;&#x2F;em&gt; into JSON.&lt;&#x2F;p&gt;
&lt;p&gt;Go to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;scala_enum_json&quot;&gt;Github repository&lt;&#x2F;a&gt; and experiment with the code.&lt;&#x2F;p&gt;
</content>
        <summary type="html">Scala gives the developer the possibility of using Enumerations. If they should be used or if Case Classes are better is a debate I’m not going to start here. They exist and they can be used.
…</summary>
        </entry><entry xml:lang="en">
        <title>Scala in 2018</title>
        <published>2013-08-25T00:00:00+00:00</published>
        <updated>2013-08-25T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/scala-in-2018/" type="text/html"/>
        <id>https://perevillega.com/posts/scala-in-2018/</id>
        
            <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;scaladays.org&#x2F;&quot;&gt;ScalaDays 2013&lt;&#x2F;a&gt; happened this past June and the presentations are available at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.parleys.com&#x2F;home&quot;&gt;Parleys&lt;&#x2F;a&gt;. If you go to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.parleys.com&#x2F;channel&#x2F;51ae1022e4b01033a7e4b6ca&#x2F;presentations&quot;&gt;ScalaDays 2013 channel&lt;&#x2F;a&gt; you can see all of them, and many are completely worth your time.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I’ve taken a while to catch up with the presentations (too many things going on this summer), but one talk that I found very inspiring was the one by Rod Johnson, of Spring fame and currently in Typesafe board, about the future of Scala. The talk is called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.parleys.com&#x2F;play&#x2F;51c1ffe7e4b0d38b54f46231&#x2F;chapter0&#x2F;about&quot;&gt;Scala in 2018&lt;&#x2F;a&gt; and, long as it is, I’d recommend you to watch it.&lt;&#x2F;p&gt;
&lt;p&gt;The talk itself shows a &lt;em&gt;what-if&lt;&#x2F;em&gt; scenario in which circa 2018 Scala has become the dominating language in the enterprise market. From that starting point, Rod comments on what was necessary to achieve this, and shows the path Scala must take if we want this to become true.&lt;&#x2F;p&gt;
&lt;p&gt;Personally, I liked a lot the idea about 2 tiers of Scala, one for innovation and one for enterprise. Both distributions evolving in parallel, so developers can experiment without being constrained and, once a feature is deemed useful and resilient, it can be migrated into a more stable enterprise package that follows enterprise-related restrictions.&lt;&#x2F;p&gt;
&lt;p&gt;In the comments of the video many people complain that the talk is very negative and it uses outdated examples, showing issues that have been already solved. This may be true, but they are still relevant ideas and the fact that they were solved doesn’t mean we can forget about them, otherwise we will do the same error again.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, this video makes me eager to contribute more to the community. I just need to find time for that :)&lt;&#x2F;p&gt;
</content>
        <summary type="html">ScalaDays 2013 happened this past June and the presentations are available at Parleys. If you go to the ScalaDays 2013 channel you can see all of them, and many are completely worth your time.
…</summary>
        </entry><entry xml:lang="en">
        <title>Using Ansible to deploy Play Framework apps in EC2 instances</title>
        <published>2013-04-01T00:00:00+00:00</published>
        <updated>2013-04-01T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/using-ansible-to-deploy-play-framework-apps-in-ec2-instances/" type="text/html"/>
        <id>https://perevillega.com/posts/using-ansible-to-deploy-play-framework-apps-in-ec2-instances/</id>
        
            <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR:&lt;&#x2F;strong&gt; Clone &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;ansible-ec2-play&quot;&gt;Ansible for Play Framework&lt;&#x2F;a&gt; to automate the task of deploying Play 2.x projects from a git repository into an EC2 instance.&lt;&#x2F;p&gt;
&lt;p&gt;As many developers I’m not a good sysadmin. That’s why I was happy to see the raise of PaaS like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.heroku.com&#x2F;&quot;&gt;Heroku&lt;&#x2F;a&gt;, which facilitated deploying a webapp without having to spend time in sysadmin tasks which I didn’t know how to do correctly and which took me too much time.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Unfortunately, as with most abstractions, the PaaS environments are simple to use but also quite limited in options. Heroku offering of 512Mb per dyno plus limitations on what you can do can be a problem, and the third party addons get expensive quickly. Then you have Amazon EC2, cheaper and quite flexible, but in exchange you need a bit more of “sysadmin knowledge”. Not a big deal for apps like this blog, running in a Micro instance, but if your app is bigger and spans several servers, it may become time consuming.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to automate the task of managing the server so I did not have to worry too much about it. I looked at both &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.opscode.com&#x2F;chef&#x2F;&quot;&gt;Chef&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;puppetlabs.com&#x2F;&quot;&gt;Puppet&lt;&#x2F;a&gt;, but somehow I couldn’t bring myself to spend enough time with them. The release of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;aws.amazon.com&#x2F;opsworks&#x2F;&quot;&gt;Amazon OpsWorks&lt;&#x2F;a&gt; raised the issue again as they don’t have a Play Framework 2 script ready out of the box, but it was hard to try to focus on that task.&lt;&#x2F;p&gt;
&lt;p&gt;That was it until this last weekend when I discovered, somehow, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ansible.cc&#x2F;&quot;&gt;Ansible&lt;&#x2F;a&gt;. Ansible is a tool in the same category as Chef and Puppet (purists will start pointing at relevant differences here, but I only care about the fact that they automate my sysadmin tasks). For some reason Ansible seemed much simpler to understand and use, and I got hooked. Ansible Playbooks consist on a series of yaml files that declare the steps to execute, in order. Ansible itself manages the execution of the steps across servers, so you can run one script on as many servers as you need all at the same time. I won’t enter into details as &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ansible.cc&#x2F;&quot;&gt;Ansible&lt;&#x2F;a&gt; has good enough documentation, but to put an example let’s see a possible Ansible Playbook to install &lt;code&gt;Authbind&lt;&#x2F;code&gt; into an EC2 instance:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    # Run with: ansible-playbook -i hosts.ini playenv.yaml -u ubuntu
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    ---
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    - hosts: ec2Instance
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      vars:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      - ubuntu_release: quantal
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    tasks:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      - name: Install Authbind
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        action: apt pkg=authbind state=latest install_recommends=yes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Having the tool the task ahead was clear: my main 3 sysadmin issues with EC2 (given my current usage level) are securing the Ubuntu AMI, deploying a Play environment and deploying the app itself. With Ansible, I should be able to automate these steps so I won’t do mistakes like forgetting one step as well as reducing the time I have to spend on these tasks.&lt;&#x2F;p&gt;
&lt;p&gt;It wasn’t easy (as I said I’m not a sysadmin) and the scripts could be better, but I managed to create something that works: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;ansible-ec2-play&quot;&gt;Ansible for Play Framework in EC2&lt;&#x2F;a&gt;. Instructions for execution are included in the Github repository.&lt;&#x2F;p&gt;
&lt;p&gt;There are 3 relevant scripts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;bootstrap.yaml:&lt;&#x2F;strong&gt; runs a series of commands to enhance security of an EC2 Ubuntu AMI. I’m not a sysadmin so some step may be wrong or incomplete, but what’s in there seems to work fine. Requires sudo privilege in the target machine to run.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;playenv.yaml:&lt;&#x2F;strong&gt; sets some Play Framework dependencies (basically pvm and java 7) as well as Authbind so Play can use port 80 without root privileges. Requires sudo privilege in the target machine to run.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;deploy.yaml:&lt;&#x2F;strong&gt; clones a Play project from a given Git repository and deploys it on the target machine. The script assumes the repository contains a &lt;code&gt;start&lt;&#x2F;code&gt; file in the format provided with the script (see &lt;code&gt;exec&lt;&#x2F;code&gt; folder) to be able to successfully launch the app. Customise the &lt;code&gt;start&lt;&#x2F;code&gt; file as required. No sudo required, the script uses authbind to link Play to port 80. Be aware that in EC2 Micro instances this script will fail due to low memory as Linux memory manager kills the JVM when building the distributable zip for the app.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you have a project in Github (or any publicly available Git repository) and an EC2 instance, run the scripts through Ansible and there you go, app deployed and running!&lt;&#x2F;p&gt;
&lt;p&gt;So, that’s all. If you see something that can be improved, please contribute with a pull request. I hope with this you can save some time on your next deployment.&lt;&#x2F;p&gt;
</content>
        <summary type="html">TL;DR: Clone Ansible for Play Framework to automate the task of deploying Play 2.x projects from a git repository into an EC2 instance.
As many developers I’m not a good sysadmin. That’s why I was happy to see the raise of PaaS like Heroku, which facilitated deploying a webapp without having to spend time in sysadmin tasks which I didn’t know how to do correctly and which took me too much time.
…</summary>
        </entry><entry xml:lang="en">
        <title>Using Redis PubSub with Play 2.1.0</title>
        <published>2013-02-24T00:00:00+00:00</published>
        <updated>2013-02-24T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/using-redis-pubsub-with-play-2-dot-1-0/" type="text/html"/>
        <id>https://perevillega.com/posts/using-redis-pubsub-with-play-2-dot-1-0/</id>
        
            <content type="html">&lt;p&gt;Last week I was experimenting a bit with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;redis.io&#x2F;&quot;&gt;Redis&lt;&#x2F;a&gt; and its &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;pubsub&quot;&gt;Publish-Subscribe&lt;&#x2F;a&gt; module. The idea was to try to implement a chat with it (something I’ll need for my next project) and from all the options I evaluated this seemed the best. Loving Redis so far, whoever called it the swiss-knife of databases was completely right.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;As to be expected with programming I had some trouble, in this scenario using Redis PubSub with Play 2.1.0 blocked the application. So I decided to publish this in case someone else has the same issue. If you don’t want to read the details just go to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;play21-redis-pubsub&quot;&gt;GitHub repository&lt;&#x2F;a&gt; and clone the source. It contains a very simple application in which Play subscribes to a Redis channel and sends messages to it via Akka actors, while using a listener to notify about reception of the same messages. The &lt;code&gt;Readme&lt;&#x2F;code&gt; file gives more detail on how it works.&lt;&#x2F;p&gt;
&lt;p&gt;So now let’s talk about Redis and the issue I had.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-redis-with-play&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#using-redis-with-play&quot; aria-label=&quot;Anchor link for: using-redis-with-play&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Using Redis with Play&lt;&#x2F;h2&gt;
&lt;p&gt;Using Redis with Play is very straightforward. Typesafe provides a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typesafehub&#x2F;play-plugins&#x2F;tree&#x2F;master&#x2F;redis&quot;&gt;play plugin&lt;&#x2F;a&gt; to manage the interactions. The plugin is based on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pk11&#x2F;sedis&quot;&gt;Sedis&lt;&#x2F;a&gt;, the Scala library for Redis, which in turn is a wrapper over &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;xetorthio&#x2F;jedis&#x2F;&quot;&gt;Jedis&lt;&#x2F;a&gt;, the most popular JVM library for Redis.&lt;&#x2F;p&gt;
&lt;p&gt;At the time of this writing the dependencies for Play 2.1 are not working perfectly so you need to add an additional resolver to your project to be able to download all of them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;resolvers += &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;org.sedis&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; at &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;http:&#x2F;&#x2F;pk11-scratch.googlecode.com&#x2F;svn&#x2F;trunk&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but once done you can use Redis as both Cache layer and Database for Play.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-issue&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#the-issue&quot; aria-label=&quot;Anchor link for: the-issue&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
The issue&lt;&#x2F;h2&gt;
&lt;p&gt;Simple as it is, things got a bit more complex when using PubSub. The way PubSub works with Redis is as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;first of all you set a client to subscribe to a channel. The subscription call accepts a listener class that will trigger method calls as response to events in the channel (messages being passed around, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;then you need clients to send messages to the channel via the &lt;code&gt;publish&lt;&#x2F;code&gt; operation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So the resulting code for subscription would be something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;pool&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;withJedisClient&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;client&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-arrow z-lambda z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  client&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;subscribe&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;listener&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;CHANNEL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but as it happens &lt;code&gt;subscribe&lt;&#x2F;code&gt; is a blocking call. This means that every time we execute it, a thread will be locked into receiving notifications from Redis. And the result is that Play will stop working as all threads get consumed by calls to this operation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solution&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#solution&quot; aria-label=&quot;Anchor link for: solution&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Thankfully Play 2.1.0 introduces a new concept that solves this issue: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.playframework.com&#x2F;documentation&#x2F;2.1.0&#x2F;ThreadPools&quot;&gt;ExecutionContexts&lt;&#x2F;a&gt;. An &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt; is nothing more than a set of threads, independent from the ones managing the Play app itself, to be used when we have slow or blocking operations. This ensures some specialized thread takes care of that operation without impacting the performance of the application itself.&lt;&#x2F;p&gt;
&lt;p&gt;In our case, as we have a blocking call, we simply want to run the &lt;code&gt;subscribe&lt;&#x2F;code&gt; operation inside its own &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt;, which will consist on threads devoted to listening to Redis, while the standard &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt; manages other Play calls. So our code will become as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Contexts&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Execution context used to avoid blocking on subscribe&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;implicit&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;myExecutionContext&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-scala&quot;&gt;ExecutionContext&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Akka&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;system&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;dispatchers&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;lookup&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;akka.actor.redis-pubsub-context&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Future&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; subscribe in a Future using a specific ExecutionContext&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; use Sedis pool to launch the subscribe operation&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  pool&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;withJedisClient&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-scala&quot;&gt;client&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-arrow z-lambda z-scala&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;    client&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;subscribe&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;listener&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;CHANNEL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-block z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Contexts&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;myExecutionContext&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that’s it. A simple way to avoid blocking operations slowing your app or consuming all the threads it needs. If you’ve had this issue this will solve it for you.&lt;&#x2F;p&gt;
</content>
        <summary type="html">Last week I was experimenting a bit with Redis and its Publish-Subscribe module. The idea was to try to implement a chat with it (something I’ll need for my next project) and from all the options I evaluated this seemed the best. Loving Redis so far, whoever called it the swiss-knife of databases was completely right.
…</summary>
        </entry><entry xml:lang="en">
        <title>Executing Jasmine Tests in Play 2.0.4</title>
        <published>2013-01-26T00:00:00+00:00</published>
        <updated>2013-01-26T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/executing-jasmine-tests-in-play-2-dot-0-4/" type="text/html"/>
        <id>https://perevillega.com/posts/executing-jasmine-tests-in-play-2-dot-0-4/</id>
        
            <content type="html">&lt;p&gt;&lt;em&gt;Christmas&lt;&#x2F;em&gt; break is over, and on a whim I started to check &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;angularjs.org&#x2F;&quot;&gt;AngularJs&lt;&#x2F;a&gt;. If you haven’t tested it yet, do it. I’ve toyed around  with Backbone and some other Javascript &lt;em&gt;single page app&lt;&#x2F;em&gt; frameworks, and Angular is by far the one that I liked the most. It has simplicity embedded in its core, and turning tedious tasks (as setting controllers) into something trivial makes it a pleasure to use. Simplicity. Such an important concept, and one which is seldom present in frameworks.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;But I digress. Back to the post. Adding Angular to a Play app is as simple as you can imagine, as in the end it’s a Javascript library. Add the Angular files, code controllers and services, put Angular templates under &lt;code&gt;public&lt;&#x2F;code&gt; so Angular can get them, and you are done.  You can see a project sample &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;play2demo-jasmine&quot;&gt;in my Github account&lt;&#x2F;a&gt;. Be aware the sample is very rough and has minimal functionality, the aim was to see how can they be linked, not to push Angular boundaries.&lt;&#x2F;p&gt;
&lt;p&gt;So we have a Javascript framework, and obviously we want to test it. Unfortunately the recommended way to test Angular is via &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;pivotal.github.com&#x2F;jasmine&#x2F;&quot;&gt;Jasmine&lt;&#x2F;a&gt;, a Javascript BDD framework. I say unfortunately because that would mean running 2 commands for testing: one for Play tests and another for Angular tests. Or does it?&lt;&#x2F;p&gt;
&lt;p&gt;It is on moments like this when Open Source shows its worthiness. Enter &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.guardian.co.uk&#x2F;&quot;&gt;The Guardian&lt;&#x2F;a&gt; and its Software development department, which open sources a lot of the code they create to run their online platform. A wise company, they use Scala and Play and they created &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;guardian&#x2F;sbt-jasmine-plugin&quot;&gt;Sbt-Jasmine&lt;&#x2F;a&gt;, a plugin to run Jasmine inside Sbt projects. Given that Play 2 uses Sbt, this should prove simple.&lt;&#x2F;p&gt;
&lt;p&gt;Well, to be honest it wasn’t &lt;em&gt;so&lt;&#x2F;em&gt; simple, that’s why I decided to document it here to save time to other interested people. This assumes a working Play 2.0.4 project, should work with any 2.0.x project but can’t promise anything about 2.1 (have to test it yet)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integrating-sbt-jasmine&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#integrating-sbt-jasmine&quot; aria-label=&quot;Anchor link for: integrating-sbt-jasmine&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Integrating Sbt-Jasmine&lt;&#x2F;h2&gt;
&lt;p&gt;This is quite straightforward, you just need to follow the instructions from the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;guardian&#x2F;sbt-jasmine-plugin&quot;&gt;Sbt-Jasmine&lt;&#x2F;a&gt; page. On your project, under the &lt;code&gt;project&lt;&#x2F;code&gt; folder, create another folder named &lt;code&gt;project&lt;&#x2F;code&gt; (that is, you will have &lt;code&gt;&#x2F;project&#x2F;project&#x2F;&lt;&#x2F;code&gt; path). Inside that new folder create a file &lt;code&gt;Plugins.scala&lt;&#x2F;code&gt; and add this code to it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; sbt&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; This plugin is used to load the sbt-jasmine plugin into our project.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; This allows us to import the SbtJasminePlugin file&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; in Build.scala, and then set the settings and configuration for Sbt-Jasmine&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Plugins&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Build&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;lazy&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;plugins&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;plugins&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; file&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;.&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;dependsOn&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;uri&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;git:&#x2F;&#x2F;github.com&#x2F;guardian&#x2F;sbt-jasmine-plugin.git#0.7&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will load the plugin directly from Github into your project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-jasmine-as-part-of-your-test-cycle&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#adding-jasmine-as-part-of-your-test-cycle&quot; aria-label=&quot;Anchor link for: adding-jasmine-as-part-of-your-test-cycle&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Adding Jasmine  as part of your test cycle&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have the plugin in, we want to be able to run both test types (Play and Jasmine) when executing &lt;code&gt;play test&lt;&#x2F;code&gt;. To that aim we have to edit our &lt;code&gt;Build.scala&lt;&#x2F;code&gt; project file to let Play know about Jasmine.&lt;&#x2F;p&gt;
&lt;p&gt;The first step will be importing the existing Jasmine settings the sbt plugin added into the project. We can do that via the &lt;code&gt;PlayProject&lt;&#x2F;code&gt; method &lt;code&gt;settings&lt;&#x2F;code&gt;, as in &lt;code&gt;.settings(jasmineSettings : _*)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The second step is to override the default Jasmine configuration, specifically the paths that point to the test assets and source files. Sbt-Jasmine expects a set of default paths that don’t map to the ones existing in a Play project, so we change them as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; jasmine configuration, overridden as we don&amp;#39;t follow the default&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; project structure sbt-jasmine expects&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;appJsDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;app&#x2F;assets&#x2F;javascripts&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;appJsLibDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;public&#x2F;javascripts&#x2F;lib&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;jasmineTestDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;test&#x2F;assets&#x2F;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;jasmineConfFile &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;test&#x2F;assets&#x2F;test.dependencies.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that &lt;code&gt;appJsDir&lt;&#x2F;code&gt; is pointing to the folder for minimized assets, we could change that to point to &lt;code&gt;&quot;public&#x2F;Javascripts&quot;&lt;&#x2F;code&gt;. The paths for &lt;code&gt;appJsLibDir&lt;&#x2F;code&gt;, &lt;code&gt;jasmineTestDir&lt;&#x2F;code&gt; and &lt;code&gt;jasmineConfFile&lt;&#x2F;code&gt; can be modified as it suits you.&lt;&#x2F;p&gt;
&lt;p&gt;The Jasmine configuration file follows standard Jasmine notation, which I won’t discuss in this post. The configuration for this sample project is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Dependencies for the unit test via Jasmine&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;libDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;jquery-1.8.3.min.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;libDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;angular.min.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;libDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;angular-resource.min.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;testDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;config&#x2F;angular-mocks.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Import all modules (RequireJs fails for some reason)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; FIXME: check why we can&amp;#39;t use RequireJs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;rootDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;todo.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we need to tell Play to run Jasmine tests when executing the &lt;code&gt;test&lt;&#x2F;code&gt; command. We do this by adding a dependency on &lt;code&gt;test&lt;&#x2F;code&gt; with  &lt;code&gt;(test in Test) &amp;lt;&amp;lt;= (test in Test) dependsOn (jasmine)&lt;&#x2F;code&gt;. This will cause Play to run first the Jasmine tests and, if they succeed, Play own tests will be executed.&lt;&#x2F;p&gt;
&lt;p&gt;The final code looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;main&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;PlayProject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;appName&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; appVersion&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt; appDependencies&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; mainLang &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;SCALA&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;this adds jasmine settings from the sbt-jasmine plugin into the project&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;settings&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;jasmineSettings &lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-varargs z-scala&quot;&gt;_*&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;settings&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Add your own project settings here&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; jasmine configuration overridden&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  appJsDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;app&#x2F;assets&#x2F;javascripts&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  appJsLibDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;public&#x2F;javascripts&#x2F;lib&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  jasmineTestDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;test&#x2F;assets&#x2F;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  jasmineConfFile &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;test&#x2F;assets&#x2F;test.dependencies.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; link jasmine to the standard &amp;#39;sbt test&amp;#39; action.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Now when running &amp;#39;test&amp;#39; jasmine tests will be run&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; and after that other Play tests will be executed.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;test in &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &amp;lt;&amp;lt;= &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;test in &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; dependsOn &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;jasmine&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that’s all. If you add some Jasmine tests under &lt;code&gt;test&#x2F;assets&lt;&#x2F;code&gt; and then execute &lt;code&gt;play test&lt;&#x2F;code&gt; you will see them being run. Remember what I said about simplicity? Why should you remember to run 2 suits independently when 1 command can do that for you?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-be-improved&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#to-be-improved&quot; aria-label=&quot;Anchor link for: to-be-improved&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
To be improved&lt;&#x2F;h2&gt;
&lt;p&gt;As much as I would like, this is not perfect. I found a couple of issues when integrating Jasmine and Play. Given I’m not an expert on neither, any help will be appreciated:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In theory you could use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;requirejs.org&#x2F;&quot;&gt;RequireJS&lt;&#x2F;a&gt; to import the Javascript sources to test, but it didn’t work when I tried. Not sure why and for a standard AngularJs distribution we are talking about 5 Javascript files (it could grow if you break them into components), so it doesn’t seem such a big deal. But it’s not perfect.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;AngularJs allows you to declare End to End test scenarios, similar to Selenium but inside AngularJs itself. Unfortunately I couldn’t make them work, as they require a server running. Given the enhanced Selenium support in newer AngularJS versions I expect one could use Play end to end scenarios to test this part, but I need to put more work on it to ensure it is true.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If anyone knows how to fix this, please let me know!&lt;&#x2F;p&gt;
</content>
        <summary type="html">Christmas break is over, and on a whim I started to check AngularJs. If you haven’t tested it yet, do it. I’ve toyed around  with Backbone and some other Javascript single page app frameworks, and Angular is by far the one that I liked the most. It has simplicity embedded in its core, and turning tedious tasks (as setting controllers) into something trivial makes it a pleasure to use. Simplicity. Such an important concept, and one which is seldom present in frameworks.
…</summary>
        </entry><entry xml:lang="en">
        <title>Iteratees and Play 2</title>
        <published>2012-11-18T00:00:00+00:00</published>
        <updated>2012-11-18T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/iteratees-and-play-2/" type="text/html"/>
        <id>https://perevillega.com/posts/iteratees-and-play-2/</id>
        
            <content type="html">&lt;p&gt;From time to time I like to test some new functionality of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.playframework.org&#x2F;&quot;&gt;Play 2.0&lt;&#x2F;a&gt;. Creating a tiny for-fun project allows me to see that functionality in action, to solve the initial pitfalls related to it and to have a basic sample for later on.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;With Play 2.1 coming closer, and seeing all the new stuff in it (Slick, Scala 2.10, etc) I wanted to test some of the features that I’ve not been able to use in a “real project”, especially the ones related to Real Time web. When thinking about what to implement I remembered an issue a friend had in his company, an ETL-like process that had to receive data (massive amounts) on one end and store it in several location after processing the data. While not in the mood to create a real system which would be quite complex, having to manage queues and ensuring messages were delivered, that inspired me to plan a minor project in which I could use several interesting technologies: Iteratee, MongoDB, Redis and Akka actors. I’ve not used any of them very often, so I was sold to the idea :)&lt;&#x2F;p&gt;
&lt;p&gt;You can find the code resulting from this experiment in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;iteratees-test&quot;&gt;my Github repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I won’t start a line-by-line description of the project, the source is there and I believe it’s quite self-explanatory. But there are some things that are worth mentioning, even if it is just for future reference:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enumerator.imperative&lt;&#x2F;strong&gt; allows you to push data into the Enumerator manually &lt;strong&gt;and won’t close the stream&lt;&#x2F;strong&gt; until you say so. I had problems when trying to implement a Html view on the stream, as a non-imperative stream was closing automatically once the data was consumed, not waiting for the next input which was slower than the rate at which the app consumed the Enumerator.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;dev.w3.org&#x2F;html5&#x2F;eventsource&#x2F;&quot;&gt;SSE&lt;&#x2F;a&gt; is great, very performing and with better support than WebSockets. Also, the fact that the browser automatically restores the connection if the link is dropped simplifies the code a lot. But (always a but!) it has a bug in its implementation in Play 2.0.4 where the events won’t have an Id associated even if you provide the corresponding extractor. Hopefully that will be solved in 2.1. The event name part works, though!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Concurrent.hub&lt;&#x2F;strong&gt; has a nice trick with the &lt;code&gt;getPatchCord&lt;&#x2F;code&gt; method where you multiplex the stream to several clients at the same time. Saves a lot of memory and CPU.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Akka&lt;&#x2F;strong&gt; actors are as simple, fast and reliable as always. As a &lt;em&gt;veteran&lt;&#x2F;em&gt; Java developer, seeing Actors makes it very very hard to go back to &lt;em&gt;synchronized&lt;&#x2F;em&gt; and all that clutter&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The combination Iteratee + Actor + MongoDB is &lt;strong&gt;FAST&lt;&#x2F;strong&gt;. When running a test with simulated request every 10ms my computer (a bit old by nowadays standards) didn’t notice it at all. Low resource consumption and high speed? Go Play!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Talking about &lt;strong&gt;MongoDB&lt;&#x2F;strong&gt;, I’ve never been a huge fan of NoSQL and in the past I read many articles which made me doubt about Mongo. Obviously, this is not a real-life system where I can’t afford to lose data, but it was refreshing to see the simplicity of the approach Mongo takes to storing and retrieving data. With &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;reactivemongo.org&#x2F;&quot;&gt;ReactiveMongo&lt;&#x2F;a&gt; and Play 2.1 it may be a wonderful support system for non-critical real-time data.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis&lt;&#x2F;strong&gt; as a Memcached replacement is good, very good, but the additional methods provided by the API so you can use it as a &lt;em&gt;key store&lt;&#x2F;em&gt; can be a bit confusing. I can’t say which one is better (Redis or Memcached) but I’m quite impressed with Redis.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Not much more to add. Feel free to clone the code and play with it. It’s nothing amazing as code goes, but it shows what you can achieve with just a few lines of Scala and Play :)&lt;&#x2F;p&gt;
</content>
        <summary type="html">From time to time I like to test some new functionality of Play 2.0. Creating a tiny for-fun project allows me to see that functionality in action, to solve the initial pitfalls related to it and to have a basic sample for later on.
…</summary>
        </entry><entry xml:lang="en">
        <title>Learning Scala in Coursera</title>
        <published>2012-10-15T00:00:00+00:00</published>
        <updated>2012-10-15T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/learning-scala-in-coursera/" type="text/html"/>
        <id>https://perevillega.com/posts/learning-scala-in-coursera/</id>
        
            <content type="html">&lt;p&gt;Scala is growing, a lot. The (relatively) recent &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;blog.typesafe.com&#x2F;typesafe-announces-14m-series-b-financing&quot;&gt;investment of $14M&lt;&#x2F;a&gt; in the company ensures that the language will be taken care of and any remaining issues (like some necessary improvements for the IDE) tackled. Scala 2.10 is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;node&#x2F;12797&quot;&gt;around the corner&lt;&#x2F;a&gt; and with it all the performance and APi improvements. And &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.playframework.org&#x2F;&quot;&gt;Play&lt;&#x2F;a&gt; is healthier than ever. Good times to be a Scala fan.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Another big step to make Scala more popular has been the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;class.coursera.org&#x2F;progfun-2012-001&#x2F;class&#x2F;index&quot;&gt;Functional Programming in Scala course from Coursera&lt;&#x2F;a&gt;. For people like myself who  learned the language via some book and StackOverflow questions, it’s been a very welcomed training to ensure Scala foundations were good enough and to polish the functional approach to coding.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe the approach is very academic, and in fact some problems are solved in convoluted ways just to force the student to implement specific methods. But all in all the course is great. The videos from Martin are polished and the explanations well delivered. And the automatic evaluation method is a nice touch :)&lt;&#x2F;p&gt;
&lt;p&gt;Not only that, the course itself has served as trigger for some other interesting things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.meetup.com&#x2F;Dublin-Scala-users-group&#x2F;events&#x2F;80995152&#x2F;&quot;&gt;Scala meetup&lt;&#x2F;a&gt; was organized in Dublin, where we were able to chat and learn some more advanced techniques when using Scala&lt;&#x2F;li&gt;
&lt;li&gt;I found myself being able to solve problems from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;aperiodic.net&#x2F;phil&#x2F;scala&#x2F;s-99&#x2F;&quot;&gt;99 Scala problems&lt;&#x2F;a&gt; with less effort, which seems to point to an increase in my Scala skils (&lt;strong&gt;update&lt;&#x2F;strong&gt;: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;scala99problems&quot;&gt;some code available at Github&lt;&#x2F;a&gt;, will be completing it as time allows)&lt;&#x2F;li&gt;
&lt;li&gt;I could convince 3 other guys from my current job to join the course. It’s very good to share and compare notes on the exercises (no copying, I swear!), makes it much easier to understand new concepts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It’s been long since I felt so comfortable and happy when coding in a given platform or language. Not many people will read this, but if you do: try it! It’s worth the effort. With such an active community and so many companies adopting Play and Scala, it’s silly not to.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to all this, through the Scala course I discovered how great Coursera is as a learning platform. The downside for people addicted to learning like myself is that it could become time consuming in the near future (I joined around 20 courses for the next year) but the fact that you can resign at any time and that you may decide to not deliver the homework but still keep access the theory is of great value. It will be interesting to see if they can solve the issues around peer-grading, as they lower the value of some courses a bit. But the number of relevant subjects is incredible.&lt;&#x2F;p&gt;
&lt;p&gt;So, between Scala and Coursera (and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;play-modules&#x2F;modules.playframework.org&quot;&gt;some other projects&lt;&#x2F;a&gt;) I’m keeping myself busy. But lots of fun ahead :)&lt;&#x2F;p&gt;
</content>
        <summary type="html">Scala is growing, a lot. The (relatively) recent investment of $14M in the company ensures that the language will be taken care of and any remaining issues (like some necessary improvements for the IDE) tackled. Scala 2.10 is around the corner and with it all the performance and APi improvements. And Play is healthier than ever. Good times to be a Scala fan.
…</summary>
        </entry><entry xml:lang="en">
        <title>Scala: Move Forward</title>
        <published>2011-07-19T00:00:00+00:00</published>
        <updated>2011-07-19T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/scala-move-forward/" type="text/html"/>
        <id>https://perevillega.com/posts/scala-move-forward/</id>
        
            <content type="html">&lt;p&gt;Soon Java 7 will be released. A bit delayed, yes, but it’s here. Even so the question lingers: is it enough? I believe the answer nowadays is NO, but of course this is an open discussion in which each developer will have a different (and valid) opinion as per each one’s background. Let’s give some arguments for the no, then. Let’s talk about &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;&quot;&gt;Scala&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;why-scala&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#why-scala&quot; aria-label=&quot;Anchor link for: why-scala&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Why Scala?&lt;&#x2F;h2&gt;
&lt;p&gt;You may be wondering why should you learn a new language. If you want to be the average run-of-the-mill developer, no need to. But by learning new languages you improve your skills due to the exposure to new methodologies and idioms. If you’ve read &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;pragprog.com&#x2F;book&#x2F;tpp&#x2F;the-pragmatic-programmer&quot;&gt;The Pragmatic Programmer&lt;&#x2F;a&gt; you know what I mean.&lt;&#x2F;p&gt;
&lt;p&gt;So, why Scala? Because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;with Scala you will enter the world of functional programming, without leaving the comfort of Object Oriented development. Functional programming helps scalability and testability. Nowadays, with the rise of multicore processors, using a language that facilitates multithreading by removing the need of locks and threads is a huge win.&lt;&#x2F;li&gt;
&lt;li&gt;Scala syntax and libraries reduce the lines of code you need to write. And LOC have &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Source_lines_of_code#Relation_with_security_faults&quot;&gt;a direct relation&lt;&#x2F;a&gt; with bugs: less lines, less bugs.&lt;&#x2F;li&gt;
&lt;li&gt;Scala runs in the JVM, and it compiles to the same bytecode as Java. This means you can mix Java and Scala code in a program, giving you access to the vast number of existing Java libraries.&lt;&#x2F;li&gt;
&lt;li&gt;Scala removes some of the issues with Java. For example, no more need of Guava collections, Scala gives you what you need.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With great web frameworks like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;scala.playframework.org&#x2F;&quot;&gt;Play&lt;&#x2F;a&gt; using Scala for web development, good IDE support (like Eclipse or IntelliJ) and knowing you won’t leave the JVM, there are no real excuses to not start learning Scala. Besides laziness, that is.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;but-that-s-for-geeks-no-one-uses-it&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#but-that-s-for-geeks-no-one-uses-it&quot; aria-label=&quot;Anchor link for: but-that-s-for-geeks-no-one-uses-it&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
But that’s for geeks, no one uses it&lt;&#x2F;h2&gt;
&lt;p&gt;Not quite true. Yes, early adopters of Scala were geeks, as any early adopter usually is. But nowadays Scala is widely used, and its adoption is growing. You may not see it in “traditional” companies like Accenture. But you know &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;&quot;&gt;Twitter&lt;&#x2F;a&gt;? They use Scala. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.guardian.co.uk&#x2F;&quot;&gt;The Guardian&lt;&#x2F;a&gt;? Scala. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;press.linkedin.com&#x2F;about&quot;&gt;LinkedIn&lt;&#x2F;a&gt;? Scala. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;foursquare.com&#x2F;about&#x2F;new?from=hp&quot;&gt;FourSquare&lt;&#x2F;a&gt;. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.nature.com&#x2F;&quot;&gt;Nature&lt;&#x2F;a&gt;. Well, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;node&#x2F;1658&quot;&gt;check by yourself&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ok-but-how-to-start&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#ok-but-how-to-start&quot; aria-label=&quot;Anchor link for: ok-but-how-to-start&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Ok, but how to start?&lt;&#x2F;h2&gt;
&lt;p&gt;First, get your hands on a copy of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.artima.com&#x2F;shop&#x2F;programming_in_scala_2ed&quot;&gt;Programming in Scala&lt;&#x2F;a&gt;. Read it. And then start coding using Scala as if you coded in Java, don’t worry about the new stuff. Just code. Check &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;tagged&#x2F;scala&quot;&gt;Stack Overflow&lt;&#x2F;a&gt; when in doubt. Read other people’s code. As time goes you will find better ways to use the new constructs the language provides, and after a few weeks you will fall into “Scala mode”.&lt;&#x2F;p&gt;
&lt;p&gt;Recently I was in a Scala talk organised by TypeSafe, the company behind Scala. They mentioned that (in their experience) people starts getting as productive in Scala as in Java after using the language for 4-6 weeks.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;node&#x2F;960&quot;&gt;official Scala site&lt;&#x2F;a&gt; can help you a bit more.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-does-scala-give-me&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#what-does-scala-give-me&quot; aria-label=&quot;Anchor link for: what-does-scala-give-me&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
What does Scala give me?&lt;&#x2F;h2&gt;
&lt;p&gt;I won’t list all of Scala capabilities, there is a book you should have bought already for that ;) But if you are curious, some of the features that make Scala great:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Closure_%28computer_science%29&quot;&gt;Closures&lt;&#x2F;a&gt;: Scala supports closures. In Scala a function is a 1st-level construct and as such it can be assigned, passed as parameter, etc.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;node&#x2F;135&quot;&gt;Currying&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mixin&quot;&gt;Traits&lt;&#x2F;a&gt;, a type of Mixin that makes composition much more powerful than simple Interfaces in Java&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;node&#x2F;107&quot;&gt;Case classes&lt;&#x2F;a&gt;, which along the built-in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;node&#x2F;120&quot;&gt;pattern matching&lt;&#x2F;a&gt; provides a very flexible tool for your algorithms&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;node&#x2F;131&quot;&gt;XML&lt;&#x2F;a&gt; as part of the language (XML as literal)&lt;&#x2F;li&gt;
&lt;li&gt;Powerful syntax that allows you to define &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;node&#x2F;118&quot;&gt;operators&lt;&#x2F;a&gt; with names like +, perfect to create &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain-specific_language&quot;&gt;DSL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Parallel Collections, which you can use as normal collections but behind the scenes break themselves automatically into pieces to take advantage of multiple processors for certain operations (like map, filter, etc).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.scala-lang.org&#x2F;node&#x2F;104&quot;&gt;some more&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With Scala you can do everything you can do in Java. With less code, less effort, less bugs. And you can do some things Java won’t be able to do in the near future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-sum-it-up&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#to-sum-it-up&quot; aria-label=&quot;Anchor link for: to-sum-it-up&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
To sum it up&lt;&#x2F;h2&gt;
&lt;p&gt;I believe Java 7 is not enough. A good step, but not enough. And the reason is that you can use Scala. Java needs to change too much to catch up, even more with the bureaucracy associated to Java processes, and in the meantime Scala will keep evolving.&lt;&#x2F;p&gt;
&lt;p&gt;The Java king is dead, long live the Scala king!&lt;&#x2F;p&gt;
</content>
        <summary type="html">Soon Java 7 will be released. A bit delayed, yes, but it’s here. Even so the question lingers: is it enough? I believe the answer nowadays is NO, but of course this is an open discussion in which each developer will have a different (and valid) opinion as per each one’s background. Let’s give some arguments for the no, then. Let’s talk about Scala.
…</summary>
        </entry>
</feed>
