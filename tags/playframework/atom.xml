<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="https://perevillega.com/feed_style.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <tabi:metadata xmlns:tabi="https://github.com/welpo/tabi">
        <tabi:separator>
            •
        </tabi:separator>
        <tabi:about_feeds>This is a web feed, also known as an Atom feed. Subscribe by copying the URL from the address bar into your newsreader. Visit About Feeds to learn more and get started. It&#x27;s free.</tabi:about_feeds>
        <tabi:visit_the_site>Visit website</tabi:visit_the_site>
        <tabi:recent_posts>Recent posts</tabi:recent_posts>
        <tabi:last_updated_on>Updated on $DATE</tabi:last_updated_on>
        <tabi:default_theme></tabi:default_theme>
        <tabi:post_listing_date>date</tabi:post_listing_date>
        <tabi:current_section>playframework</tabi:current_section>
    </tabi:metadata><title>Software serves the Business - playframework</title>
        <subtitle>Pere Villega&#x27;s blog</subtitle>
    <link href="https://perevillega.com/tags/playframework/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://perevillega.com/tags/playframework/" rel="alternate" type="text/html"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2014-01-10T00:00:00+00:00</updated>
    <id>https://perevillega.com/tags/playframework/atom.xml</id><entry xml:lang="en">
        <title>Twilio and Play Framework</title>
        <published>2014-01-10T00:00:00+00:00</published>
        <updated>2014-01-10T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/twilio-and-play-framework/" type="text/html"/>
        <id>https://perevillega.com/posts/twilio-and-play-framework/</id>
        
            <content type="html">&lt;p&gt;Another year, more technology to test :) Busy as I am in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.gumtree.com&#x2F;&quot;&gt;Gumtree&lt;&#x2F;a&gt;, I’ve been able to test some interesting stuff. You know, evaluation of technologies to see if they make sense from a business perspective. Or playing around, it depends on the point of view ;)&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This time the testing platform has been &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.twilio.com&#x2F;&quot;&gt;Twilio&lt;&#x2F;a&gt;. I built a prototype using Play Framework, Scala and the Twilio API to see how things work and if we could use some of them in the site. Granted, by prototype I mean 2 pages to test some calls to the API, but I guess this covers the core of Twilio, and extending it should be quite straightforward.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve written about it in a post in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@GumtreeDevTeam&#x2F;using-twilio-from-within-play-framework-81b174e31a84&quot;&gt;Gumtree dev blog&lt;&#x2F;a&gt;, where I also link to the sample code in Github.&lt;&#x2F;p&gt;
&lt;p&gt;As always, feedback via Twitter&#x2F;Email is more than welcome.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, and Happy 2014! May the (reactive?) code be with you ;)&lt;&#x2F;p&gt;
</content>
        <summary type="html">Another year, more technology to test :) Busy as I am in Gumtree, I’ve been able to test some interesting stuff. You know, evaluation of technologies to see if they make sense from a business perspective. Or playing around, it depends on the point of view ;)
…</summary>
        </entry><entry xml:lang="en">
        <title>Executing Jasmine Tests in Play 2.0.4</title>
        <published>2013-01-26T00:00:00+00:00</published>
        <updated>2013-01-26T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/executing-jasmine-tests-in-play-2-dot-0-4/" type="text/html"/>
        <id>https://perevillega.com/posts/executing-jasmine-tests-in-play-2-dot-0-4/</id>
        
            <content type="html">&lt;p&gt;&lt;em&gt;Christmas&lt;&#x2F;em&gt; break is over, and on a whim I started to check &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;angularjs.org&#x2F;&quot;&gt;AngularJs&lt;&#x2F;a&gt;. If you haven’t tested it yet, do it. I’ve toyed around  with Backbone and some other Javascript &lt;em&gt;single page app&lt;&#x2F;em&gt; frameworks, and Angular is by far the one that I liked the most. It has simplicity embedded in its core, and turning tedious tasks (as setting controllers) into something trivial makes it a pleasure to use. Simplicity. Such an important concept, and one which is seldom present in frameworks.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;But I digress. Back to the post. Adding Angular to a Play app is as simple as you can imagine, as in the end it’s a Javascript library. Add the Angular files, code controllers and services, put Angular templates under &lt;code&gt;public&lt;&#x2F;code&gt; so Angular can get them, and you are done.  You can see a project sample &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;play2demo-jasmine&quot;&gt;in my Github account&lt;&#x2F;a&gt;. Be aware the sample is very rough and has minimal functionality, the aim was to see how can they be linked, not to push Angular boundaries.&lt;&#x2F;p&gt;
&lt;p&gt;So we have a Javascript framework, and obviously we want to test it. Unfortunately the recommended way to test Angular is via &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;pivotal.github.com&#x2F;jasmine&#x2F;&quot;&gt;Jasmine&lt;&#x2F;a&gt;, a Javascript BDD framework. I say unfortunately because that would mean running 2 commands for testing: one for Play tests and another for Angular tests. Or does it?&lt;&#x2F;p&gt;
&lt;p&gt;It is on moments like this when Open Source shows its worthiness. Enter &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.guardian.co.uk&#x2F;&quot;&gt;The Guardian&lt;&#x2F;a&gt; and its Software development department, which open sources a lot of the code they create to run their online platform. A wise company, they use Scala and Play and they created &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;guardian&#x2F;sbt-jasmine-plugin&quot;&gt;Sbt-Jasmine&lt;&#x2F;a&gt;, a plugin to run Jasmine inside Sbt projects. Given that Play 2 uses Sbt, this should prove simple.&lt;&#x2F;p&gt;
&lt;p&gt;Well, to be honest it wasn’t &lt;em&gt;so&lt;&#x2F;em&gt; simple, that’s why I decided to document it here to save time to other interested people. This assumes a working Play 2.0.4 project, should work with any 2.0.x project but can’t promise anything about 2.1 (have to test it yet)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;integrating-sbt-jasmine&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#integrating-sbt-jasmine&quot; aria-label=&quot;Anchor link for: integrating-sbt-jasmine&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Integrating Sbt-Jasmine&lt;&#x2F;h2&gt;
&lt;p&gt;This is quite straightforward, you just need to follow the instructions from the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;guardian&#x2F;sbt-jasmine-plugin&quot;&gt;Sbt-Jasmine&lt;&#x2F;a&gt; page. On your project, under the &lt;code&gt;project&lt;&#x2F;code&gt; folder, create another folder named &lt;code&gt;project&lt;&#x2F;code&gt; (that is, you will have &lt;code&gt;&#x2F;project&#x2F;project&#x2F;&lt;&#x2F;code&gt; path). Inside that new folder create a file &lt;code&gt;Plugins.scala&lt;&#x2F;code&gt; and add this code to it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-import z-scala&quot;&gt;&lt;span class=&quot;z-keyword z-other z-import z-scala&quot;&gt;import&lt;&#x2F;span&gt; sbt&lt;span class=&quot;z-punctuation z-accessor z-dot z-scala&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-underscore z-scala&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; This plugin is used to load the sbt-jasmine plugin into our project.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; This allows us to import the SbtJasminePlugin file&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; in Build.scala, and then set the settings and configuration for Sbt-Jasmine&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-scala&quot;&gt;object&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-class z-scala&quot;&gt; Plugins&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-declaration z-scala&quot;&gt;extends&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-other z-inherited-class z-scala&quot;&gt;Build&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-scala&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-other z-scala&quot;&gt;lazy&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;plugins&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;plugins&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; file&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;.&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;    &lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;dependsOn&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;uri&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;git:&#x2F;&#x2F;github.com&#x2F;guardian&#x2F;sbt-jasmine-plugin.git#0.7&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-scala&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will load the plugin directly from Github into your project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-jasmine-as-part-of-your-test-cycle&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#adding-jasmine-as-part-of-your-test-cycle&quot; aria-label=&quot;Anchor link for: adding-jasmine-as-part-of-your-test-cycle&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
Adding Jasmine  as part of your test cycle&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have the plugin in, we want to be able to run both test types (Play and Jasmine) when executing &lt;code&gt;play test&lt;&#x2F;code&gt;. To that aim we have to edit our &lt;code&gt;Build.scala&lt;&#x2F;code&gt; project file to let Play know about Jasmine.&lt;&#x2F;p&gt;
&lt;p&gt;The first step will be importing the existing Jasmine settings the sbt plugin added into the project. We can do that via the &lt;code&gt;PlayProject&lt;&#x2F;code&gt; method &lt;code&gt;settings&lt;&#x2F;code&gt;, as in &lt;code&gt;.settings(jasmineSettings : _*)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The second step is to override the default Jasmine configuration, specifically the paths that point to the test assets and source files. Sbt-Jasmine expects a set of default paths that don’t map to the ones existing in a Play project, so we change them as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; jasmine configuration, overridden as we don&amp;#39;t follow the default&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; project structure sbt-jasmine expects&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;appJsDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;app&#x2F;assets&#x2F;javascripts&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;appJsLibDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;public&#x2F;javascripts&#x2F;lib&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;jasmineTestDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;test&#x2F;assets&#x2F;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;jasmineConfFile &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;test&#x2F;assets&#x2F;test.dependencies.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that &lt;code&gt;appJsDir&lt;&#x2F;code&gt; is pointing to the folder for minimized assets, we could change that to point to &lt;code&gt;&quot;public&#x2F;Javascripts&quot;&lt;&#x2F;code&gt;. The paths for &lt;code&gt;appJsLibDir&lt;&#x2F;code&gt;, &lt;code&gt;jasmineTestDir&lt;&#x2F;code&gt; and &lt;code&gt;jasmineConfFile&lt;&#x2F;code&gt; can be modified as it suits you.&lt;&#x2F;p&gt;
&lt;p&gt;The Jasmine configuration file follows standard Jasmine notation, which I won’t discuss in this post. The configuration for this sample project is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Dependencies for the unit test via Jasmine&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;libDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;jquery-1.8.3.min.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;libDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;angular.min.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;libDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;angular-resource.min.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;testDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;config&#x2F;angular-mocks.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Import all modules (RequireJs fails for some reason)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; FIXME: check why we can&amp;#39;t use RequireJs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;loadGlobal&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-constant z-scala&quot;&gt;EnvJasmine&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;rootDir + &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;todo.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-scala&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we need to tell Play to run Jasmine tests when executing the &lt;code&gt;test&lt;&#x2F;code&gt; command. We do this by adding a dependency on &lt;code&gt;test&lt;&#x2F;code&gt; with  &lt;code&gt;(test in Test) &amp;lt;&amp;lt;= (test in Test) dependsOn (jasmine)&lt;&#x2F;code&gt;. This will cause Play to run first the Jasmine tests and, if they succeed, Play own tests will be executed.&lt;&#x2F;p&gt;
&lt;p&gt;The final code looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; class=&quot;language-scala z-code&quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-storage z-type z-stable z-scala&quot;&gt;val&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-constant z-scala&quot;&gt;main&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;PlayProject&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;appName&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; appVersion&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt; appDependencies&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt; mainLang &lt;span class=&quot;z-keyword z-operator z-assignment z-scala&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;SCALA&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;this adds jasmine settings from the sbt-jasmine plugin into the project&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;settings&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;jasmineSettings &lt;span class=&quot;z-punctuation z-ascription z-scala&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-varargs z-scala&quot;&gt;_*&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-scala&quot;&gt;.&lt;&#x2F;span&gt;settings&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Add your own project settings here&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; jasmine configuration overridden&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  appJsDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;app&#x2F;assets&#x2F;javascripts&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  appJsLibDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;public&#x2F;javascripts&#x2F;lib&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  jasmineTestDir &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;test&#x2F;assets&#x2F;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  jasmineConfFile &amp;lt;+= baseDirectory &#x2F; &lt;span class=&quot;z-string z-quoted z-double z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;test&#x2F;assets&#x2F;test.dependencies.js&lt;span class=&quot;z-punctuation z-definition z-string z-end z-scala&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-scala&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; link jasmine to the standard &amp;#39;sbt test&amp;#39; action.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Now when running &amp;#39;test&amp;#39; jasmine tests will be run&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-scala&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; and after that other Play tests will be executed.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;  &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;test in &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &amp;lt;&amp;lt;= &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;test in &lt;span class=&quot;z-support z-constant z-scala&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; dependsOn &lt;span class=&quot;z-meta z-group z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-scala&quot;&gt;(&lt;&#x2F;span&gt;jasmine&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-scala&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-scala&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that’s all. If you add some Jasmine tests under &lt;code&gt;test&#x2F;assets&lt;&#x2F;code&gt; and then execute &lt;code&gt;play test&lt;&#x2F;code&gt; you will see them being run. Remember what I said about simplicity? Why should you remember to run 2 suits independently when 1 command can do that for you?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-be-improved&quot;&gt;&lt;a class=&quot;header-anchor no-hover-padding&quot; href=&quot;#to-be-improved&quot; aria-label=&quot;Anchor link for: to-be-improved&quot;&gt;&lt;span class=&quot;link-icon&quot; aria-hidden=&quot;true&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;
To be improved&lt;&#x2F;h2&gt;
&lt;p&gt;As much as I would like, this is not perfect. I found a couple of issues when integrating Jasmine and Play. Given I’m not an expert on neither, any help will be appreciated:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In theory you could use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;requirejs.org&#x2F;&quot;&gt;RequireJS&lt;&#x2F;a&gt; to import the Javascript sources to test, but it didn’t work when I tried. Not sure why and for a standard AngularJs distribution we are talking about 5 Javascript files (it could grow if you break them into components), so it doesn’t seem such a big deal. But it’s not perfect.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;AngularJs allows you to declare End to End test scenarios, similar to Selenium but inside AngularJs itself. Unfortunately I couldn’t make them work, as they require a server running. Given the enhanced Selenium support in newer AngularJS versions I expect one could use Play end to end scenarios to test this part, but I need to put more work on it to ensure it is true.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If anyone knows how to fix this, please let me know!&lt;&#x2F;p&gt;
</content>
        <summary type="html">Christmas break is over, and on a whim I started to check AngularJs. If you haven’t tested it yet, do it. I’ve toyed around  with Backbone and some other Javascript single page app frameworks, and Angular is by far the one that I liked the most. It has simplicity embedded in its core, and turning tedious tasks (as setting controllers) into something trivial makes it a pleasure to use. Simplicity. Such an important concept, and one which is seldom present in frameworks.
…</summary>
        </entry><entry xml:lang="en">
        <title>Iteratees and Play 2</title>
        <published>2012-11-18T00:00:00+00:00</published>
        <updated>2012-11-18T00:00:00+00:00</updated>
        <author>
            <name>Pere Villega</name>
        </author>
        <link rel="alternate" href="https://perevillega.com/posts/iteratees-and-play-2/" type="text/html"/>
        <id>https://perevillega.com/posts/iteratees-and-play-2/</id>
        
            <content type="html">&lt;p&gt;From time to time I like to test some new functionality of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.playframework.org&#x2F;&quot;&gt;Play 2.0&lt;&#x2F;a&gt;. Creating a tiny for-fun project allows me to see that functionality in action, to solve the initial pitfalls related to it and to have a basic sample for later on.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;With Play 2.1 coming closer, and seeing all the new stuff in it (Slick, Scala 2.10, etc) I wanted to test some of the features that I’ve not been able to use in a “real project”, especially the ones related to Real Time web. When thinking about what to implement I remembered an issue a friend had in his company, an ETL-like process that had to receive data (massive amounts) on one end and store it in several location after processing the data. While not in the mood to create a real system which would be quite complex, having to manage queues and ensuring messages were delivered, that inspired me to plan a minor project in which I could use several interesting technologies: Iteratee, MongoDB, Redis and Akka actors. I’ve not used any of them very often, so I was sold to the idea :)&lt;&#x2F;p&gt;
&lt;p&gt;You can find the code resulting from this experiment in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pvillega&#x2F;iteratees-test&quot;&gt;my Github repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I won’t start a line-by-line description of the project, the source is there and I believe it’s quite self-explanatory. But there are some things that are worth mentioning, even if it is just for future reference:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enumerator.imperative&lt;&#x2F;strong&gt; allows you to push data into the Enumerator manually &lt;strong&gt;and won’t close the stream&lt;&#x2F;strong&gt; until you say so. I had problems when trying to implement a Html view on the stream, as a non-imperative stream was closing automatically once the data was consumed, not waiting for the next input which was slower than the rate at which the app consumed the Enumerator.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;dev.w3.org&#x2F;html5&#x2F;eventsource&#x2F;&quot;&gt;SSE&lt;&#x2F;a&gt; is great, very performing and with better support than WebSockets. Also, the fact that the browser automatically restores the connection if the link is dropped simplifies the code a lot. But (always a but!) it has a bug in its implementation in Play 2.0.4 where the events won’t have an Id associated even if you provide the corresponding extractor. Hopefully that will be solved in 2.1. The event name part works, though!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Concurrent.hub&lt;&#x2F;strong&gt; has a nice trick with the &lt;code&gt;getPatchCord&lt;&#x2F;code&gt; method where you multiplex the stream to several clients at the same time. Saves a lot of memory and CPU.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Akka&lt;&#x2F;strong&gt; actors are as simple, fast and reliable as always. As a &lt;em&gt;veteran&lt;&#x2F;em&gt; Java developer, seeing Actors makes it very very hard to go back to &lt;em&gt;synchronized&lt;&#x2F;em&gt; and all that clutter&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The combination Iteratee + Actor + MongoDB is &lt;strong&gt;FAST&lt;&#x2F;strong&gt;. When running a test with simulated request every 10ms my computer (a bit old by nowadays standards) didn’t notice it at all. Low resource consumption and high speed? Go Play!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Talking about &lt;strong&gt;MongoDB&lt;&#x2F;strong&gt;, I’ve never been a huge fan of NoSQL and in the past I read many articles which made me doubt about Mongo. Obviously, this is not a real-life system where I can’t afford to lose data, but it was refreshing to see the simplicity of the approach Mongo takes to storing and retrieving data. With &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;reactivemongo.org&#x2F;&quot;&gt;ReactiveMongo&lt;&#x2F;a&gt; and Play 2.1 it may be a wonderful support system for non-critical real-time data.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis&lt;&#x2F;strong&gt; as a Memcached replacement is good, very good, but the additional methods provided by the API so you can use it as a &lt;em&gt;key store&lt;&#x2F;em&gt; can be a bit confusing. I can’t say which one is better (Redis or Memcached) but I’m quite impressed with Redis.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Not much more to add. Feel free to clone the code and play with it. It’s nothing amazing as code goes, but it shows what you can achieve with just a few lines of Scala and Play :)&lt;&#x2F;p&gt;
</content>
        <summary type="html">From time to time I like to test some new functionality of Play 2.0. Creating a tiny for-fun project allows me to see that functionality in action, to solve the initial pitfalls related to it and to have a basic sample for later on.
…</summary>
        </entry>
</feed>
